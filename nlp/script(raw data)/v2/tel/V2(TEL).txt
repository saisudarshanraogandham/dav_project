వివరణ మరియు దాని పరిణామ క్రమం పై
చర్చను కొనసాగిస్తాము.
మనము మొదటి లెక్చర్ ( lecture) చివరిలో డిస్ట్రిబ్యూటెడ్
(distributed) సిస్టమ్స్ (systems) గురించి చర్చించుకున్నాం.
కాబట్టి, మనం ఈ స్లయిడ్లో ఉన్నామని విశ్వసిస్తున్నా,
ముందుగా,ఈ డిస్ట్రిబ్యూటెడ్ సిస్టమ్ ( Distributed System)
అవసరం ఏమిటి?
అనేది చూద్దాం, మనం చర్చిస్తున్నట్లుగా;
దీనికి మూల కారకాలలో లో ఒకటి అప్లికేషన్(application)
యొక్క స్వభావం మరియు పర్ఫార్మన్స్(performance)
అంటే ,కొన్ని అప్లికేషన్లు(applications) కంప్యూటింగ్(computing)
సంభందించినవి కావచ్చు లేదా మరికొన్ని డేటా(data)
కి సంభందించినవి కావచ్చు.
కాబట్టి, డిస్ట్రిబ్యూటెడ్ కంప్యూటింగ్(Distributed
Computing) అవసరం ఎంతో ఉంది. మరొక అంశం ఏమిటంటే
రోబస్ట్నెస్ (robustness), ముందు మనం చర్చించుకున్నట్లుగా
ఏ ఒక్క నోడ్(node) పనిచేయక పోయినా, మొత్తం సిస్టమ్
(system) వైఫల్యం చెందకూడదు.
నా అప్లికేషన్ ( application) కి ఒక్క నోడే (node) వైఫల్యం
ఉండకూడదు.
ఎల్లప్పుడు సిస్టమ్ (సిస్టమ్) పనిచేస్తూనే
ఉండాలి.
పర్ఫార్మన్స్ (performance) తక్కువ స్థాయిలోఉన్నప్పుడు
కూడా, అది ఒక వైఫల్యం కాదు. వ్యవస్థ విఫలమైతే
కేంద్రీకృత సిస్టమ్స్(centralized Systems) విషయంలో,ఏ ఒక్క
నోడే (node) పనిచేయకపోయినా మొత్తం సిస్టమ్ (system)
విఫలం అవుతుంది.
అయితే ఈ డిస్ట్రిబూటింగ్ కంప్యూటింగ్ (distributed
Computing) పని చేస్తూనే ఉంటుంది.
విఫలం అయిన నోడ్స్ (nodes) యొక్క పనిని మరొక
ఇతర నోడ్లు చేయవచ్చు.
అంటే, ఏదైనా నోడ్ (node) విఫలమైతే, దాని
విధిని ఇతర నోడ్ ద్వారా లోడ్ చేయవచ్చని
లేదా భాగస్వామ్యం చేయగల వ్యవస్థగా
అభివృద్ధి చేస్తాం.
కాబట్టి, ఈ రకమైన టెక్నాలజీ, ఆల్గోరిథంలు
డిస్ట్రిబ్యూటెడ్ స్య్తెమ్ (distributed Systems)లో
అభివృద్ధి చెందుతాయి లేదా ఉపయోగించబడుతున్నాయి.
కాబట్టి, అనేక ఇతర డిస్ట్రిబ్యూటెడ్
(distributed) అప్లికేషన్లు(applications) కూడా ఉన్నాయి.
డిస్ట్రిబ్యూటెడ్ (distributed) అప్లికేషన్
(application) అంటే, ఒక సాధారణ సమస్యకు సంబంధించిన
ప్రోసెస్ (processes) సమితిని నెట్వర్క్(network) ద్వారా
అనుసంధానించబడిన మెషిన్స్ (machines) కి
పంపిణీ చేసి దానిని పరిష్కరించడానికి
సమిష్టిగా కలిసి పనిచేయడం; మరొక అర్థంలో,
ఒక నిర్దిష్ట సమస్య పరిష్కారానికి అన్నీ
అప్లికేషన్ (application)లు ఒకదాని తో ఒకటి సమన్వయం
చేసుకోవడం.
కాబట్టి, దీనిని మనం ఇలా కూడా చెప్పవచ్చు
; ఒక నిర్దిష్ట సమస్యను పరిష్కరించడానికి
పనిచేస్తున్న వ్యక్తుల సమూహం అని . ఇది ప్రధానంగా
ఉన్నత శ్రేణి అప్లికేషన్లు(applications) అభివృద్ధి లేదా ఉన్నత
శ్రేణి కార్యాచరణ అవసరానికి ఉపయోగపడుతుంది,
అంటే, ఎక్కడైతే వేర్వేరు ఆపరేషన్లు మీకు భిన్నమైన
సేవలను అందిస్తాయి, అక్కడ చివరిగా ఒక
ప్రత్యేకమైన , సంపూర్ణమైన ప్రక్రియను గుర్తించాము.
కాబట్టి, ఒక్క కంప్యూటింగ్ అంశమే కాకుండా , అనేకమైన
ఇతర విషయాలను, అంటే ఎవరెవరు దీని తో
పని చేస్తారు మరియు దీనిని ఉపయోగిస్తారు
అనేవి కూడా పరిగణలోకి తీసుకుంటాము.
కాబట్టి, వివిధ కోణాలు ఉన్నాయి, కానీ డిస్ట్రిబ్యూటెడ్
కంప్యూటింగ్(distributed Computing) అనేది ఈ రకమైన
ప్రధాన అనువర్తనాల్లో ఒకటి. అనేక రకాలైన
అప్లికేషన్లు (applications) ఇప్పటికీ క్లయింట్
(client) సర్వర్ (server) రకానికి చెందినవే , వీటి రీసోర్స్
(resource) నిర్వహణ సర్వర్ (server) భాద్యత.
కాబట్టి, మనము దీనిని ఒక డిస్ట్రిబ్యూటెడ్
(distributed) వ్యవస్థగా చేయాలనుకుంటున్నాము.
ఇక్కడ పీర్-టూ-పీర్ కంప్యూటింగ్ (peer-to-peer
computing) అనేది నిజమైన డిస్ట్రిబ్యూటెడ్
కంప్యూటింగ్ (distributed computing) మార్పునకు ఒక
నమూనా.
కనుక , ఈ డిస్ట్రిబ్యూటెడ్ కంప్యూటింగ్ (distributed
computing) వైపు ఇతర ప్రేరేపిత అంశాలు లేదా ప్రేరణలు
ఉన్నాయి.
కాబట్టి, ఇది సాధారణంగా వినియోగదారులకు
ఉపయోగపడే వ్యక్తిగత సర్వర్లను వినియోగిస్తుంది
; క్లయింట్(client) తనకు నిర్ధేశించిన సర్వర్(server)ని
ఉపయోగిస్తాడు.
కనుక, ఉపయోగించడం మరియు ఫలితాలు కొరకు,
ఒక సర్వర్ (server)మరొక సర్వర్(server) కి ఒక క్లయింట్
గా పని చేస్తుంది, ఇక్కడ, సిస్టమ్స్(systems)
అన్నీ కూడా స్వంతంగా క్లయింట్-సర్వర్
(client- server) నమూనా లాగే పని చేస్తాయి అయితే
అవన్నీ కూడా ఒక నిర్ధిస్టమైన అప్లికేషన్ (application)
కొరకు పని చేస్తాయి.
మనం, పీర్(peer) ప్రోసెస్ (processes) ఆధారిత ఒక సాధారణ
డిస్ట్రిబ్యూటెడ్ అప్లికేషన్(distributed
application)ని కలిగి ఉంటాం.
కనుక, ఇక్కడ వివిధ రకాల పీర్స్(peers), మరియు
వాటిలో నడుస్తున్న వివిధ అప్లికేషన్లు
ఉన్నాయి; ఒక నిర్ధిష్టమైన ప్రక్రియ కొరకు ఈ
అప్లికేషన్లు(applications) ఒకదానితో ఒకటి సహకరించుకుంటాయి.
ఈ పీర్(peer) ప్రక్రియల ఆధారంగా అప్లికేషన్(applications)
ఉన్నాయి.
కాబట్టి, ఇవి వేర్వేరు డిస్ట్రిబ్యూటెడ్
కంప్యూటింగ్(distributed computing) నమూనాగా ఉన్నాయి,
మరొక ప్రజాదరణ పొందిన కంప్యూటింగ్(computing)
రూపావళి గ్రిడ్ కంప్యూటింగ్(Grid Computing).
గ్రిడ్ కంప్యూటింగ్ యొక్క విభిన్న నిర్వచనములు
చాలా ఉన్నాయి.
వాటిలో కొన్నింటిని చూద్దాం.
ఇది ఒక సాంప్రదాయిక నెట్వర్క్, అనగా
ఎదైతే సిస్టమ్స్ (systems) మద్యన కమ్యూనికేషన్
(communication) కి మాత్రమే ఉపయోగపడుతుందో, ఇది
దానిలా కాకుండా , స్వతంత్ర వ్యవస్థలకు సంబంధించిన
ఒక సమస్యను పరిష్కరించడానికి ,ఆ నెట్వర్క్ (network)
లోని అన్నీ కంప్యూటర్స్(computers) యొక్క ఉపయోగించని
రీసోర్స్(resource) సైకిల్ (cycles) ని కూడా ఉపయోగిస్తుంది,
అంటే దీని అర్థం మనము ఒక నిర్ధిస్టమయిన
సమస్యను పరిష్కరించడానికి కావలసిన ధృడమైన సిస్టెంలతో
(systems) రూపొందించిన నెట్వర్క్ (network) ని
కలిగి ఉన్నాము.
మనము , దీని యొక్క మరొక వివరణను చూసినట్లైతే
, గ్రిడ్ కంప్యూటింగ్ (grid computing) అనేది డిస్ట్రిబ్యూటెడ్
కంప్యూటింగ్ (distributed computing) యొక్క విర్చువలైజేషన్
(virtualization) ని బల పరుస్తుంది మరియు ఒక సిస్టమ్
ఇమేజ్ (system image) ని సృష్టించడానికి కావలసిన డాటా (data)
రిసోర్సస్ (resources) అయినటువంటి ప్రొసెసింగ్ నెట్వర్క్
(processing network), బాండ్విడ్త్ (bandwidth) స్టోరేజ్ కపాసిటీ
(storage capacity) ని వినియోగదారునికి మంజూరు చేస్తుంది.
విస్తారమైన ఐ‌టి (IT) అప్లికేషన్లని
(applications) ఆక్సెస్ (access) చేసుకోవచ్చు.
మరొక ముఖ్యమైన మార్గంలో మనం దీన్ని చూసినట్లైతే
; అనగా, ఇప్పుడు డిస్ట్రిబ్యూటెడ్ కంప్యూటింగ్(distributed
computing) నమూనాను కలిగి ఉన్నాము , తర్వాత
మనం ఈ విషయాలపై మరొక వ్యవస్థను గ్రహించడం
లేదా వాస్తవీకరించడం అనేది ఈ క్లౌడ్ కంప్యూటింగ్
నమూనా యొక్క ప్రధానమైన వాటిలో ఒకటి. మనము
నెట్ వర్క్ లో అనేక వ్యవస్థలు కలిగి
ఉన్నాము , వాటికి వివిధ ప్రాసెస్ (processes)
ఉన్నాయి, మనము మన అవసరాలకు తగినట్లుగా
వివరించుకున్న రిసోర్సస్ (resources) ని కలిగిన ఒకటి
లేదా అంతకంటే ఎక్కువ విర్చువల్ మెషిన్స్
(virtual machines) ఉన్న ఒక సిస్టమ్ (system) కావాలనుకుంటున్నాం.
కనుక , ఇవి వేర్వేరు కారకాలను కలిగి ఉన్నాయి
మరియు గ్రిడ్ కంప్యూటింగ్(grid computing) అనేది కంప్యూటింగ్
ఇన్ఫ్రాస్ట్రక్చర్ (computing infrastructure) , ఇది విశ్వసనీయ,
స్థిరమైన, పరివ్యాప్త, కంప్యూటింగ్(computing)
సామర్థ్యాన్ని అందిస్తుంది.
ఇతర అర్థంలో మనకు నెట్వర్క్లో(network)
లభించే రిసోర్సస్ (resources) ఉన్నాయి.
మన రోజువారి జీవితంలో ఉపయోగిస్తువున్న
విద్యుత్ గ్రిడ్ తో పోల్చుకుందాం,
విద్యుత్ గ్రిడ్లు నడుపుతున్నాము మరియు
మనము అనగా సంస్థలు లేదా గృహోపకరణలకు
లేదా విద్యుత్ పంపిణీ వ్యవస్థలు విద్యుథ్చ్చక్తిని
గ్రిడ్ నుండి పొందడం.
ఈ పవర్(power) అనేది ఎక్కడో అందుబాటులో ఉంటుంది.
కాబట్టి, ఒక సందర్భంలో కంప్యూటింగ్ సారూప్యాలు
ఉంటాయి ఏవిదంగా అంటే ; వినియోగదారులు
లేదా క్లయింట్ అప్లికేషన్ల(client applications) రిసోర్స్ (resource)
స్థావరాల యొక్క కొంత పరిజ్ఞానం లేదా పరిజ్ఞానం
లేకుండా అవసరమైన కంప్యూటింగ్ రిసోర్స్
(computing resources) ని, ప్రాసెసర్(processor), స్టోరేజ్(storage) డేటా
అప్లికేషన్లని పొందవచ్చు.
అంటే ఇది ఒక రిసోర్సస్ (resources) ని గుర్తించే
పద్దతి.
రిసోర్సస్ (resources) ని ఎంచుకోవడం మరియు
కంప్యూటింగ్ గ్రిడ్ (computing grid)పై ఉపయోగించడం.
కాబట్టి, ఇక్కడ ఆలోచించాల్సిన విషయం మన సొంత అల్గోరిథం(algorithm)
, పద్దతి మరియు మనకు ఏమి కావాలి ; రిసోర్సస్
(resources) అవసరం ఏమిటి?
ఇప్పుడు మనకు ఒక ప్రత్యేక కంప్యూటింగ్
గ్రిడ్(computing grid) అనుమతిస్తే మనము ఆ గ్రిడ్ (grid)పైనే
ఆధారపడి మన రిసోర్సెస్ (resources)ని , ప్రోగ్రామ్స్
ని (programs) మరియు ప్రాససెస్ని (processes) అమలు చేయాలి
మరియు కొన్ని వనరులను గుర్తించాలి.
కాబట్టి, గ్రిడ్(grid) అనేది PC, వర్క్స్టేషన్
(work station), మొదలైనటువంటి కంప్యూటింగ్(computing)
వనరులను కలయిక మరియు ఇది యాక్సెస్ చేయడానికి
అవసరమైన పద్దతులను తెలుపుతుంది.
కనుక , వినియోగదారుడి అభిప్రాయం ప్రకారం
ఈ గ్రిడ్ (grid)ని యాక్సెస్ చెయ్యడానికి ఒక పద్దతి
అవసరం.
మీరు గ్రిడ్ కంప్యూటింగ్(grid computing) లక్షణాలు చూస్తే.
ఇది ఒక సమాచారమే కాకుండా , డాటా కంప్యూటింగ్(data
computing) ద్వారా చాలా సంస్థలు వాటి రిసోర్సస్
(resources) ని సమర్థవంతంగా వినియోగించడం.
కాబట్టి, ఒక UG-PG తరగతుల కంప్యూటింగ్ ల్యాబ్
ను గమనించినట్లైతే, మనం ఆ రిసోర్సస్(resources)
ని సమర్ధవంతంగా ఉపయోగించుకోవచ్చు, ఎలాగంటే , ఆ విధ్యార్థులు
ఎక్కువగా ల్యాబ్ కు కేటాయించిన సమయమునే
ఉపయోగిస్తారు.
కనుక, మనం ఆ మిగిలిన సమయమును కంప్యూటింగ్
గ్రిడ్ (computing grid) గా ఏర్పాటు చేసుకోవచ్చు.
దానిని, ఇతర పరిశోధనలకు కంప్యూటింగ్ ప్లాట్ఫారమ్గా
(computing platform) ఉపయోగించవచ్చు.
కనుక , 100 PC లు ప్రతిదీ ఉత్తమంగా ఉంటుంది.
మనం ప్రాథమికంగా మరొక మిడిల్వేర్(middleware)
అనే విభాగంతో వర్చువలైస్ (virualize) చేయవచ్చు.
మనం దానిని ఉపయోగించ వచ్చు ఇంకొక వైపు
ఏమి జరుగుంతోందో పట్టించుకోవలసిన
అవసరం ఉండదు.
కాబట్టి, మన ప్రోగ్రాం (program) కోరుకున్న విధంగా,
ఒక నిర్దిష్ట పనితీరు స్థాయితో విశ్వసనీయంగా
నడుస్తుంది, ఇది మనకు కావాల్సినది.
ఇది ఉపయోగించని రిసోర్సస్ (resources) ఉపయోగించడానికి
ఒక మంచి అవకాశం.
ఇక్కడ అన్నీ రకాల స్థానిక కమ్యూనిటీల(communities)
కలయిక ఉంటుంది.
వివిధ రకాల వ్యవస్థలు అనగా, కొన్ని జీవసంబంధ
విజ్ఞాన శాస్త్రాల కొరకు కొన్ని గ్రిడ్
రిసోర్సస్ (resources), కొన్ని ఆర్ట్స్ (arts)విజ్ఞాన
శాస్త్రాలు ,కొన్ని జన్యు పరిశోధనలకు
సంబంధించినవి.
కంప్యూటింగ్ మాత్రమే కాకుండా వాటికి కావలసిన
కొన్ని ప్రాథమిక ప్రక్రియలు కూడా
ఉంటాయి.
కాబట్టి, ఇంకొక భావనలో మనం మన దగ్గర రిసోర్సస్
(resources) ని కొనుగోలు చేసి ఇంస్టాల్ (install),
నిర్వహించకుండా రిసోర్సస్ (resources) ని
కావాలనుకుంటాము.
అంతర్లీన విభాగాలు ఒకదానితో ఒకటి పరస్పరమ్
సహకరిస్తూ , వినియోగదారుకు సులువైన పద్దతిలో
బదిలీ చేయబడాలి.
అంటే,మనకు ఒక వినియోగదారుడిగా ఇంటర్ఫేస్ (interface) కలిగి
ఉండి, మిగిలిన రిసోర్సస్ (resources) గురించి గాని
మరి ఏ ఇతర అంశాల గురించి పట్టించుకోవలసిన
అవసరం లేదు. మనం ఎంత ఉపయోగిస్తామో అంతా
ఖరీదు వాళ్ళు తీస్కోవచ్చు కానీ వాళ్ళు రిసోర్సస్
(resources) ను, నెట్వర్క్ (network) ని, సర్వీసెస్
(services) ని ఎలా నిర్వహిస్తారో తెలుసుకోవలసిన అవసరం
లేదు.
గ్రిడ్ కంప్యూటింగ్ అవసరం ఎక్కువగా ఉందని
అర్థం అయ్యింది.
ముఖ్యంగా శాస్త్రీయ పరిశోధన శాఖ అనేది
ఒక పెద్ద వినియోగదారులని చెప్పవచ్చు, అందులో,
ప్రత్యేకంగా డేటా అనాలిసిస్ (data analysis),
డేటా ఎనలిటిక్స్ (data analytics), విజువలైజేషన్(visualization),శాస్త్రీయ
శాఖల మధ్య పరస్పర సహకారం, ఈ రోజుల్లో
ఖండాంతరాలలో ప్రజలు అంతా పరస్పర సహకారంతో
కలిసి పనిచేస్తున్నారు.
కంప్యూటర్ సిములేషన్ (computer simulation) మరియు మోడలింగ్(modeling)
మరొక ఉపయోగం; శాస్త్రీయ మరియు ఇంజనీరింగ్
సమస్యలు మరింత సంక్లిష్టంగా మారాయి దీనికి మరింత
ఖచ్చితమైన పరిష్కారం అవసరం.
డేటా విజువలైజేషన్(data visualization) అనేది ఒక ముఖ్యమైన
అంశంగా మారుతోంది.
వినియోగింపబడని రిసోర్సస్ (resources)ని
వినియోగకరంగా చేయడం అనేది ఒక ప్రేరణాత్మక
విషయం.
మన దగ్గర చాలా వినియోగించని రిసోర్సస్ (resources) ఉన్నాయి.
వాటిని ఉపయోగించేవిధంగా చేద్దాం.
ఈ విధంగా మనం క్లౌడ్ కంప్యూటింగ్(cloud computing)
వైపు మరొక అడుగు ముందుకు వేస్తున్నాం.
గ్రిడ్ ని ఎవరు ఉపయోగిస్తున్నారు?
అంటే చివరకు, అక్కడ ఫిజిక్స్ అప్లికేషన్
(physics applications)లు వాతావరణ అప్లికేషన్(applications)
లు, మెటీరియల్ సైన్స్ రియాక్టర్ అప్లికేషన్(material
science reactor applications)లు మొదలైన వాటికి గ్రిడ్ (grid)
అవసరం చాలా ఉంది.
విభిన్న రకాలైన గ్రిడ్లు(grids) ఉన్నాయి.
వాటిలో కంప్యుటేషనల్ గ్రిడ్(computational grid) ఒకటి,
దీనిని ఎక్కువగా కంప్యూటింగ్ (computing)
కొరకు ఉపయోగిస్తారు.
రెండవది డేటా(data) నిల్వ కొరకు ఉపయోగించే
డేటా గ్రిడ్(data grid) కావచ్చు.
మరొకటి కొలబోరేషన్ గ్రిడ్ (collaboration grid), ఇది
సిస్టమ్స్ (systems) మధ్య మంచి సహకారాన్ని
అందించడంలో సహాయపడుతుంది; నెట్వర్క్ గ్రిడ్ల
వంటి ఇతర గ్రిడ్లు కూడా అందుబాటులో
ఉన్నాయి.
అధిక పర్ఫార్మన్స్ (performance), ఫాల్ట్ టాలరెన్స్
(fault tolerance) కలిగిన కమ్యూనికేషన్ సేవలను అందిస్తుంది,
మరొక ముఖ్యమైన గ్రిడ్ యుటిలిటీ గ్రిడ్
(utility grid) ఉంటుంది, ఇది ఒక వినియోగకరమైన
గ్రిడ్(grid), దీనిలో డేటా(data) మరియు కంప్యూటింగ్
సైకల్ (computing cycles) ని పంచడంతో పాటుగా,
సాఫ్ట్వేర్(software) మరియు ఏ రిసోర్సస్ (resources)
నైనా పంచుతుంది.
కాబట్టి, దీనిని యుటిలిటీ గ్రిడ్(utility
computing) అని అంటాము.
దీనిలో, వివిధ రకాల విభాగాలు ఉంటాయి.వీటన్నింటికి
గ్రిడ్(grid) ఒక కేంద్రం గా పనిచేస్త్తింది;
ఇది ప్రొవైడర్ (provider) గా ఉంటుంది.
ఆ విభాగాలలో కొన్ని ఈ గ్రిడ్(grid) ని ఉపయోగించే
యూసర్ (user) కి సంభందించినవి.
మరికొన్ని గ్రూప్(group) కార్యకలాపాలను కలిగి
ఉన్న గ్రూపులు,చివరిగా వేర్వేరు సైట్ (sites)
లు రిసోర్సస్(resources) లభ్యత స్థానాలను
చూపించే వైవిధ్యమైన ప్రదేశాలు మొదలైనవి
ఉన్నాయి.
ఇవే కాకుండా ; విధాన నిర్వహణకు సంబంధించిన
సమస్యలు మరియు వేటిని పంచాలి వేటిని పంచకూడదు
అనే ఇతర విషయాలు వీటిలో ముఖ్యమైనవి.
కంప్యూటింగ్(computing) విషయంలో మరొక ప్రాముఖ్యం
పొందిన ముఖ్యమైన అంశం క్లస్టర్ కంప్యూటింగ్(cluster
computing).
ఒక క్లస్టర్(cluster) అంటే ఏమిటి?
క్లస్టర్ అనేది ఒక విధమైన ప్యారలల్
(parallel) లేదా డిస్ట్రిబ్యూటెడ్ కంప్యూటింగ్(distributed
computing) వ్యవస్థ, ఇది ఒక స్వతహాగా ఒకే
లక్ష్యంతో పనిచేసే కంప్యూటర్లు(computers)
సమితి.
వీటిలో PC వర్క్ స్టేషన్ (work stations) లు లేదా SMPs ఆపరేటింగ్
సిస్టమ్(operating systems), అధిక పెర్ఫార్మెన్స్(performance)
ఇంటర్కనెక్టన్స్(interconnections), మిడిల్వేర్ పారలల్
ప్రోగ్రామింగ్(middleware parallel programming) వ్యవస్థ
మరియు అప్లికేషన్లు (applications)లు ఉంటాయి.
ఇవి క్లస్టర్ కంప్యూటింగ్ యొక్క విభిన్న భాగాలు.
ఒక కంప్యూటర్ యొక్క స్పీడ్ (speed) మరియు
రెలియబిలిటీ (reliability) కంటే అధిక స్పీడ్
(speed)ని మరియు రేయలియబిలిటీ (reliability) ని క్లస్టర్
(cluster) అందిస్తుంది.
ఈ విలక్షణ క్లస్టర్లు(clusters) ఒక సాధారణ LAN కంటే
నెట్వర్క్(network) యొక్క లక్షణాలను వేగంగాను
మరియు దగ్గరగాను మరియు ఎస్.ఎం.పి(SMP)ల
కంటే తక్కువగా కమ్యూనికేషన్ (communication) ప్రోటోకాల్
(protocol) యొక్క లాటన్సి (latency) ని కలిగి, తక్కువ
లూజ్లీ కపుల్డ్ (loosely coupled) గా ఉంటాయి.
వివిధ రకాలైన క్లస్టర్ల నోడ్ (cluster nodes) లు ఉన్నాయి.
వీటిలో మొదటిది హై అవైలబిల్టీ (high availability)
లేదా ఫైలోవర్ క్లస్టర్ (clusters), దీనిలో ఏడైన
వైఫల్యం చెందిన నోడ్ (node) ఉంటే దాని పని
చెయ్యడానికి రిసోర్సస్ (resources) ఎక్కువ మొత్తంలో
అందుబాటులో ఉంటాయి.
రెండవది , లోడ్ బాలన్సింగ్ క్లస్టర్ (load balancing cluster),
ఇక్కడ క్లస్టర్(cluster) పనిని సరి సమానంగా
అన్నీ నోడ్స్(nodes) కి పంచుతుంది.
చివరిది , పారలల్/డిస్ట్రిబ్యూటెడ్ ప్రొసెసింగ్ క్లస్టర్
(Parallel/Distributed Processing Cluster), దీనిని పారలల్ (Parallel)
మరియు డిస్ట్రిబ్యూటెడ్ (distributed) ప్రొసెసింగ్
(processing) కొరకు ఉపయోగిస్తారు.
మనం ఒక సాధారణ క్లస్టర్(cluster) ని గమనించినట్లైయతే
. దానిలో అనేక రకాల క్లస్టర్ నోడ్(cluster
nodes) లు, వాటిని అనుసంధానించే నెట్వర్క్(network) మరియు
దాని విభిన్న నెట్వర్కు(network) వర్గీకరణ, వీటిని
ఉపయోగించడానికి వివిధ రకాల పద్దతులున్నాయి.
దీనిలో అనేక కార్యాచరణ ప్రయోజనాలు ఉన్నాయి;
వీటిలో సిస్టమ్ అవైలబిలిటీ (system availability), ఫాల్ట్
టాలరెన్స్(fault tolerance), మరియు స్కేలబిలిటీ(scalability)
అంశాలు ఉన్నాయి.
ఓ.ఎస్ (OS) మరియు క్లస్టర్ (cluster) నుంచి మనం ఆశిస్తున్న
అప్లికేషన్ రిలియబిలిటీ (application reliability) మరియు
అధిక పనితీరు ఉన్నాయి.
సాధారణంగా క్లస్టర్(cluster) అధిక పనితీరును అందిస్తుంది.
మనం డిస్ట్రిబ్యూటెడ్ కంప్యూటింగ్ (distributed
computing)తో మొదలుపెట్టి గిడ్ (grid), క్లస్టర్
(cluster) మొదలైనవన్నీ నేర్చుకుంటున్నాం.
ఇవన్నీ కూడా యుటిలిటీ కంప్యూటింగ్(utility
computing) కు ప్రేరణ.
యుటిలిటీ కంప్యూటింగ్(utility computing) లేదా యుటిలిటీ(utility)
అంటే ఏమిటి?
యుటిలిటీ అనగా మన దగ్గర కొన్ని రిసోర్సస్
(resources) ఉంటాయి వీటితో పాటు మరికొన్ని అవసరమవుతాయి,
మరియు మనకు అవసరమైనప్పుడు మనం వాటిని పొందగలుగుతాము.
ఇది మనం మార్కెట్ (market) కి వెళ్ళి వస్తువులను
కొనుగోలు చేయడం ,లేకపోతే రైల్వే టికెట్ (railway
ticket) ని ,విమానయాన టికెట్ (ticket) ని బుక్ (book) చేయడం
లాంటిదే.
వీటన్నింటికి మనకు ఒక ఇంటర్ఫేస్ (interface)
అనగా ఒక మధ్యవర్తి అవసరం వుంటుంది.
కనుక, ఇక్కడ మనం ఏచేస్తాం అంటే?
ఏ పనిని అయితే చేయించుకోవాలనుకుంటున్నామో ఆ పని ఎలా చేశారో
పట్టించుకోనవసరం లేదు, ఉధాహరణకి మన
ఇంటిలో ప్లంబింగ్(plumbing) చేయించాలనుకోండి,
యుటిలిటీ (utility) కార్యాలయానికి కాల్ చేసి ఈ విషయం
చెప్తాము.
ఇక్కడ మనతో మాట్లాడే వ్యక్తి గురించి
కూడా మనం పట్టించుకోనక్కర్లేదు లేదా మాట్లాడుతున్న
వ్యక్తికి ప్లంబింగ్(plumbing) గురించి తెలియక పోయిన
అతను లేదా ఆమె ఆ పని గురించి తెలిసిన
వాళ్ళకి కాల్(call) ని కలుపుతారు.
కానీ ఒక వినియోగదారునిగా మనకు అక్కడ ప్రయోజనం
జరిగిందా లేదా అనేది కావాలి.
కాబట్టి, మనకు రిసోర్సస్ (resources) ఆవరమైనప్పుడు
అవి ఉన్నాయా లేవా అనేది మాత్రమే చూసుకోవాలి.
అలాగే మనం ఈ డిస్ట్రిబ్యూటెడ్ కంప్యూటింగ్ (distributed
computing), క్లస్టర్ మరియు ఇతర రకాలైన కంప్యూటింగ్
వ్యవస్థను చూస్తే, వారు కూడా వినియోగదారు
అవసరాన్ని బట్టి కొన్ని ప్రయోజనాలను
అందించడానికి ప్రయత్నిస్తారు.
వినియోగదారునికి వంరుల నిర్వహణ భాధ్యత
తగ్గుతుంది.
కాబట్టి, మనము నేర్చుకోబోయే క్లౌడ్ కంప్యూటింగ్(cloud
computing) అమలు చేసేదే ఈ యుటిలిటీ కంప్యూటింగ్
(utility computing).
ఇది ఒక , సర్విస్ ప్రొవిజనింగ్ మోడల్ (service provisioning model),
ఇందులో సర్విస్ ప్రొవైడర్ (service provider) ,వినియోగదారునికి
కావలసిన కంప్యూటింగ్ రిసోర్సస్ (computing resources)
ని , ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) ని అందుబాటులో
ఉంచి వాటికి ఒకే రకమైన ఖరీదు కాకుండా
వినియోగించిన దానిని బట్టి ఖరీదు కడతారు.
కనుక, ఇక్కడ యుటిలిటీ (utility) అనే పదం ఎలెక్ట్రికల్
పవర్ (electrical power) లాంటి సర్వీసెస్ (services) కి
దగ్గర పోలిక.
దీనిని బట్టి చూస్తే ఇది నిలకడ లేని వినియోగదారుని
అవసరాలకు అనుగుణంగా, ఫ్లాట్ రేట్ల(flat rate)
ఆధారంగా కాకుండా వనరుల వినియోగం ఆధారంగా
ఖరీదు వసూలు చేస్తారు మరియు కొన్నిసార్లు
ఈ నమూనాను మనం ఎంత వినియోగిస్తే అంతా
చెల్లించడం అంటాం లేదా పే అస్ యు గో
మాడెల్ (pay as you go model) అంటాం.
మనం విద్యుత్ సేవలను చూస్తే.
ఒక మీటర్ ఉంటుంది.
మనం ఏదైనా విద్యుత్ ఉపకరణాలను అంటే ఎలక్ట్రికల్
లైట్(electrical light) లేదా మైక్రోవేవ్ ఓవెన్(microwave
oven) లేదా ఎయిర్ కండీషనింగ్(air conditioning) అయి ఉండవచ్చు
లేదా కంప్యూటర్(computer) అయి ఉండవచ్చు, మనం
వినియోగించే వనరులు ఏమైనప్పటికీ, వినియోగాన్ని
బట్టి ఎలెక్ట్రిక్ అథారిటీకి (electrical authority)
లేదా ఎలెక్ట్రిక్ పవర్ అథారిటీ(electrical
power authority) నిర్ణయించిన ఖరీదు చెల్లిస్తాము.
ఇక్కడ , మనకు ఈ పవర్ (power) ఎలా ఉత్పత్తి
అవుతుందో పట్టించుకోవలసిన అవసరం లేదు. ఇవి మన
ఇంటికి ఎలా వస్తున్నాయో కూడా తెలియదు . మనము
ఉపయోగించే సేవను సరిగ్గా ఉపయోగించుకోవడంలో
మనం శ్రద్ధ వహించేది ఏమిటంటే అది మీటర్(meter)
. మరో ప్రసిద్ధ ఉపయోగం
టెలికాం(telecom) సేవలు ముఖ్యంగా మొబైల్(mobile)
సేవలు.
దీనిని ఒక యుటిలిటీ (utility) గా ఉపయోగిస్తాము,
టెలిఫోన్(telephone) లేదా మొబైల్ సర్వీసు ప్రొవైడర్(mobile
service provider) నుండి కనెక్షన్ని(connection) తీసుకుని ఉపయోగిస్తాము
తెర్వత ఎంత ఉపయోగిస్తామో అంత చెల్లింపు మోడల్(model)
యొక్క నమూనా ఆధారంగా చెల్లిస్తాము, అది
పోస్ట్ పైడ్ (post paid) లేదా ప్రీపెయిడ్(pre
paid) కావచ్చు, సర్విస్ ప్రొవైడర్(service provider)
ఎవరన్నది మనం పట్టించుకొనవసరం లేదు.
ఇక్కడ మనకు కావలసిన సౌకర్యాలు , కాల్(call)
సౌకర్యం ,సందేశాలను పంపడం మరియు డేటా(data)
సేవలకు సంబంధించిన డేటా వీడియొ సర్వీసెస్
(video services) లాంటివి , ఇవ్వన్ని ఉంటే మనం ఖరీదు చెల్లించడానికి
సిద్ధంగా ఉంటాం.
కాబట్టి, మన అవసరాలను బట్టి సేవను ఎంపిక
చేసుకుంటాం, ఇది కూడా ఒక యుటిలిటీ
సర్విస్ (utility service).
ఇది కూడా ఒక మీటర్ మాడెల్ (meter model) మరియు
పే అస్ యిఊ గో మాడెల్ (pay as you go model).
కాబట్టి, ఈ నమూనా హఠాత్తుగా ఖచ్చితంగా
ఒక రోజు యుటిలిటీ కంప్యూటింగ్(utility
computing) గా రూపాంతరం చెందుతుంది.
కాబట్టి, ఇది అన్ని డిస్త్రిబుటెడ్
కంప్యూటింగ్ (distributed computing) నుండి గ్రిడ్(grid),
క్లస్టర్ (cluster) క్లౌడ్(cloud) కంప్యూటింగ్(computing)
వరకు ఉద్భవించింది.
కాబట్టి, ఇది ఒక మంచి చిత్ర రూపం మరియు
పోలిక, ఇందులో వివిఢ రకాల ఐ‌టి (IT) రిసోర్సస్
(resources) ఉన్నాయి.
పై చిత్రం లో చూపినవిదంగా మనకు రిసోర్సస్ (resource)
అవసరం ఉన్నప్పుడు టాప్ (tap) ని తెరిచి
ఉంచుతాము.
అవసరం లేనప్పుడు ఈ టాప్(tap) ని మూసి
ఉంచుతాము.
యుటిలిటీ కంప్యూటింగ్(utility computing) అనేది కూడా వర్చువలైజేషన్(virtualization)
రూపంగా చూసినట్లైతే, ఒక కంప్యూటర్ (computer)
సామర్ధ్యం కంటే అధిక మొత్తం లో స్టోరేజ్
(storage) మరియు కంప్యూటింగ్ (computing) సామర్ధ్యం అందుబాటులో
ఉంటుంది.
కాబట్టి, మనము అపారమైన రిసోర్సస్ (resources) మన
అవసరన్ఈ తగినట్టుగా ఉన్నాయి అనుకుంటే
వాటిలో అపరిమితమైన కంప్యూటింగ్ (computing),
నెట్వర్కింగ్ (networking) మరియు అప్ప్లికేషన్స్
(applications) మొదలైనవి.
మనం దీనిని విధ్యుత్ సరఫరా తో పోల్చి
చూస్తే , పవర్ (power) ని ఉపయోగించేటపుడు
, కొంత వ్యవధి అంటే ఎక్కువ కిలో వాట్స్
(kilo watts) లేదా మెగా వాట్స్ (megawatts) ఉపయోగించకూడదు
అనే పరిమితి ఉంటుంది.
లేకపోతే వాస్తవంగా మనం అపరిమితమైన రిసోర్సస్
(resources) ఉన్నట్లుగా భావిచ్చి వాటిని
ఎంచుకుంటాము.
ఎంచుకున్న రిసోర్సస్ (resources) కి వాటి వాడుకను
బట్టి ఖరీదు చెల్లిస్తాము.
అదేవిధంగా, కంప్యూటింగ్(computing) లేదా టెలికాం(telecom)
లేదా మొబైల్(mobile) సేవలకు కూడా, మనం ఒక నిర్దిష్ట
ఫైల్ (file) ను డౌన్లోడ్(download) చేస్తున్నప్పుడు
, మనకు అవసరమైన బ్యాండ్విడ్త్(bandwidth) అందుబాటులో ఉందని
అనుకుంటాము.
ఇది 10 KB లేదా 100 KB ఫైల్(file) కావచ్చు లేదా అది
100 MB ఫైల్ (file) గా ఉండవచ్చు, రిసోర్సస్ (resources) అన్నీ
ఉన్నాయి మనము ఖరీదు చెల్లించాల్సిన
అవసరం ఉంది, కానీ మనం దాన్ని ఉపయోగించుకోగలగాలి.
యుటిలిటీ కంప్యూటింగ్(utility computing) లో మనము చూడాలనుకుంటున్నది
ఏమిటంటే, కంప్యూటింగ్ అనేది ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) కంప్యూటింగ్(computing) రిసోర్స్ (resource) నుండి
మొదలుపెట్టిన హార్డ్వేర్(hardware) లేదా ఎక్కడైతే మనం
కంపైల్ (compile) చేస్తామో ఆ ప్లాట్ఫారమ్(platform)
సర్వీసెస్ (services) కావచ్చు, లేదా కొన్ని ప్రత్యేకమైన
డేటా నిల్వ సామర్ధ్యంకు సంభంసించునవై కావచ్చు
లేదా మ్యాథమేటికల్ సిములేషన్ టూల్ (mathematical
simulation tool) కావచ్చు.
వీటన్నింటినీ మనం ఎంత వరకు వినియోగిస్తే
అంతా ఖరీదు చెల్లిస్తాము.
కాబట్టి, ఇది ఒక భారీ అపారమైన రిసోర్సస్
స్టోరేజ్ (resources storage).
ఇది పవర్ గ్రిడ్ (power grid) లో ఉపయోగించే
ధర నిర్ణయ నమూనాను ఉపయోగించడం జరుగుతుంది.
ఇది ఒక ముఖ్యమైన అంశం. డేటా సెంటర్
వర్చువలైజేషన్(data center virtualization) లేదా ప్రొవిజనింగ్(provisioning)
అనేది మరొక ప్రధాన అంశం. అనగా, మన దగ్గరి
నుంచి కూడా రిసోర్స్(resource) ను వర్చువలైజ్(virtualize)
చెయ్యొచ్చ . మనం ఒక సిస్టమ్ (system) ని ,అంటే
అందులో 8 GB ప్రాసెసర్, 16 GB లేదా 128 GB RAM మరియు
అధిక సామర్ధ్యం కలిగిన హార్డ్ డిస్క్ (hard
disk) అనుకరించాలని అనుకున్నాము.
మరియు ఒక ప్రత్యేక సైంటిఫిక్ (scientific) సిములేషన్
(simulation)ను అమలు చేయాలనుకుంటున్నాము.
కనుక మొత్తం రిసోర్స్ (resource) పరిమాణం నుండి
ఒక రిసోర్స్ (resource) ని విర్చువలైజ్ (virtualize)
చెయ్యాలనుకుంటున్నాం.
ఆ రిసోర్సస్ (resources) సమూహం లోనే మరొక
వినియోగ దారుడు వేరొక రిసోర్స్ (resource) ని
వర్చ్యులైజ్ (virtualize)చేయవచ్చు.
కాబట్టి, ఇదంతా కూడా డేటా సెంటర్ వర్చువలైజేషన్
(data center virtualization)మరియు ప్రొవిజనింగ్(provisioning)
కలిగి ఉండి, రిసోర్స్ (resource) వినియోగ సమస్యను
ఛేదిస్తుంది, మన వద్ద చాలా రిసోర్సస్
(resources) ఉంటే మనం వాటిని సరఫరా చెయ్యొచ్చు.
ఎలాగంటే వాటిని మనం ఔట్ సోర్స్ (outsource) చేయ్యొచ్చు
మరియు సాఫ్ట్వేర్ మైంటెనెన్స్ (software
maintenance) ని కొందరికి లేదా డేటా స్టోరేజ్
(data storage)ని మరికొందరికి ఔట్ సోర్స్ (outsource) చెయ్యొచ్చు.
కాబట్టి, మనం వెబ్ సర్వీసెస్(web services)
ని అవుట్సోర్సింగ్(outsourcing) చేయవచ్చు,
గతంలో మాదిరిగా కాకుండా, ప్రాథమికంగా మనం
డేటా డ్రివెన్ ఆర్కిటెక్చర్ (data driven architecture) నుండి
సర్విస్ డ్రివెన్ ఆర్కిటెక్చర్(service
driven architecture) కి మారాము.
మనం డేటా(data) కంటే సర్వీసెస్(services) కి
ఎక్కువ ప్రాముఖ్యత ఇస్తాం.
కాబట్టి, ఇక్కడ వినియోగం కి మరియు ఆటోమేషన్(automation)
కి అపారమైన పరిధి ఉంటుంది.
మన దగ్గర వివిధ రకాల రిసోర్సస్ (resources) కలిగి
ఉంటే అప్పుడు మొత్తం రిసోర్సస్ (resources) ను
ఆటోమేట్ చేయడానికి అనుమతించే వర్క్
ఫ్లో(work flow) ని నిర్మించగలము.
ఈ యుటిలిటీ కంప్యూటింగ్(utility computing) యొక్క మరొక అంశం
ఉంది.
ఒక ఉదాహరణ ఆన్ - డిమాండ్ సైబర్ ఇన్ఫ్రాస్ట్రక్చర్
(on-demand cyber infrastructure); అంటే మనము ఉద్యోగ నియమకానికి
లేదా విద్యార్థులకు పరీక్షలను నిర్వహించడం
కొరకు, ప్రత్యేక ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) వేర్వేరు విభాగాలలో కలిగి
ఉండాలనుకుంటున్నాము లేదా ఇంట్లో అయి
వుండవచ్చు.
అప్పుడు మనకు exam రాయుటకు అనుకూలిన్చే విధంగా
,విర్చువల్ రిసోర్సస్ (virtual resources) ఉండేవిధంగా
ఒక సైబర్ ఇన్ఫ్రాస్ట్రక్చర్ (cyber infrastructure) అవసరం.
మనము ఈ రకమైన సైబర్ ఇన్ఫ్రాస్ట్రక్చర్ను(infrastructure)
ని కలిగి ఉంటాము, కొన్ని సందర్భాల్లో
, సాధారణ కార్యక్రమ నిర్వహణకు, కాన్ఫరెన్స్(conference)
లాంటి వాటికి మనము ఒక సాధారణ సైబర్
ఇన్ఫ్రాస్ట్రక్చర్ (cyber infrastructure) ని కలిగి
ఉండాలనుకుంటాము, నిజ జీవితంలో జరిగే
వైపరీత్యాల నిర్వహణ కోసం ఒక ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) కలిగి ఉంటాము, ఇక్కడ రిసోర్సస్
(resources) అవసరము ఒకదానికొకటి వేర్వేరుగా ఉండవచ్చు,
ఇలాంటి రిసోర్సస్ (resources) ని పెట్టుకోవలసిన
అవసరం లేదు. కానీ ఐఐటీ ఖరగ్పూర్లో(IIT
, Kharagpur) మేము కాన్ఫరెన్స్స (conferences) నిర్వహిస్తాము,
అవి ఒక నెలకు ఒకటి లేదా రెండు జరుగుతాయి
వాటిలో కొన్ని వర్క్ షాప్ (workshop) లు, మొదలైనవి,
వీటికోసం ప్రత్యేకించి ఇన్ఫ్రాస్ట్రక్చర్(infrastructure)
అవసరం లేదు. మనం మన అవసరాలకు తగిన విధంగా
ఒక ఇన్ఫ్రాస్ట్రక్చర్(infrastructure) ని ఏర్పరుచుకుని
దానికి ఖరీదు చెల్లించవచ్చు.
అలాంటి వాటిలో ఒకటి డిమాండ్ సైబర్ ఇన్ఫ్రాస్ట్రక్చర్
(demand cyber infrastructure).
ఇక్కడ మరొక అంశం ఏమిటంటే ఇక్కడ ప్రొవైడర్
(provider) లేదా సర్వీసు ప్రొవైడర్(service provider)
మరియు వినియోగదారుడు ఉంటారు, ఆ రెండింటికి
వేర్వేరు అవసరములు ఉన్నాయి మరియు మనకు
విభిన్న నమూనాలు ఉన్నాయి మరియు నిర్వాహక
సమస్యలు ఆ రెంటినీ కలిపి ఉంచుతున్నాయి.
అందులో ఒకటి ప్రైసింగ్ (pricing), ఏ ధర అయితే మనం
చెల్లిస్తామో , సారూప్యతను తీసుకుంటే, మనం ఏ
సర్విస్ ప్రొవైడర్ అయితే అనుకూలమైన
ధరకి సర్వీసెస్(services)ని అందిస్తాడో మరియు
అధిక డాటా సర్వీసెస్(data services) ని అందిస్తాడో
, ఆ ప్రొవైడర్(provider) ని ఎంచుకుంటాము.
ఇందులో మెరుగైన రేటు లేదా మెరుగైన పనితీరును
అందించే మొబైల్ సర్వీస్ ప్రొవైడర్ను(mobile service
provider) ని ఎంపిక చేయాలనుకుంటాం.
ఈ డేటా సర్వీసెస్ (services) పై ఎవరైనా పర్ఫార్మన్స్
(performance) గురించి పట్టించుకోనక్కరలేదు, కొంతమంది మెస్సజింగ్
(messaging) మరియు కాలింగ్ (calling) సర్వీసెస్ (services)
ని కావాలనుకుంటారు.
అది వారి సొంత విషయం .
కనుక ఇది ప్రైసింగ్ మాడెల్ (pricing model), తర్వాత
ఇక్కడ సర్విస్ లెవెల్ అగ్రీమెంట్స్ (service
level agreements) ఉంటాయి . అంటే ఇది ఒక సేవా స్థాయి
ఒప్పందం , అందులో డేటా(data)ను ఉపయోగించడానికి
మరియు స్టోర్ (store) చేయాలని అనుకుంటే
రిసోర్స్ (resource) లభ్యతకు సంభందించినవి మరియు
భద్రతా అంశాలకు సంభందించినవి మదలైనవి ఉంటాయి.
ఇక్కడ ఎవరైనా మన డేటా (data)ఉపయోగించి
లేదా చూడటం జరగకూడదు.
అందువల్ల, అక్కడ భద్రతా అంశాలు మరియు
అందులో ఓకటైన డానియల్ ఆఫ్ సర్విస్ (Daniel of
service) వంటివి ఉండకూడదు, భద్రత అంశాలలో యాక్సెస్
మెకానిజమ్స్(access mechanisms) మొదలైనవి ఉంటాయి.
చివరిగా అప్లికేషన్ సైజింగ్ (application sizing)
అవసరం అవుతుంది; కొన్ని అప్లికేషన్
(applications) కి టెరా బైట్ల(terabytes) డేటా(data) ఉంటుంది,
అలాంటి అప్లికేషన్లను (applications) మెగా బైట్స్(megabytes)
డాటా(data) డేటాతో విశ్లేషించలనుకుంటున్నాను.
కాబట్టి, మనకు పెద్దదైన అప్లికేషన్ అవసరం
లేదు, కానీ మన అవసరాన్ని బట్టి, ఈ అప్లికేషన్
ని సైజింగ్(application sizing) చేయాల్సిన అవసరం
వుంది.
వివిధ రకాల పేమెంట్ మోడెల్స్ (payment models)
ఉన్నాయి.
వాటిలో, ఫ్లాట్ రేట్(flat rate), టైర్డ్(tiered) మొదలైనవి.
స్కేలు (scale) ని, కమ్మిట్మెంట్(commitment) ని మరియు పేమెంట్
ఫ్రీక్వెన్సీ(payment frequency) అద్గారంగ వివిధ
వినియోగదారుల కొరకు విభిన్న ప్రైసింగ్
మోడెల్స్ (pricing models) ఉన్నాయి.
యుటిలిటీ కంప్యూటింగ్(utility computing) యొక్క లక్షణం
అదే విధంగానే ఉంటుంది, ధరల యొక్క మోడల్
కేవలం ధర యొక్క ప్రొవైడర్ల (providers)వ్యక్తీకరణ;
దీని అర్థం, రిసోర్సెస్ (resources) ఎంతవరకు కేటాయించాలో
అనేది ప్రొవైడర్ (provider) నిర్ణయిస్తారు.
ఇందులో రిస్క్స్ (risks) కూడా చాలా ఉన్నాయి;
ఈ యుటిలిటీ కంప్యూటింగ్(utility computing) లో ఉన్న లోపాలలో
మొదటిది డేటా బ్యాకప్(data backup).మన డేటా(data) ఎక్కడో
ఒకచోట ఉంటుంది, ఏమైనా క్రాష్ (crash) ప్రమాదం
జరిగినప్పుడు, డేటాను మూడవ పక్షంలో స్టోర్
(store) చేస్తారు మరియు ఆ మూడవ పక్షంలోని
సర్వీసు ప్రొవైడర్(service provider) కూడా వ్యాపారం
నుండి బయటికి వెళ్లి పోతే ఏమి జరుగుతుంది.
ఇలాంటప్పుడు డేటా(data) భద్రత అవసరం అవుతుంది.
మన డాటా(data) ను ఎవరైనా చదివినప్పుడు లేదా
సంస్థల మధ్య పోటీతత్వం ఉన్నప్పుడూ ఈ భధ్రత
అవసరం అవుతుంది.
SLA ను నిర్వచించడం మరొక పెద్ద సమస్య.
ప్రతిఒక్కరూ వారికి నచ్చిన విధంగా అగ్రీమెంట్
(agreements) ను నిర్వచించాలని అనుకుంటున్నారు
మరియు వేర్వేరు ప్రొవైడర్ (provider) మరియు వినియోగదారుల
మధ్య ఈ అగ్రీమెంట్స్ (agreements) తయారు చెయ్యడానికి
ఒక ప్రామాణిక విధానం ఇప్పటికీ లేదు, అగ్రీమెంట్స్
(agreements) విఫలం అయితే మనము చెల్లించిన
రుసుము ను ఎలా తిరిగి పొందడం అనేది కూడా
సరిగా లేదు. ఇవన్నీ న్ని క్లౌడ్ కంప్యూటింగ్(cloud
computing) పరిణమించడానికి కారకాలు.
కాబట్టి క్లౌడ్ కంప్యూటింగ్ అనేది, NIST నిర్వచనం
"సర్వ వ్యాప్త , అనుకూలమైన , మనం అమర్చుకోగలిగే
30:56
కంప్యూటింగ్ రిసోర్సస్(computing resources) సమితిని(ఉదాహరణకి,
30:57
నెట్వర్క్(networks),సెర్వెర్స్ (servers),స్టోరేజ్ (storage),అప్లికేషన్
30:58
(applications) మరియు సర్వీసెస్ (services)) అవసరానికి మేర
30:59
త్వరిత గతిన అతి తక్కువ నిర్వహణ బాధ్యత
31:00
తో సేవలను అందించేది."
ఇది అన్నింటి గురించి చెబుతుంది.
దీనిని మనం అనుసరించే లేదా గౌరవించటానికి
ప్రయత్నిస్తాము.
ఈ నిర్వచనం ఏం చెప్తుందంటే , భారీ రిసోర్సస్
(resources) సమితిని సులభతరంగా తక్కువ నిర్వహణతో
ఉపయోగించడం మరియు విడుదల చేయడం.
మనం ఇప్పటికీ వరకు నేర్చుకున్న కంప్యూటింగ్
పరిజ్ఞానం నుండి చూస్తే, ఇది అకస్మాత్తుగా
వచ్చింది కాదు. ఇది కొన్ని అంశాల నుండి
పరిణమించింది.
మనము ఈ కంప్యూటింగ్(computing) ప్రపంచాన్నివివిధ
కోణాలలో చూస్తున్నప్పుడు మరియు కొన్ని ప్రాథమిక
నమూనాలతో విభిన్న రకాలైన ప్రయోజనాల
కోసం కంప్యూటింగ్ను సులభతరం చేయడానికి
ప్రయత్నిస్తాము.
వీటిలో ముఖ్యంగా ప్రైసింగ్ మోడెల్స్
(pricing models), SLA మోడెల్స్ (models), సెక్యూరిటి మాడెల్
(security model) నిర్వహణ ఉంది; అనగా, మేము వేర్వేరు
విషయాలను ఉంచాలనుకుంటున్నాము మరియు కంప్యూటింగ్
ని ఒక సర్విస్ గా అందించాలనుకుంటున్నాం.
మనమిప్పుడు నేటి చర్చను సంపూర్ణం
గా ముగుస్తున్నాం.
దీని ఆధారంగా మనము ఇతర అంశాలను కొనసాగిస్తాము.
కాబట్టి, మనము ఈ విషయాలలో కొన్నింటిని పేర్కొనడానికి
కావలసిన ఫిగర్స్ (figures) , మెటీరియల్స్
(materials) మదలైన వాటిని కొన్నింటిని వివిధ
వనరుల నుంచి తీసుకున్నాము, మనము అన్ని సూచనలను
ఉంచటానికి ప్రయత్నించాము మరియు మనము ప్రత్యేకంగా
దీన్ని విద్యాపరమైన ప్రయోజనం లేదా విధానాల
కోసం ఉపయోగిస్తున్నాం అంతేకాని వ్యాపారపరంగా
వాడుతున్నది కాదు. మనము నేటి చర్చను
ముగిస్తున్నాం మరియు రాబోయే ఉపన్యాసాలలో
మనం ఇతర అంశాలను లేదా ఇతర అంశాలపై
వేర్వేరు అంశాలని పరిశీలిస్తాము, క్లౌడ్
కంప్యూటింగ్ యొక్క విభిన్న అంశాలు మరియు
వేర్వేరు లక్షణాలు ఏమిటి ప్రయోజనాలు
అప్రయోజనాలు గురించి తెలుసుకుంటాం.
ధన్యవాదాలు.
