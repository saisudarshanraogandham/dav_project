మన చర్చను కొనసాగిద్దాం.
గత చర్చలో మనం ఈ క్లయింట్ సర్వర్ గురించి ,సాంప్రదాయిక
క్లయింట్ సర్వర్ రూపాంతరము, మరియు
సేవ దృక్పధంతో క్లౌడ్(cloud) అందించే సేవల గురించి
తెలుసుకున్నాం; మనము ఆ చర్చను ఇక్కడ కొనసాగిస్తాం.
ఒక క్లయింట్ సర్వర్ మోడల్(client-server model) ఏమి
కలిగి ఉంటుందని నేర్చుకున్నాం, ఒక సర్వర్(server) మరియు
ఈ సర్వర్(server) తో అనుసంధానించబడిన అనేక క్లైంట్స్ (clients)
ఉంటాయని.
కనుక,ఈ ప్రత్యేకమైన సర్వర్(server) కు అనుసందానించబడిన
అనేక క్లయింట్(clients) లు ఉన్నాయి.
అంటే ఈ సర్వర్(server) మరియు క్లయింట్(client)
తార్కికంగా లేదా భౌతికంగా ఒకే మెషిన్(machine)
లో ఉంటాయి, అదే మెషిన్ (machine) క్లయింట్(client)
లేదా సర్వర్(server) గా ఉంటుంది, లేదంటే
మరొక మెషిన్ (machine) అయినా ఒక క్లయింట్(client)
లేదా ఒక సర్వర్(server) గా ఉంటుంది.
ఒక క్లయింట్(client) సర్వర్(server) ని మొదలైన వాటిని
యాక్సెస్(access) చేయవచ్చు.
కాబట్టి, మనకు ప్రతి సర్వర్(server) కి ఎలాంటి
క్లైంట్స్ (clients) ఉంటాయో తెలుసుకుందాం, ఇప్పుడు
ఎఫ్‌టి‌పి (ftp) క్లయింట్ సర్వర్(client server)ని కలిగి
ఉన్నట్లయితే ,మనము ftp డెమోన్(daemon) ను ఒక
ప్రత్యేక Linux ఎన్విరాన్మెంట్(environment) లో కలిగి ఉంటే అందులో
ftp క్లయింట్(client) ఉంటుంది.
కాబట్టి, ftp క్లయింట్ (client) ftp సర్వర్(server) కోసం
చూస్తుంది.
ఈ సందర్భంలో, ఒక సర్వర్(server) ని గుర్తించడానికి
ఎలా ప్రయత్నించాలంటే ప్రధానంగా సర్వర్
ప్రాసెస్ (server process) ఒక ప్రత్యేక పోర్ట్(port)
లో వేచి ఉంటుంది.
కాబట్టి, మనం ఏమి చేస్తామంటే, ftp ఉంటే
ftpd సర్వర్(server) లేదా telnetd ఉంటే telnet సర్వర్
లేదా చాలా ప్రజాదరణ పొందిన http ఉంటే, అప్పుడు
మనం httpd సర్వర్ ని కలిగి ఉండాలి.
కాబట్టి, ఈ అన్ని విషయాలు కూడా ఒక
ప్రత్యేక పోర్ట్ మార్గాలు.
దీని అర్థం ఏమిటంటే, ఈ సర్వర్(server) మెషిన్
(machine) లో, ఉదాహరణకి http డేమోన్ (daemon) సర్వర్
(server) లో ఒక ప్రత్యేక పోర్ట్ 80 లేదా తార్కిక
పోర్ట్ 80 ని, http డెమోన్ను గుర్తిస్తుంది.
ఇప్పుడు ఎక్కడ నుండి అయిన లేదా ఏ బ్రౌజర్
నుండి అయినా క్లయింట్(client) లేదా http క్లయింట్(client)
రెక్వెస్ట్ (request) ని సర్వర్ (server) కి పంపినపుడు
సర్వర్(server) వేగంగా కనెక్ట్(connect) అవుతుంది
. కాబట్టి, సర్వర్(server) ఎల్లప్పుడూ ఒక నిర్దిష్ట
పోర్ట్ (port) ద్వారా ఏ క్లయింట్(client) కి
అవసరం ఉంది అని గమనిస్తూ ఉంటుంది.
ఎప్పుడు ఏ క్లయింట్(client) సర్విస్ (service) అవసరం
అయినా, దానికి సంభందించిన పోర్ట్ తో కలిపి
ఆ అవసరాన్ని తీరుస్తుంది.
మనం ఇక్కడ రెండు రకాల సెర్వెర్స్
(servers) ని చూస్తాము.
అందులో ఒకటి కంకరెంట్ (concurrent) సర్వర్ (server),
ఇది ఏకకాలంలో సెర్విసెస్ (services) ని పూర్తి చేస్తుంది.
మరియొకటి, ఇటరేటివ్(iterative) సర్వర్ (server), ఇది ఒక
సర్విస్ (service) తర్వాత మరొక డాన్ని పూర్తి
చేస్తుంది.
కానీ మొత్తం ప్రక్రియకు ఒకే ఒక కాంపొనెంట్
(component) కీలక పాత్ర వహిస్తుంది.
ఎలాగంటే http కి , httpd సర్వర్ (server) ఒకదానితో
ఒకటి సహకరించుకోవడానికి httpd అవసరం అయినట్లుగా.
కనుక, కొంతవరకు వీటి మధ్య బంధం మరింత
బలంగా ఉంటుంది, అయితే అది మన అన్నీ ప్రయోజనాలను
పూర్తి చెయ్యగలగాలి.
కొన్ని రకాల అప్లికేషన్ (applications) లో వేటిలో అయితే
డేటా(data) మరియు అప్లికేషన్(application) ఒకదానితో మరొకటి
కమ్యూనికేట్(communicate) అవుతాయో అక్కడ మన
ప్రామాణికతకు ఇది విభిన్నంగా ఉంటుంది.
ఇప్పుడు, క్లయింట్ సర్వర్(client-server) నిర్మాణం
చూద్దాం . ఇది ఒకటి లేదా ఎక్కువ లోడ్
బాలెన్సింగ్ సర్వర్(load balanced servers) లను కలిగి
ఉండి. క్లయింట్(clients) పంపే రిక్వెస్ట్
(request) లను పరిష్కరిస్తాయి.
క్లైంట్స్ (clients) మరియు సర్వర్లు(servers) రిక్వెస్ట్(request)-
రెస్పోంస్ (response) పద్దతిలో మెసేజస్ (messages) ని మార్పిడి
చేసుకుంటాయి.
క్లయింట్ అనేది సాధారణంగా తక్కువ కొంపుటేషనల్(computational)
సామర్ధ్యంతో ఒక తిన్ క్లయింట్(thin client) లేదా
యంత్రం కావచ్చు.
సర్వర్ (server) ఒక లోడ్ బాలన్స్డ్ క్లస్టర్(load
balanced cluster) లేదా ఒక స్వతంత్ర యంత్రం.
ఉదాహరణకి , http సర్వర్ ని తీసుకున్నట్లైతే
, అది ఒక బలమైన సామర్ధ్యము గల సిస్టమ్(system) . అదే
మనము ఒక క్లయింట్(client) ను మన మొబైల్ నుంచి
కానీ లేక ల్యాప్టాప్ (laptop) నుంచి కానీ చూసినట్లైతే
వాటికి సమర్ద్యం తక్కువ మరియు అవి
సర్వర్ను(server) ఉపయోగించడం చాలా బలంగా మరియు
మెరుగైన వ్యవస్థలతో ఉంటుంది.
. కాబట్టి, అది ప్రాథమికంగా మూడు రకాలైన నిర్మాణాన్ని
అనుకరించడానికి ప్రయత్నిస్తుంది,
ఒకటి ఎగువ స్థాయిలో ప్రెజెంటేషన్ లేయర్(presentation
layer), తర్వాత లాజికల్ (logical) లేయర్ (layer) మరియు
దిగువ స్థాయిలో డేటా లేయర్(data layer).
కాబట్టి, దీనిని త్రీ టైర్ ఆర్కిటెక్చర్
(3 tier architecture) అంటాము.
దీని ఉపయోగాలను భట్టి ఇది ప్రజాధరణ పొందింది.
ఇప్పుడు క్లౌడ్ కంప్యూటింగ్(cloud computing) అవసరం లేదా ఎక్కడ
ఇది భిన్నం గా ఉంటుంది అనేది చూద్దాం.
క్లయింట్ సర్వర్ మాడెల్(client-server model) అనేది
ఒక సాధారణ సర్విస్ మాడెల్ (service model) ఇందులో
సర్వర్(server) క్లయింట్లు రిక్వెస్ట్ (request) లను
సర్వీస్(service) చేస్తుంది, అదే క్లౌడ్ (cloud) లో
అయితే సంక్లిష్ట సర్విస్ (service) మోడెల్స్
(models) అయిన IaaS, PaaS, SaaS వంటివి ఉంటాయి.
క్లైంట్ సర్వర్ మాడెల్ (client server model) లో ప్రతి
సర్విస్(service) కి , క్లయింట్(client) ని కనెక్ట్(connect) చెయ్యాలంటే
ఒక సర్వర్ ప్రాగ్రామ్ (server program) తప్పనిసరిగా
ఉండాలి, అదే క్లౌడ్ (cloud) లో అయితే, వివిధ
రకాల XaaS మోడల్ (models) లు ఉంటాయి.
కాబట్టి, సర్విస్ మోడల్ను(service models) చూసే
విధానం, క్లయింట్ సర్వర్ (client - server) విషయంలో
వేర్వేరుగా ఉండవచ్చు మరియు లోడ్ బాలన్సింగ్
(load balancing) లేకుండా ఉండచ్చు.
కానీ క్లౌడ్స్ (clouds) అన్నీ కూడా లఓడ్
బాలన్స్ (load balance) అయి ఉంటాయి.
ఇది క్లౌడ్ (cloud) యొక్క ప్రధాన అంశాల్లో
ఒకటి. క్లస్టర్(cluster) కొంత
వరకు స్కేలబుల్, మరియు క్లౌడ్(cloud)లో
సిద్ధాంతపరంగా అనంతమైన స్కాలబిలిటీ (scalability)
ఉంటుంది.
క్లయింట్ సర్వర్ విషయంలో(client - server), వర్చ్యులైజేషన్(virtualization)
అనే విషయం ఏదీ లేదు. మరియు వాస్తవీకరణ
అనేది మా ప్రధాన భావన లేదా క్లౌడ్
కంప్యూటింగ్లో(cloud computing) ప్రధాన భావన.
కాబట్టి, మనం ఈ క్లౌడ్ కంప్యూటింగ్(cloud computing)
యొక్క మరింత సమర్థత లేదా మొత్తం రిసోర్సస్
(resources) యొక్క మరింత మెరుగైన వినియోగం
మరియు వాటాదారుల పెద్ద సంఖ్యలో ప్రతిపాదించడానికి
ప్రయత్నించడం తెలుసుకుంటాము.
పై చిత్రం అంత స్పష్టంగా లేదు, ఇందులో సర్వీసెస్(services)
విభజన చూపబడుతుంది, దిగువ భాగంలో కార్యాచరణ,
కార్యాచరణ వ్యవస్థల యొక్క ఇన్ఫ్రస్తృక్చర్(infrastructure)
అంటే నెట్వర్క్ స్టోరేజ్ (network storage) సౌకర్యాలను
అంచనా వేయడం మరియు మధ్యలో వేర్వేరు
రకాలు సర్వీసెస్ (services) ఉన్నాయి.
మనము ఇన్ఫ్రాస్ట్రక్చర్(infrastructure) ని కలిగి ఉన్నాము.
ఈ క్లౌడ్ కంప్యూటింగ్(cloud computing) యొక్క క్లౌడ్
సర్వీసెస్ (cloud services) గురించి విస్తృతంగా
తెలుసుకుందాం.
ప్రతి లేయర్ ఒక సర్విస్(service) ని ఇస్తుంది.
అనగా IaaS, PaaS లేదా SaaS సర్వీసెస్(services)
ఉంటాయి.
కొన్ని వ్యాపార ప్రక్రియలు అమలు చేయడానికి ఈ
సర్వీసెస్ (services) ని ఉపయోగిస్తారు.
కాబట్టి,ఈ సర్వీసెస్ మాత్రమే కావు, వ్యాపార
అభివృద్దికి కూడా తోడ్పడతాయి.
వివిధ వ్యాపార ప్రక్రియలను అమలు చేయడానికి మనము
ఈ సర్వీసెస్ (services) ని ఉపయోగించుకుంటాను.
కాబట్టి, ఇది ఒక బిజినెస్ ప్రాసెస్ (business process).
మనము బిజినెస్ ప్రాసెస్ (business process) ఒక సర్విస్
(service) గా పొందవచ్చు.
ఇక్కడ ఉన్న మరొక లేయర్ (layer) ప్రెజెంటేషన్
లేయర్(presentation layer), ఇది వినియోగదారులతో
నేరుగా సంప్రదించడానికి కొన్ని ఇంటర్ఫేస్లు
(interfaces) ఉంటాయి లేదా వేర్వేరు సర్విస్
మోడల్(service models)ని కనెక్ట్ చేయడానికి కొన్ని
API లు ఉంటాయి.
వివిధ సర్వీస్ ప్రొవైడర్(service providers) కోసం వివిధ రకాలైన
API లను ఉపయోగిస్తారు.
ఆ API లను ఉపయోగించి కనెక్షన్ (connection) నిర్మిస్తాము.
ఈ API ఇవ్వడం వలన మనము సర్విస్ ప్రొవైడర్(service
provider) గా చెప్పలేము.
వినియోగదారుని యొక్క అనుకూలీకరించిన
కొన్ని అప్లికేషన్ (application) లు లేదా కొన్ని
ప్రత్యేక ఇంటర్ఫేస్లు(interfaces) తో ఎలా కనెక్ట్ చేయాలి
అనేది చూస్తాం.
ఇప్పుడు మొత్తం వ్యవస్థ ఇంటెగ్రటెడ్ ప్లాట్ఫారమ్ను(integrated
platform) కలిగి ఉండాలి, అంటే ఇది అంత బలమైన
ఇంటెగ్రేషన్ ప్లాట్ఫారమ్(integration platform) ఉందవలసిన అవసరం
లేదు, హార్డ్వేర్ ని ఇంటెగ్రేషన్(hardware
integration) చెయ్యడానికి ఒక విధమైన నిర్దిష్ట
నిర్మాణాత్మక స్థానం అవసరం, సర్వీస్ ఇంటెగ్రేషన్(service
integration) చెయ్యడానికి ఒక ఆర్చెస్ట్రేషన్
ఇంజిన్ (orchestration engine) ఉండాలి కాబట్టి ఇంటెగ్రేషన్
(integration) అనేది సర్విస్(service) ని అమలు చేయడానికి
ఉపయోగిస్తారు.
ఈ ఇంటెగ్రేషన్ (integration) చెయ్యాలంటే , మనం
చేసే సర్విస్ (service) నాణ్యత లేదా కోరుకున్న
సర్విస్(service) ని యొక్క సరైన స్థాయిలో చేస్తుందా
లేదా అన్నది చూసుకోవాలి.
సమాచారం యొక్క రకం లేదా సమాచారాన్ని
ప్రచారం చేయడం అనేది, ఏ విధమైన సర్వీసెస్
(services) ని అందిస్తుంది.
ఇన్ఫర్మేషన్ (information) రకాలైన విషయాలతో
ఎలా కనెక్ట్ (connect) అవుతుంది అనేది తెలుసుకోవాలి.
చివరికి, మనం మొత్తం గవర్నెన్స్ (governance)
ని కలిగి ఉండాలి; ఈ గవర్నెన్స్ (governance)
అనేది ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) నిర్వహణ లేదా
మొత్తం వ్యవస్థ నిర్వహణ అయి ఉండవచ్చు.
మనకు చట్టపరమైన సమస్యలు మరియు పాలసీలు అమలు
చేయబడ్డాయి, తద్వారా సమాఖ్య చట్టాలు మరియు
నిబంధనల ప్రకారం చట్టబద్ధంగా చెల్లుబాటు
అయ్యేవి గవర్నన్స్ (governance) ని రూపొందిస్తాయి
.
ప్రాథమికంగా వివిధ సర్వీసెస్ (services) ఉంటాయి.
నేను దీనిని పునరావృతం చేయడం లేదు, ఎందుకంటే
ఇది అనేక రూపాల్లో మనం చెప్పుకున్నాం.
కాబట్టి, చివరకు, మనం ఈ విభిన్న సర్విస్
మాడెల్ (service model) ని ఉపయోగిస్తున్నాము.
కాబట్టి, కొంత సమయం SaaS, PaaS మరియు IaaS ల గురించి
కొంచెం వివరంగా పునరావృతం చేసుకుందాం .
ఒక ట్రాన్స్పోర్టేషన్ (transportation) ఉదాహరణతో
దీన్ని పోల్చుకుందాం.
రవాణా వ్యవస్థలో రహదారులు ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) అయితే , కార్లు మరియు ట్రక్కులు
రవాణా ప్లాట్ఫారాలు(platforms), మరియు వస్తువులు,
వ్యక్తులు సాఫ్ట్ వేర్(soft wares) లు లేదా
సాంకేతిక పరంగా ఇన్ఫర్మేషన్ (information) అంటాం.
కాబట్టి, ఇలాగే క్లౌడ్ కంప్యూటింగ్ (cloud computing)
లో కూడా , మనము ఈ ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) ని కలిగి ఉన్నట్లయితే,
వివిధ ప్లాట్ఫారమ్(platforms)లు మరియు విభిన్న అప్లికేషన్
(applications) లు పనులను అమలు చేస్తాయి.
సాఫ్ట్ వేర్ అస్ ఆ సర్విస్ (software-as-a-service)
నిర్వచనం మనకు తెలుసు కనుక దానిని పునరావృతం
చేయవలసిన వసరం లేదు , ఇది ఇంటర్నెట్లో(internet)
ద్వారా వినియోగించే ఒక సాఫ్ట్వేర్(software),
పాయ్ అస్ యు గో మోడల్(pay-as-you-go model) గా ఉపయోగించుకోవచ్చు.
మరియు మనము ప్రాథమికంగా శోధించవచ్చు మరియు
ఆ సర్వీసెస్ని (services) ఉపయోగించుకోవచ్చు.
SaaS లక్షణాలు; విలక్షణమైన లక్షణాల్లో ఒకటి
వాణిజ్య సాఫ్ట్వేర్ (software) కి వెబ్ యాక్సెస్
(web access); సాఫ్ట్వేర్ (software) అనేది ఒక కేంద్రీకృత
స్థానం నుండి నిర్వహించబడుతుంది, కనుక ఇది పంపిణీ
చేయబడవచ్చు మరియు విస్తరణ పంపిణీ చేయబడుతుంది,
అయితే నిర్వహణ అనేది తార్కికంగా కేంద్రీకృత
స్థానాన్ని కలిగి ఉంటుంది, వివిధ సిములేషన్
(simulation), అంటే మ్యాథమేటికల్ సిములేషన్(mathematical simulation)
కి మద్దతు ఇచ్చే ఒక విధమైన కంప్యూటింగ్
(computing) కోసం, మొదలైనవాటి కొరకు సాఫ్ట్వేర్
(software) ఒక సర్విస్ (service) గా ఇస్తాము.
ఈ మొత్తం సిములేషన్(simulation) అంతా కూడా వైవిధ్యమైన
వివిధ ప్లాట్ఫారమ్ల్లో(platforms) పై లేదా డిస్ట్రిబుటెడ్
సిస్టమ్స్ (distributed systems) లో గాని ఉండవచ్చు,
కానీ మొత్తం నిర్వహణ తార్కికంగా కేంద్రీకరిస్తుంది.
సాఫ్ట్వేర్ అనేది ఒన్-టు-మెనీ(one to many)
మాడెల్(model) లో పంపిణీ అవుతుంది.
కాబట్టి, దీనిని ఒన్ టు మెనీ(one to many)
అంటాము.
వినియోగదారులు అప్ గ్రేడ్ (upgrade) చేయనవసరం
లేదు. మరొక లక్షణం, అప్లికేషన్ ప్రోగ్రామింగ్
ఇంటర్ఫేస్(application programming interfaces) వివిధ సాఫ్ట్వేర్
భాగాల మధ్య ఏకీకరణ కోసం అనుమతిస్తుంది.
API అనేది సాఫ్ట్వేర్ (software) సమ్మేళనం లేదా
ఇంటిగ్రేట్(integrate) చేయడానికి అనుమతిస్తుంది.
ఎక్కడైతే వివిధ సంస్థల మధ్య, బయటి ప్రపంచంతో
ఒక ముఖ్యమైన పరస్పర సహకారం ఉంటుందో అక్కడ
ఇది చాలా ఉపయోగకరంగా ఉంటుంది, ఉదాహరణకి
ఇ-మెయిల్(email), లాంటి ప్రచారం సాఫ్ట్వేర్
వంటి సంస్థ.
కనుక , దీనిలో చాలా ఇంటర్ఫేస్(interfaces) లు
ఉంటాయి.
వెబ్(web) మరియు మొబైల్ యాక్సెస్(mobile access) కోసం
అవసరమైన అప్లికేషన్(application); స్వల్పకాలిక అవసరాలకు
మాత్రమే ఉపయోగపడే సాఫ్ట్వేర్, ఏదైనా
మనకు ఎల్లప్పుడూ అవసరం అవసరము ఉండకపోవచ్చు.
కానీ మనం స్వల్పకాలిక అవసరాల కోసం మాత్రమే
ఉపయోగించాలనుకుంటున్నాము.
ఉదాహరణకి , ఒక ప్రత్యేక పరీక్షను నిర్వహించాలనుకుంటున్నాము
లేదా ఇంటర్వ్యూ కోసం నిర్దిష్ట వ్రాత
పరీక్షను అమలు చేయాలనుకుంటున్నాము మరియు ఒక ప్రత్యేకమైన
లక్ష్యం కోసం ఆ పనిని అమలు చేయాలనుకుంటున్నాము,
ఆ రోజు మాత్రమే వాటిని అమలు చేస్తున్నాము.
కనుక, అన్నింటిని మనం డెప్లోయ్ (deploy)
చేయనవసరం లేదు. మనం ఎక్కడైనా సర్వీసెస్
(services) ని పొందవచ్చు అనగా ఒక నిర్దిష్ట
ప్రయోగశాలలో డెస్క్టాప్(desktop) ద్వారా సర్వీసెస్
(services)ని పొందడం , ఆ పరీక్షను అమలు చేయవచ్చు.
తరువాత కాలానుగుణంగా ఆ విషయం మర్చిపోవచ్చు.
కాబట్టి, పన్ను, బిల్లింగ్ మొదలైనవాటికి సాఫ్ట్వేర్
డిమాండ్(software demand)గణనీయంగా పెరుగుతుంది.
కాబట్టి, డిమాండ్లకు వచ్చే చిక్కులు ఉంటాయి,
సాధారణంగా పన్నులు చెల్లిస్తున్నప్పుడు
లేదా పన్ను దరఖాస్తును పూరిస్తున్నపుడు,
సంవత్సరంలో నిర్దిష్ట సమయం వరకు డిమాండ్(demand)
పెరుగుతుంది.
మిగిలిన సమయంలో అది తగ్గిపోతుంది.
అప్పుడు వీటిలో కొన్ని ప్రసిద్ధమైన సాఫ్ట్వేర్
(software) లు సేల్స్ ఫోర్స్ (sales force), CRM మొదలైనవి
.
ఏ అప్లికేషన్ (applications) లో SaaS అనేది ఉత్తమ
ఎంపిక కాదో చూద్దాం.ఏ అప్లికేషన్ (applicatoions)
కైతే చాలా వేగవంతమైన ప్రాసెసింగ్ లేదా
రియల్ టైమ్ డేటా అవసము ఉంటుందో వాటికి
. ఎందుకంటే, ఆ క్లౌడ్ కంప్యూటింగ్లో(cloud
computing) మనం చూడగలిగినది లేదా అధిక పనితీరు
నిజమైన రకమైన ఆపరేషన్గా(operation) పరిగణించబడదు.
దీనిలో డిలే(delay) అంటే ఆలస్యం కావచ్చు.
కనుక, ఏ అప్లికేషన్ (applications) కైతే రియల్
డేటా(real data) ఆవరమయ్యి చాలా వేగంగా కార్యకలాపాలు
జరుగుతాయో అనగా ఉదాహరణకు, వైపరీత్యాల నిర్వహణ
మొదలైనవి వాటికి ఇది సరైన ఎంపిక కాదు.
మనము ప్రొవిజన్(provision) చేస్తూ ఉన్న, అది
కచ్చితమైనదిగా , ప్రత్యేకమైన QoS నిర్వహణతో అంకితమై
ఉండాలి.
మరొక రకమైన అప్లికేషన్ (applications), ఏవైతే చట్టాలు
మరియు ఇతర నియంత్రణలు బాహ్యంగా హోస్ట్(host)
చేసిన డేటా(data)ను అనుమతించవు.
ఇలాంటి, ఒక సంస్థాగత పని లేదా సంస్థలో
చెప్పాలంటే, సంస్థకు సంబంధించి సమాచార
సంబంధిత కమ్యూనికేషన్ను(communication) దాని మెయిల్ సర్వర్లో(mail
server)నే ఉండాలి లేదా సంస్థ యొక్క ఇమెయిల్
ఐడి(email id)ని పబ్లిక్ అవసరానికి ఉపయోగించకూడదు
అని చెప్పవచ్చు.
కాబట్టి, ఇది మన డేటాలో చట్టపరమైన నిబంధన.
మరొక అప్లికేషన్ (application) ఇప్పటికే ఉన్న
ఆన్-ప్రేమిస్ (on-premise) సొల్యూషన్ (solution) సంస్థ
యొక్క అన్నీ అవసరాలను తీరుస్తుంది.
సంస్థ అవసరాలను తీర్చగలగే ఒక లెగసీ అప్లికేషన్లు(applications)
కలిగి ఉండటం అవసరం కావచ్చు.
అదేవిధంగా, ప్లాట్ఫాం అస్ ఆ సర్వీస్ (platform
as a service) అనేది SaaS అప్లికేషన్ (application) కి ఎలా ఉపయోగపడుతుంది,
ఇది ఒక సాఫ్ట్వేర్ డెవలప్మెంట్ ప్లాట్ఫారమ్(software
development platform) కు ఉపయోగపడుతుంది . సాస్(SaaS) అనేది వెబ్లో
(web) ద్వారా సాఫ్ట్వేర్ను(software) పంపిణీ చేస్తుంది.
కానీ (PaaS) అనేది సాఫ్ట్వేర్ (software) ని క్రియేట్
(create) చేసి , పంపిణీ చెయ్యడానికి ఉపయోగపడే
ఒక ప్లాట్ఫాం (platform).
కాబట్టి, ఇది మన సొంత వ్యవస్థను అభివృద్ధి
చేయడానికి ఒక వేదికను ఇస్తుంది.
కనుక డెవలప్,(develop), డెప్లోయ్ (deploy) ,హోస్ట్
(host) చెయ్యడానికి కావలసిన సర్వీసెస్ (services) లాంటి
లక్షణాలను అదే సమీకృత డెవలప్మెంట్(development)
ఎన్విరాన్మెంట్ (environment)లో ఉన్నాయి.
వివిధ వినియోగదారు ఇంటర్ఫేస్ మరియు
ఇతర విషయాలను రూపొందించడానికి, సవరించడానికి, పరీక్షించడానికి
పరీక్షా ఉపకరణాలను రూపొందించడానికి
వెబ్(web) ఆధారిత ఇంటర్ఫేస్(interface) ను తయారుచేస్తారు.
ముల్టీ టెనెంట్ ఆర్కిటెక్చర్ (multi tenant architecture), ఇక్కడ
ఒక అభివృద్ది చేసిన అప్లికేషన్ (application)
ఒకేసారి ఎక్కువ వినియోగదారులు ఉపయోగిస్తారు.
డెప్లోయ్డ్ సాఫ్ట్వేర్ (deployed software) యొక్క లోడ్
బ్యాలన్సింగ్ (load balancing) మరియు ఫైలోవర్
(failover) తో కూడుకున్న అంతర్నిర్మితంగా
ఉన్న స్కేలబిలిటీ(scalability).
ఇక్కడ టీమ్ (team) సహకారం చాలా ముఖ్యమైనది.
వివిధ ప్రాంతాలలో లద వివిధ దేశాలలో
వ్యాపించి ఉన్న ఒక విభిన్న అభివృద్ధి
బృందానికి ఒక సాధారణ అభివృద్ధి వేదిక
అవసరం అవుతుంది.
దీని పై పనిచేస్తే ఇది ఒక మంచి పరిష్కారాన్ని
చూపిస్తుంది.
బిల్లింగ్ సబ్స్క్రిప్షన్ నిర్వహణ కు కావల్సిన
టూల్స్ మొదలైనవి ఇతర అంశాలు.
ఇది చాలా ఉపయోగకరంగా ఉంటుంది, ఎక్కువగా
ఇది అభివృద్ధి చేస్తున్న ప్రణాళికలో బహుళ
డెవలపర్లు(developers) పనిచేసే పరిస్థితిలో ఉపయోగకరం.
ఇతర బాహ్య పార్టీలు డెవలప్మెంట్ ప్రాసెస్(development
process) తో ఇంటెరక్ట్(interact) అవ్వడానికి ఇది ఉపయోగపడుతుంది.
కాబట్టి, సంస్థ కార్యాలయంలో కీలకమైన అభివృద్ధి
బృందాలను కలిగి ఉన్నాము.
కస్టమర్(customer) తో రోజువారీ ప్రాతిపదికన ఇంటెరక్ట్
(interact) అవ్వడానికి ఒక డెవలప్మెంట్(development)
జట్టు ఉంటుంది మరియు ప్రధాన కార్యాలయంలో
ఇతర అభివృద్ధి బృందం ఉండవచ్చు.
మనము ఈ రెండింటి మధ్య సమన్వయం చేయాలనుకున్నప్పుడు
ఈ ప్లాట్ఫారమ్(platform) ఉపయోగపడుతుంది.
డెవలపర్లు ఎక్కడైతే టెస్టింగ్(testing) మరియు
డెవలప్మెంట్ (development) ఆటోమేట్(automate) చెయ్యాలనుకునటారో
అక్కడ PaaS ఉపయోగపడుతుంది.
కాబట్టి, మీరు ఆటోమేట్ చేయాలనుకుంటే తనిఖీ
చేయవలసినవి అక్కడ ఉంటాయి.
సాఫ్ట్వేర్ డెవలప్మెంట్(software development) పద్దతుల్లో
ప్రజాధరణ పొందినది ఎజిల్ సాఫ్ట్వేర్(agile
software) పద్దతి, ఇది ఈటెరటివే (iterative) మరియు ఇంక్రీమెంటల్
(incremental) నమూనా పై ఆధారపడి ఉంటుంది, ఈ సందర్భాలలో
PaaS చాలా ఉపయోగకరంగా ఉంటుంది.
ప్రముఖ PaaS రకాల్లో ఒకటి అజూర్(azure), మరియు
గూగుల్ యాప్ ఇంజిన్(google app engine) లేదా ఇతర అనేకమైనవి
ప్రజలు తమ అప్లికేషన్(applications) అభివృద్ధి చేయటానికి
ఉపయోగిస్తారు , అది వెబ్ ఎనేబుల్(web enabled)
అప్లికేషన్(applications) గా వెబ్(web) లలో అందుబాటులో
ఉంటాయి.
PaaS ఏ సందర్భాలల్లో ఉపయోగకరంగా ఉండదో
చూద్దాం.
ఏ అప్లికేషన్(applications) లకు హోస్ట్ (host) పరంగా
అత్యంత పోర్టబులిటి (poetability) అవసరం అవుతుందో
అక్కడ PaaS మంచి ఎంపిక కాదు. కాబట్టి, అధిక
పోర్టబిలిటీ అవసరమైతే ఇది మంచి ఎంపిక కాదు.
ఎక్కడైతే ప్రోప్రైటరీ లాంగ్వేజెస్ (proprietary
languages) లేదా విధానాలు అభివృద్ధి ప్రక్రియపై
ప్రభావం చూపుతుంటాయో , ఉదాహరణకు, రక్షణ
శాఖలో ,ఆర్థిక శాఖలు మాదైలన వానిలో PaaS
సరైన ఎంపిక కాదు. ఇలాంటి సంస్థలలో
ఏది ఓపెన్(open) గా ఉండదు అంటే ఓపెన్ సోర్స్(open
source) గా చెప్పలేము ,ఇది పబ్లిక్ సిస్టమ్స్లో(public
system) కాదు, దీనిలో సంశ్యాలను పరిష్కరించడానికి
కొన్ని ప్రోప్రీటెరి (proprietary) పద్దతులు ఉంటాయి.
ఇందువల్ల ఇక్కడ PaaS అంత ఉపయోగకరంగా ఉండకపోవచ్చు.
మరొక ప్రొవైడర్ తో ఇంటెరక్ట్(interact) అయ్యేటప్పుడు
ఈ ప్రోప్రైటరీ లాంగ్వేజెస్ (proprietary language) అంతరాయం
కలిగిస్తుంది.
, దీని వల్ల అమ్మకం దారులు ఆందోళనలకు
దిగవచ్చు.
కనుక ఈ సందర్భంలో కూడా PaaS ఉపయోగకరంగా
ఉండదు.
ఎక్కడైతే అప్లికేషన్ పనితీరుకి అంతర్లీన
హార్డ్వేర్ మరియు సాఫ్ట్వేర్ అనుకూలీకరణ
అవసరమో అక్కడ కూడా PaaS సరైన ఎంపిక కాదు.
కాబట్టి, నా ఉద్దేశ్యం దాని ఆధారంగా అప్లికేషన్(application)
ప్రదర్శన కలిగి ఉంది అంతర్లీన హార్డ్వేర్
మరియు సాఫ్ట్వేర్ ను అనుకూలీకరించడానికి
కస్టమిజెడ్ (customized) స్టాక్ (stack) అవసరం,
సాధారణ స్టాక్ సరిపోదు.
చివరగా, IaaS, ఇది సర్వర్లను , స్టోరేజ్ (storage) ని
, నెట్వర్కు(network) మరియు ఆపరేటింగ్ సిస్టం(operating
system) లను ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) గా అవసరాన్ని
బట్టి అందిస్తుంది.
రిసోర్సస్ (resources) ని కొనుగోలు లేదా నిర్వహించడం
కంటే మనము వాటిని వర్చువలైజషన్ (virtualization)
రూపంలో కలిగి ఉండవచ్చు లేదా ఒక వర్చువల్
ఇంస్టాన్స్ (virtual instance) మరియు వర్చ్యువల్
స్టోరేజ్ (virtual storage) మొదలైనవాటిని కలిగి
ఉంటుంది.
కాబట్టి, ఇది ప్రజాదరణ పొందిన మరియు ఎక్కువగా
ఉపయోగించే IaaS.
IaaS లక్షణాలలో మొదటిది రిసోర్సస్ (resources) ని
, సర్వీసెస్ (services) గా పంపిణీ చేస్తాయని
బాగా తెలుసు, డైనమిక్ స్కేలింగ్ను(dynamic
scaling) అనుమతిస్తుంది.
ఇది వేరియబుల్ ధర ను కలిగి ఉంటుంది.
మనము యుటిలిటీ కంప్యూటింగ్ (utility computing) కు, దానిలో
అయితే బహుళ వినియోగదారులు ఒకే సాఫ్ట్వేర్ (software)
ని ఉపయోగిస్తారో , దానికి చెల్లించినట్లుగా
ఇక్కడ కూడా చెల్లిస్తాము.
ఒకే హార్డ్వేర్ స్టాక్ (hardware stack) పై ఎక్కువ
యూజర్లను(users) కలిగి ఉంటుంది లేదా అదే
హార్డ్వేర్ స్టాక్(hardware stack) ని వివిధ వర్చువల్
మెషీన్నుగా చేస్తాము.
IaaS ఎక్కడ ఉపయోగించబడుతుందో చూద్దాం, డిమాండ్
చాలా అస్థిరంగా ఉంటుంది.
మనము కొన్ని సార్లు ఒక నిర్దిష్ట మెమరీ(memory)
అవసరాన్నిలేదా కొన్ని ఇతర అవసరాలు కలిగి
ఉంటాను.
అందువల్ల డిమాండ్లు(demands) మారుతూ ఉంటాయి , అంటే
పెట్టుబడిదారుల సామర్ధ్యం లేకుండా
ఉండే కొన్ని సంస్థలు ఉన్నాయి.
అనేక సంస్థలలో లేదా అనేక ప్రాజెక్టులలో
మనము వెంటనే హార్డువేర్లను (hardware) కొనడం అనేది
సాధ్యం కాదు లేదా కొన్నిసార్లు మనము
ఏమి చేయాలనుకుంటున్నామో అంటే PoC: proof of concept యొక్క
కొన్నింటిని చేయాలని కోరుకుంటున్నాము
#NAME?
ఇది ఎక్కువ సమయం తీసుకుంటుంది లేదా
మొత్తం ప్రక్రియ యొక్క ఒక త్వరిత
ప్రారంభం కలిగి ఉంటుంది.
ఎక్కడైతే కాపిటల్ ఎక్స్పెండీచర్ (capital
expenditure) పరిమితంగా ఉంటుందో అక్కడ ఈ IaaS ఉపయోగపడుతుంది.
ఒక్ నిర్దిష్ట వ్యాపారానికి లేదా తాత్కాలిక అవస్థాపన
అవసరాలను లేదా ప్రూఫ్ ఒఫ్ కోన్సెప్ట్ (proof
of concept) IaaS ఉపయోగపడుతుంది.
ఏ సందర్భాల్లో ఇది ఉత్తమమైన ఎంపిక కాదో
చూద్దాం, ఎక్కడైతే , నిభంధనలు ఉంటాయో
అక్కడ డాటా స్టోరేజ్(data storage) ని మరియు ప్రొసెసింగ్(Processing)
ని ఆఫ్షోరింగ్(offshoring) లేదా ఔట్ సోర్సింగ్
(outsourcing) చెయ్యడం కస్టము.కొన్ని ముఖ్యమైన చట్టపరమైన
సమస్యలు లేదా నియంత్రణా ఒప్పందాలు ఉండవచ్చు.
ఎక్కడైతే ఉన్నత స్థాయి పనితీరు అవసరం అవుతుందో,
మరియు ఒక సంస్థ అవసరాలను తీర్చడానికి ఆన్-ప్రీమిస్(on-premise)
లేదా స్వంత హోస్ట్(host) కు అత్యధిక సామర్థ్యం
ఉంటుంది.
మనము ఈ VM లను కలిగి ఉన్నప్పుటికీ, వర్చ్యువల్
మెషీన్ మానిటర్(virtual machine monitor) పైన దానికి
సంభందించిన హార్డ్వేర్ మొదలైన వాటిని కలిగి
ఉండాలి.
తర్వాతనే మనం విభిన్న VM లను తయారు చేయగలం.
వీటన్నింటికి ప్రాథమికంగా కొంత మొత్తంలో రిసోర్సస్
(resources) మరియు కంప్యుటేషనల్(computational) సమయం పడుతుంది.
కనుక , మనము పనితీరు యొక్క అత్యధిక స్థాయిని
కోరుకుంటున్నప్పుడు మరియు క్లిష్టమైన
పని అయినప్పుడు, IaaS అనేది సరైన ఎంపిక
కాదు.
సాస్(SaaS) ప్రొవైడర్లో (providers)కొన్నింటిని
చూద్దాం , మనము దీనిపై వివరంగా వెళ్ళడం
లేదు. ఇందులో విభిన్న ప్రైసింగ్ మోడెల్స్
(pricing models) ఉన్నాయి.
వాటిలో కొన్ని పే అస్ యు గో మోడల్ (pay
as you go model), కొన్ని ఉచితంగా లభించేవి, మరికొన్ని
సబ్స్క్రిప్షన్ (subscription) ఆధారంగా లభించేవి.
ఇదేవిధంగా PaaS ప్రొవైడర్ లకు కూడా ఉంటాయి.
అవి వివిధ రకాల ప్లాట్ఫార్మ్స్(platforms) డాటా బేస్ (database), డాటాబేస్
(database) లోని పెద్ద పెద్ద టేబుల్(table) ని అందిస్తుంది.
కాబట్టి, మనము ఇక్కడ చూస్తున్న విభిన్న
రకాలైన లక్షణాలను ,వివిధ రకాలైన కోయరాకు
ఉపయోగిస్తాము, వాటిలో కొన్ని డాట్ నెట్
ప్లాట్ఫాం (DOT NET platform), వెబ్ డెవలప్మెంట్
ఎంటర్ప్రైజెస్ అప్లికేషన్ (web development enterprises) మొదలైనవి.
ఇది వివిధ రకాలైన వ్యవస్థలను కలిగి
ఉంటుంది.
మరియు ఇతర IaaS ప్రొవైడర్లు కూడా కలిగి ఉంటుంది.
ఈ IaaS ప్రొవైడర్ (providers) లు వివిధ రకాలైన
హార్డ్వేర్ సామర్థ్యాలను కలిగి ఉంటాయి, వివిధ
రకాలైన ఆపరేటింగ్ సిస్టమ్లు(operating Systems)
ఉంటాయి మరియు మనకు విభిన్న రకాలైన బిల్లింగ్(billing)
విధానాలు ఉన్నాయి.
కాబట్టి, ఇవి IaaS ప్రొవైడర్ యొక్క వివిధ రకాలు.
మనము ఇప్పటికే చర్చించినట్లుగా , ఈ భాగాల యొక్క సాధారణ
స్టాక్ను(stack) మళ్ళీ ఆవిష్కరించినట్లయితే,
SaaS అనేది అప్లికేషన్ (application) స్తాయి వరకు
సర్విస్ ప్రొవైడర్ (service provider) నిర్వహిస్తారు.
కాబట్టి, ఇక్కడ క్లౌడ్ సర్వీస్ ప్రొవైడర్(cloud
service provider) యొక్క బాధ్యత అప్లికేషన్(application)
స్థాయిలోనే ఉంటుంది, అయితే XaaS లో అయితే
ఈ నిర్వహణ బాధ్యత రన్టైమ్ ఎన్విరాన్మెంట్
(runtime environment) తీసుకుంటుంది, తద్వారా డేటా(data) మరియు
అప్లికేషన్లు(applications) వినియోగదారులుగా
ఉంటాయి.
అదే IaaS విషయంలో వర్చువలైజేషన్ మరియు VM లను అందివ్వడం
ప్రొవైడర్ యొక్క బాధ్యత, అయితే దానిలో
కొన్నిసార్లు ప్రొవైడర్ గెస్ట్ (guest) OS ను అందిస్తుంది
లేదా గెస్ట్ (guest) OS ని లోడ్(load) చేసుకోవచ్చు.
వర్చ్యువల్ మిషన్(virtual machine) లో లోడ్(load) చేసుకోవాలి,
తద్వారా.
మిగిలిన విషయాలన్ని ప్రాథమికంగా IaaS వినియోగదారుని
యొక్క బాధ్యత.
కాబట్టి, ఈ క్లౌడ్ యొక్క మరొక కోణాలను
పరిశీలిస్తే, నెట్వర్కింగ్ ఉంది. ఈ నెట్ వర్కింగ్
చాలా ముఖ్యమైన పాత్రను పోషిస్తుంది, ఎందుకంటే
మనం విభిన్న హార్డ్వేర్ రిసోర్సస్ (resources) ని
కలిగి ఉంటాము.
కనుక, ఈ విభిన్న రిసోర్సస్ (resources) అన్నీ నెట్వర్క్(network)
ద్వారా కలుపబడి ఉంటాయి, వీటిలో ప్రత్యేకంగా
రాక్ సర్వర్(rack server) లేదా బ్లేడు సర్వర్(blade
server) మొదలైనవి ఉన్నాయి, ఈ నెట్వర్క్(network) అనేది
క్లౌడ్ కంప్యూటింగ్(cloud computing) కి ఒక వెన్నెముక
అని చెప్పవచ్చు, ఎందుకంటే, ఈ నెట్వర్క్లతో
, సర్వర్(servers) లు అధిక ఆపరేటింగ్ స్పీడ్(operating
speed) ని కలిగి ఉంటాయి.
కాబట్టి, క్లౌడ్ కంప్యూటింగ్లో(cloud
computing) నెట్వర్క్(network) ముఖ్యమైన పాత్రను
పోషిస్తుంది.
నెట్వర్కు(network) యొక్క మరొక అంశము, ఈ నెట్వర్కును
వర్చ్యులైజ్(virtualize) చెయ్యగలామా లేదా
అనేది.
మనం మన సంస్థాగత అవసరానికి ఒక సాధారణ
నెట్వర్క్(network) దృష్టాంశాన్ని కలిగి ఉంటాము.
మనం ప్రత్యేకమైన ఈవెంట్ కొరకు ఒక
నెట్వర్క్ ని సెటప్(setup) చేయాలనుకుంటే రౌటర్లు(routers)ని
మరియు సర్వర్లు(server)ని మొదలగునవి గుర్తించాలి.
ఒక విధంగా దీన్ని ఎలా చూడవచ్చు అంటే
వేర్వేరు రిసోర్సస్ (resources) ని కొనుగోలు
చేసి వాటిని కనెక్ట్(connect) చెయ్యడం.
ఈ ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) మొత్తాన్ని
మనం వర్చువలైజ్(virtualize) చెయ్యగలమా లేదా , మొత్తంగా
వర్చువల్ నెట్వర్క్(virtual network)ని సృష్టించగలమా
లేదా అనేది చూసుకోవాలి.
కాబట్టి,కొన్ని ఈవెంట్స్(events) కొరకు అక్కడ ఉన్నప్పుడే
ఈ నెట్వర్క్ను(network)ని గుర్తిస్తాము, ఇవి
కొన్ని పరీక్షలు కావచ్చు, కొన్ని
ఇతర విభాగాలను ఏదో ఒకవిధంగా తయారుచేయడం
కావచ్చు.
తరువాత వాటిని నెట్ వర్క్(network) నుండి దూరంగా
పంపిస్తాము.
మరో మాటలో చెప్పాలంటే, నేను ఈ విధమైన నెట్
వర్కింగ్(networking) ను నిర్మించడానికి
ఒక మార్గం కలిగి ఉంటాము, అందుచే ఇది
మరొక అంశం. కాబట్టి, క్లౌడ్ కంప్యూటింగ్
నెట్వర్క్(network) రిసోర్సస్ (resources) ని మనము చూసినట్లుగా
డైనమిక్గా(dynamic) కేటాయించవచ్చు.
క్లౌడ్ కంప్యూటింగ్ యొక్క క్లౌడ్ కోర్ను
రూపొందించగల కొన్ని నెట్వర్కింగ్ (networking)
అంశాలు ఉన్నాయి.
వాటిలో వర్చువల్ లోకల్ ఏరియా నెట్వర్క్(virtual
local area network) లేదా VLAN, VPN మరియు వేర్వేరు ప్రోటోకాల్(protocol)
పొరలు అనేవి ప్రముఖంగా ఉంటాయి.
దీనికి వాస్తవ రూపాన్ని ఇవ్వడానికి OpenSSH, OpenVPN
అనే టూల్స్ (tools) మరియు పద్దతులు ఉపయోగపడతాయి.
వివిధ క్లౌడ్ మోడల్స్లో(cloud models) నెట్వర్కింగ్(networking)
ఉంటే, అది పైన చూపిన విధంగా సాధారణ OSI
స్టాక్(stack) లాగా ఉంటుంది.
మనము IaaS లో చూస్తే, డేటా లింక్ లేయర్(data
link layer) వరకు ప్రొవైడర్(provider) చూసుకుంటుంది.
మిగిలిన లేయర్(layers)లన్నీ వినియోగదారుని బాధ్యత.
ఇక SaaS విషయంలో, మొత్తం స్టాక్(stack) అంతా ప్రొవైడర్ల(providers)
బాధ్యత.
PaaS విషయంలో అయితే ప్రెసెంటేషన్ లేయర్
(presentation layer) వరకు ప్రొవైడర్ బాధ్యత, అప్లికేషన్
లేయర్ (application layer) వినియోగదారుని భాధ్యత.
కాబట్టి, ఈ OSI ను ఒక సర్వీస్ మోడల్(service
model) గా గుర్తించాలని మీరు కోరుకుంటే,
వ్వివిధ రూపాల్లో చూడవచ్చు, మీరు మొత్తాన్ని
ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) గా చూస్తే,
మొత్తాన్ని ప్లాట్ఫాం (platform) గా లేదా సాఫ్ట్వేర్(software)
ని ఒక సర్వీస్(service) గా చూస్తాం.
కాబట్టి, నెట్ వర్కింగ్ ముఖ్యమైన పాత్ర పోషిస్తుంది.
నెట్వర్కు ఫంక్షన్ వర్చువలైజేషన్(network
function virtualization) కేవలం త్వరితంగా పరిచయం కలిగి ఉంటుందని
మేము చెప్పే మరో అంశం ఉంది. నెట్వర్క్
ఆపరేటర్లను(network operators) వాస్తవిక సాంకేతిక
పరిజ్ఞానాన్ని రూపొందించడం ద్వారా అనేక నెట్వర్క్(network)
పరికరాల రకాలను, పరిశ్రమ ప్రామాణిక
స్విచ్లు(switches) మొదలైనవి డేటాసెట్ల(datasets)లో
ఉంచవచ్చు.
మనం చర్చించబోతున్నట్లుగా ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) పై పని చేస్తామని చెప్పడానికి అది
ప్రయత్నిస్తుంది.
ఇది సాఫ్ట్వేర్(software) ప్రామాణిక సర్వర్
హార్డ్వేర్(server hardware) పరిధిలో అమలు చేయగల
సాఫ్ట్వేర్లోని(software) నెట్వర్క్ ఫంక్షన్ల(network
functions) అమలును కలిగి ఉంటుంది మరియు కొత్త
పరికరాల ఇన్స్టలేషన్ (installation) చేయకుండా అవసరమైన
నెట్వర్క్(network) యొక్క వివిధ ప్రదేశాల్లో
ఇది తక్షణం తరలించగలదు.
మా తర్వాతి చర్చలో నేను కొద్దిగా చర్చిస్తాను.
మనము ఒక ఇన్ఫ్రాస్ట్రక్చర్ (infrastructure) కలిగి ఉంటే
వివిధ నెట్వర్క్ల (networks)ను తెలుసుకోవచ్చు,
ఇవి సంప్రదాయ విధానాలు మరియు ఇక్కడ ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) ని కలిగి ఉంటే, ఈ ప్రాధమిక ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) మీద వివిధ నెట్వర్క్(network) లను
గ్రహించటానికి ప్రయత్నిస్తాము లేదా ఒకే ఇన్ఫ్రాస్ట్రక్చర్
(infrastructure) పై వివిధ వర్చ్యువల్ నెట్వర్క్ (virtual network)లు
కలిగి ఉంటుంది.
నేటి ఉపన్యాసం ఇక్కడితో ముగిస్తూ, తదుపరి
మన చర్చను కొనసాగిస్తాము .
ధన్యవాదాలు.
