curriculum-2005 యొక్క టేక్ on computing
సాధారణంగా, మీరు computing‌ని చూస్తున్నట్లయితే,
ఇది కనిపించే సాధారణ మార్గం, లక్ష్యంతో నడిచే అంశాలకు ఇది చాలా ఉపయోగకరంగా ఉంటుంది.
ఇది computer భాగాలు మరియు ప్రోగ్రామ్‌ల సమూహాన్ని ఉపయోగించడం గురించి
స్మార్ట్, చిల్ చాట్‌లను కిక్‌స్టార్ట్ చేయడానికి
నిర్దిష్ట కారణాల కోసం
computing‌లో సమాచారం మరియు ఇతర అంశాలను సేకరించడం వంటివి.
మనం ఒక అవసరాన్ని గుర్తిస్తే,
ఇది మొత్తం computing సన్నివేశానికి దిగజారింది.
ఇది గేర్ మరియు నియమాల గురించి మాత్రమే కాదు,
కానీ ఈ పదాన్ని ఎవరు ఉపయోగిస్తున్నారనే దాని గురించి కూడా -
అగ్రశ్రేణి పరిశోధకులు లేదా
ప్రోస్ నుండి విద్యార్థులు, గృహిణులు ఎవరైనా,
సాధారణ వ్యక్తులకు, వారి స్వంత మంచి కోసం.
ఈ విషయాన్ని ఎలా ఉపయోగించాలో తెలుసుకుందాం.
cloud computing‌లోకి ప్రవేశించే ముందు,
మనం మళ్ళీ ఏమి నేర్చుకోబోతున్నామో చూద్దాం.Cloud
computing 101లో ఈ NIST model ఏమిటి?
ఇది సాధారణ లక్షణాల గురించి మాట్లాడుతుంది,
ప్లస్‌లు మరియు మైనస్‌లు, తెరవండి
ప్రమాణాల పాత్రలు మరియు అంశాలు.
కాబట్టి, మేము cloud computing‌తో ప్రారంభిస్తున్నాము, సరియైనదా?
దీనికి ప్రమాణం ఉందా లేదా మనం తనిఖీ చేయాలా?
అవును అయితే, మేము cloud computing యొక్క నిర్మాణాన్ని లోతుగా త్రవ్వాలి.
ఇలా, cloud computing stack,
serviceా ఆధారిత డిజైన్ ఎలా పనిచేస్తుంది.
cloud computing‌లో, ఇలాంటి అంశాలు ఉన్నాయి
ఒక serviceగా మౌలిక సదుపాయాలు, వేదిక
service లేదా సాఫ్ట్‌వేర్‌గా
serviceగా.
మేము వీటిని ఎలా అందిస్తాము?
మేము దానిని తరువాత పరిశీలిస్తాము.
ఒకే cloud‌లో, విషయాలను సెటప్ చేయడానికి వివిధ మార్గాలు ఉన్నాయి.
అది నిజమా? మేము వాటిని ఎలా మరియు ఎప్పుడు ఉపయోగిస్తాము,
వాటిని ఎక్కడ మరియు ఎలా ఉంచాలి,
మరియు ఏ విధమైన విస్తరణ మార్గాలు ఉన్నాయి,
మేము కనుగొంటాము.
cloud‌లోని మరో పెద్ద విషయం serviceలను నిర్వహించడం.
consumerలు serviceను ఎంచుకుంటారు
వారు serviceను ఉపయోగించాలనుకుంటున్నారు లేదా కొనసాగించాలనుకుంటున్నారు
వారు దానిని book చేసినప్పుడు.
ఒక customer‌గా, నేను Service provider‌పై ఆధారపడుతున్నాను
వారు వాగ్దానం చేసిన వాటిని నెరవేర్చడానికి,
మరియు వారు చేస్తారని నేను నిర్ధారించుకుంటాను.
డబ్బు సంపాదించడానికి cloud provider లేదా CSP
లేదా చేసిన వాగ్దానాలు, తగ్గుముఖం పడతాయి
serviceలను ఉపయోగించడానికి అవసరమైన computerలు మరియు ఇతర అంశాలు.
ఏ serviceతోనైనా ఇది ఒకటే -
provider మరియు customer ఉన్నారు.
మన రోజువారీ జీవితంలో, ప్రతి service ఉంది
provider మరియు customer మధ్య ఒక ఒప్పందం.
provider అందజేస్తానని వాగ్దానం చేశాడు
కానీ నేను serviceను ఉపయోగించినప్పుడు,
దీని లభ్యత 90%కి తగ్గవచ్చు.
అందుబాటులో ఉన్న వాటి ఆధారంగా వనరులు నిర్వహించబడతాయి.
provider ఆధారంగా Tierలను సెట్ చేస్తుంది
విభిన్న వనరులు మరియు వాటి లభ్యత.
అదనంగా, మేము వంటి problemల గురించి మాట్లాడుతాము
సమయానికి సంబంధించిన, నాణ్యత మరియు అనేక serviceా సంబంధిత problemలు
serviceా ఒప్పందాలలో.
cloud computing‌లో మరో పెద్ద అంశం
cloud ఆర్థిక వ్యవస్థ.
cloud computing‌ని ఉపయోగించడం ఎల్లప్పుడూ ఉత్తమమైనది కాదు,
కానీ తరచుగా, ఇది తెలివైనది.
ఇలా, మీరు రోజూ చాలా ప్రయాణం చేస్తే,
కారు కొనడం అర్ధమే.
కానీ ఒక చిన్న ట్రిప్ కోసం నెలకు ఒకసారి మాత్రమే అయితే,
కారు అద్దెకు తీసుకోవడం మరింత తెలివైనది.
కాబట్టి, వనరులను ఎప్పుడు అద్దెకు తీసుకోవాలి
లేదా వాటిని కొనండి
తీసుకోవాల్సిన నిర్ణయం.
ఆర్థిక model ఉందో లేదో మనం తెలుసుకోవాలి
వీటన్నింటినీ బ్యాకప్ చేయడానికి.
ఇది ఒక institutionకు ఆర్థికంగా తెలివైనదని నేను భావిస్తున్నాను
purchase కంటే వనరులను అద్దెకు తీసుకోవడానికి.
companyని ప్రారంభించేటప్పుడు,
వనరులను purchase చేయాలా లేదా అద్దెకు తీసుకోవాలా అని నిర్ణయించడం,
మరియు ఏ ఆర్థిక model ఉత్తమమైనది,
ముఖ్యమైనది.
ఇప్పుడు cloud ఎకానమీని పరిశీలిద్దాం.
cloud computing‌లో మరో పెద్ద విషయం
వనరులను నిర్వహిస్తోంది.
ఇది completely cloud provider యొక్క పని
వనరులను సరిగ్గా నిర్వహించడానికి.
serviceా ప్రదాతగా,
నేను ప్రతిదీ అందించాలనుకుంటున్నాను.
కాబట్టి, నేను విభిన్న వనరులను నిర్వహించాలి
వివిధ అవసరాలను తీర్చడానికి.
నా దగ్గర స్టేషనరీ దుకాణం ఉందని ఊహించుకోండి.
నేను పుస్తకాలు మరియు పెన్నులు వంటి వాటిని stack చేయాలి
విద్యార్థులకు మరియు అందరికీ.
ఎంత stack చేయాలో ఆలోచించాలి
మరియు ప్రాజెక్ట్.
నా దుకాణం చాలా ఖాళీగా ఉండటం లేదా చాలా నిండుగా ఉండటం నాకు ఇష్టం లేదు,
కాబట్టి నేను నా stack‌ను బాగా నిర్వహించాలి.
వనరులతో అతిగా వెళ్లవద్దు.
వనరుల నిర్వహణ కీలకం.
computing‌ను ఒక వనరుగా పరిగణించడం
అందంగా సంcomplexగా ఉంది.
computing‌ను వనరుగా అందిస్తున్నప్పుడు,
నిర్వహించడానికి చాలా విషయాలు ఉన్నాయి.
cloud వెలుపల ఏదైనా computing System‌లో,
మేము Processorల వంటి వాటి గురించి ఆలోచిస్తాము
లేదా CPU, మెమరీ (RAM), Hard Disk మరియు నెట్‌work connection‌లు.
కాబట్టి, వీటిలో మనం ఎంత stack చేస్తాము మరియు
నిర్వహించడానికి?
ప్రతి వనరుకు దాని స్వంత ఖర్చు ఉంటుంది.
నా దగ్గర టన్నుల కొద్దీ వనరులు ఉన్నా వాటి వల్ల ఉపయోగం లేకుంటే,
నేను ప్రాథమికంగా వాటి విలువ కంటే వాటిని చుట్టూ ఉంచడం కోసం ఎక్కువ చెల్లిస్తున్నాను.
కాబట్టి, వనరులను నిర్వహించడానికి సరైన మార్గాన్ని గుర్తించడం
నిజమైన సవాలు.
cloud computing‌లో వనరులను నిర్వహించడానికి మేము వివిధ మార్గాల్లోకి ప్రవేశిస్తాము.
cloud computing‌లోData మేనేజ్‌మెంట్ మరొక పెద్ద భాగం.
data చాలా ముఖ్యమైనది మరియు గమ్మత్తైనది.
మేముDataను ఎలా నిల్వ చేస్తాము మరియు భాగస్వామ్యం చేస్తాము
మరియు cloud‌లోData serviceలను అమలు చేయండి,
dataబేస్‌లు మరియుData నిల్వ వంటివి.
cloudData అవసరాల గురించి నేర్చుకోవడం ఒక ప్రత్యేక నైపుణ్యం.
ప్రక్రియను స్కేల్ చేసినప్పుడు నిర్వహణ ఎలా పని చేస్తుందో మేము చూస్తాము.
మేము రోజువారీ జీవితంలో వివిధ రకాల నిల్వలను ఎలా ఉపయోగించాలో నేర్చుకుంటాము,
data నిల్వ కోసం డ్రాప్‌బాక్స్ వంటిది.
మేము తెరవెనుక అంశాలను నిర్వహించడం గురించి నేర్చుకుంటాము,
మరియుData serviceలను నిర్మించడం.
మరియు మేముData modelలలోని problemలను అర్థం చేసుకోవడానికి ప్రయత్నిస్తాము.
data సమగ్రత మరొక కీలక విషయం.
మీData వేరే చోట నిల్వ చేయబడిందని ఊహించుకోండి.
మరియు వివిధ computing ప్రాంతాల security అంశాల గురించి ఆలోచించండి.
కాబట్టి, మౌలిక సదుపాయాలు,Data మరియు నిల్వను రక్షించడం చాలా కీలకం.
మీరు యాప్‌ని మళ్లీ చేయవచ్చని చాలామంది అంటున్నారు,
కానీDataను మళ్లీ చేస్తున్నారా? నిజంగా కాదు.
భారీ నివేదికపై పని చేయడం మరియు System క్రాష్ అవుతుందని ఊహించండి.
మీరు ఓడిపోతారు
data మరియు యాప్.
మీరు ఆపరేటింగ్ System మరియు వర్డ్ Processor‌ని తిరిగి పొందవచ్చు,
కానీ బ్యాకప్ లేకపోతేData పోయింది.
మీరు డెస్క్‌tap లేదా ల్యాప్‌tap‌ని ఉపయోగిస్తుంటే,
మీDataను బ్యాకప్ చేయడంData ఎంత ముఖ్యమో.
అదనపు కాపీలను ఉంచడం మరియు security కోసంDataను మరెక్కడా నిల్వ చేయడం
నష్టం లేదా ప్రమాదాల విషయంలో కీలకం.
appపుడు మీDataను ఎవరైనా access చేసే లేదా దొంగిలించే ప్రమాదం ఉంది.
data security అనేది పెద్ద విషయం.
గుర్తింపు మరియు access నిర్వహణ కూడా ముఖ్యమైనవి,
ముఖ్యంగా సహకారాలలో.
access నియంత్రణ, నమ్మకం మరియు కీర్తికి సంబంధించిన problemలు ఉన్నాయి.
access కంట్role ఎలా పని చేస్తుందో మేము పరిశీలిస్తాము,
standard mechanisms, లేదా role-బేస్డ్ మెథడ్స్.
security గురించి మాట్లాడుకుందాం.
మేము serviceా ప్రదాతను ఎంతవరకు విశ్వసిస్తాము?
మనం దేనిని ఎక్కువగా విశ్వసిస్తాము?
cloud Service providerలను (CSPలు) ఎలా మూల్యాంకనం చేయాలో మేము పరిశీలిస్తాము,
మరియు వారి కీర్తికి సంబంధించిన అంశాలు.
మేముData, యాప్‌లు మరియు consumerలకు సంబంధించిన రిస్క్‌లను కూడా విశ్లేషిస్తాము.
మేము consumerల కోసం cloud serviceలను purchase చేస్తున్నాము.
వీటిని secureగా ఉంచాలి.
కాబట్టి, నమ్మకం, కీర్తి మరియు ప్రమాదం ఒక త్రిభుజాన్ని ఏర్పరుస్తాయి.
ప్రతి భాగం మొత్తం వ్యవస్థ ఎంత సమర్థవంతంగా పనిచేస్తుందో ప్రభావితం చేస్తుంది.
cloud computing మరియు ఇతర రూపాల్లో ఇవి ఎలా ఆడతాయో చూద్దాం.
తరువాత, మేము కొన్ని ఉదాహరణలను పరిశీలిస్తాము
మరియు market‌లోని పెద్ద payర్లతో కూడిన మూలం మరియు cloud సిమ్యులేటర్ గురించి తెలుసుకోండి.
మేము వారి లక్షణాలను మరియు పనితీరును అర్థం చేసుకోవడానికి ప్రయత్నిస్తాము.
తరువాత, మాకు సమయం దొరికితే, మేము open source cloud‌లు మరియు సిమ్యులేటర్‌లను అన్వేషిస్తాము.
cloud computing యొక్క భవిష్యత్తును కొనసాగించడమే మా లక్ష్యం.
మేము cloud computing‌లో ప్రస్తుత ట్రెండ్‌లు మరియు ఆసక్తులను పరిశీలిస్తాము,
అండర్‌గ్రాడ్ లేదా post‌గ్రాడ్ స్థాయిలో ఉన్నవారికి.
మేము ఫాగ్ computing మరియు వివిధ సాంకేతికత వంటి విభిన్న అంశాలను పరిశీలిస్తాము.
ఈ కోర్సు వివిధ అంశాలను కవర్ చేస్తుంది,
మరియు మేము ఉపన్యాసాలలో స్పష్టమైన వివరణలు మరియు మరిన్ని వివరాలను అందిస్తాము.
కాబట్టి, ఈ cloud computing అవలోకనం ద్వారా ఫాస్ట్ ఫార్వార్డ్ చేద్దాం,
ట్రెండ్‌లు మరియు ఆవిష్కరణలను తనిఖీ చేస్తోంది.
మేము వీటిని లోతుగా విశ్లేషిస్తాము,
శాస్త్రీయ సమాజం మరియు ప్రజల అవసరాలతో సహా.
ఈ క్షేత్రం కొంతకాలంగా ప్రజాదరణ పొందింది,
మరియు ఇది నిరంతరం development చెందుతోంది.
మేము వివిధ మూలాధారాలు మరియు cloud-సంబంధిత అంశాలలోకి ప్రవేశిస్తాము.
computing‌తో ఏమైంది? ఇది కొత్త విషయం కాదు.
ఇది చుట్టూ ఉంది మరియు వివిధ మార్గాల్లో development చెందింది.
మేము కొంతకాలంగా వివిధ రకాల computing‌లను ఉపయోగిస్తున్నాము.
పంపిణీ చేయబడిన computing‌తో ప్రారంభించి, కొన్ని computing పద్ధతులను విచ్ఛిన్నం చేద్దాం.
ఆధునిక computing అంతా దీని నుండి వచ్చింది.
మాకు grid computing, cluster computing, utility computing వంటి అంశాలు ఉన్నాయి.
మరియు వాస్తవానికి, cloud computing.
ఈ రోజుల్లో, computing అన్ని రకాల అవసరాలకు సరిపోయేలా తయారు చేయబడింది.
దాని లాభాలు మరియు నష్టాలు ఉన్నాయి,
కానీ problemలను పరిష్కరించడానికి ఇది here ఉంది.
computing ప్రపంచంలో, కొన్ని ప్రాథమిక అంశాలు ఉన్నాయి.
ఇలా, పంపిణీ చేయబడిన computing కేంద్రీకృతంగా ఉండేది,
consumerల కోసం మెయిన్‌ఫ్రేమ్‌లు మరియు టెర్మినల్స్ వంటి విభిన్న System‌లతో.
ప్రజలు ఈ మెయిన్‌ఫ్రేమ్‌లకు ఉద్యోగాలను పంపుతారు, ఫలితాలను పొందుతారు మరియు అంతే.
ఇది ప్రధానంగా ఒకే Processor విషయం,
లేదా సెంట్రల్ computing. కానీ ఇప్పుడు,
ఇది ఒకే చోట కాదు; ఇది వివిధ ప్రదేశాలలో అవసరం.
computing‌లో మరొక భాగం పంపిణీ చేయబడిన computing.
ఇది భౌgoళికంగా విస్తరించి ఉంది,
వివిధ ఉపయోగాలు కోసం వివిధ వ్యవస్థలతో,
lab‌లో లేదా వివిధ ప్రదేశాలలో లాగా.
ఇది అన్ని అందుబాటులో ఉన్న వనరులపై ఆధారపడి ఉంటుంది.
సహకారం కోసం System‌లు ఎలా connect చేయబడ్డాయి అనేది here పెద్ద విషయం.
computer సైన్స్‌లో, ఈ పంపిణీ అధ్యాయం చాలా ఉపయోగకరంగా ఉంది.
ఇది System ప్రక్రియలను సమర్థవంతంగా నిర్వహించడం గురించి.
ఇతర వివరణలు కూడా ఉన్నాయి.
on‌లైన్‌లో చూస్తే..
distributed computing అంటే వాటి స్వంత మెమరీ ఉన్న Systems అని మీరు చూస్తారు,
Independentంగా పనిచేస్తున్నప్పటికీ నెట్‌work ద్వారా ఒకరితో ఒకరు మాట్లాడుకుంటున్నారు.
ప్రాథమిక ఆలోచన ఏమిటంటే ప్రతి Processor కమ్యూనికేట్ చేస్తుంది
మెమరీకి వివిధ లైన్ల ద్వారా,
కొన్ని హైస్పీడ్ బస్సుల ద్వారా.
పంపిణీ చేయబడిన computing ఉదాహరణలు internet వర్కింగ్, ATMలు, బ్యాంక్ మెషీన్లు,
వివిధ శాఖలు మరియు సహకార institutionలు వివిధ పనులు చేస్తున్నాయి.
మరియు భారతదేశంలో, intraనెట్/work గ్రూపులు కూడా ఉన్నాయి.
మనం ఇప్పటివరకు కవర్ చేసిన వాటిని పునశ్చరణ చేద్దాం.
సరే, సంభాషణను కొనసాగిద్దాం.
మేము ఈ అంశంతో మొదటి ఉపన్యాసాన్ని ముగించాము.
మేము వివిధ రకాల వ్యవస్థల గురించి మాట్లాడాము.
ప్రెజెంటేషన్‌లో మేము ఇప్పుడు ఈ భాగానికి చేరుకున్నామని ఊహిస్తే, ముందుగా, మనకు పంపిణీ చేయబడిన System‌లు కూడా ఎందుకు అవసరం? మనం చాట్ చేస్తున్నప్పుడు దానిలోకి ప్రవేశిద్దాం.
యాప్‌లు ఎలా పని చేస్తాయి మరియు పని చేస్తాయి అనేది ఒక ప్రధాన కారణం.
అర్థం, కొన్ని computing యాప్‌లుDataను connect చేయడం లేదా share చేయడం అవసరం కావచ్చు.
కాబట్టి, computing పనిని విస్తరించడం చాలా అవసరం.
మరొక విషయం ఏమిటంటే, మనం ఇంతకు ముందు మాట్లాడుకున్నట్లుగా వైఫల్యాలకు వ్యతిరేకంగా కఠినంగా ఉండటం.
ఒక భాగం క్షీణిస్తే, అది మొత్తం system తగ్గించదు.
ఒక భాగం గందరgoళానికి గురైతే నా యాప్‌ను ఆపకూడదు.
కొన్ని భాగాలు గొప్పగా పని చేయనప్పటికీ, System‌ను అమలు చేయడం లక్ష్యం.
అలాగే, ఇది కేంద్రీకృత వ్యవస్థల వలె పూర్తి వైఫల్యం కాదు, here ఒక వైఫల్యం ప్రతిదీ క్రాష్ చేస్తుంది.
కానీ పంపిణీ చేయబడిన computing‌లో, విషయాలు కొనసాగుతాయి.
అదనంగా, ఒక భాగం విఫలమైతే, ఇతర భాగాలు దాని పనిని చేపట్టవచ్చు.
అర్థం, ఒక భాగం పని చేయడం ఆపివేస్తే, మరొక భాగం దాని పనిని తీసుకోవచ్చు లేదా మనం దానిని భాగస్వామ్యం చేయగలము.
కాబట్టి, మేము ఈ రకమైన System కోసం ప్రత్యేక సాంకేతికత మరియు అల్గారిథమ్‌లను ఉపయోగిస్తాము.
దీని కోసం చాలా ఇతర applicationలు కూడా ఉన్నాయి.
పంపిణీ చేయబడిన application‌లు ఒక జట్టుగా ఒక సాధారణ problemను పరిష్కరించడానికి కలిసి నెట్‌work చేయబడిన computerల సమూహం లాంటివి.
ఒక విధంగా, ఇది ఒక నిర్దిష్ట problemను పరిష్కరించడానికి వివిధ application‌లను సమన్వయం చేయడం గురించి.
కాబట్టి, ఇది ఒక నిర్దిష్ట problemను పరిష్కరించడానికి వ్యక్తుల సమూహం వంటిది.
విస్తృత శ్రేణి కార్యాచరణ అవసరాలతో అధునాతన యాప్‌లకు ఇది నిజంగా ఉపయోగకరంగా ఉంటుంది.
ఇది విభిన్న కార్యకలాపాల కోసం విభిన్న serviceలను అందించడం, ప్రత్యేకమైన, సర్వతోముఖ ప్రక్రియను సృష్టించడం.
కాబట్టి, ఇది కేవలం ఒక computer మాత్రమే కాదు, ఎలిమెంట్స్ యొక్క మొత్తం బంచ్ మరియు దానితో ఎవరు ఉపయోగిస్తారో మరియు పని చేస్తారో పరిగణనలోకి తీసుకుంటారు.
విభిన్న దృక్కోణాలు ఉన్నాయి, కానీ పంపిణీ చేయబడిన computing ఈ రకమైన application‌లో కీలక పాత్ర పోషిస్తుంది.
ఈ application‌లలో చాలా వరకు client-server model‌ను ఉపయోగిస్తాయి, here server వనరులను నిర్వహిస్తుంది.
మేము దీనిని distributed System అని పిలుస్తున్నాము మరియు దానిని నిర్మించాలని లక్ష్యంగా పెట్టుకున్నాము.
here పీర్-టు-పీర్ computing అనేది పంపిణీ చేయబడిన computing‌లో విప్లవానికి నిజమైన ఉదాహరణ.
పంపిణీ చేయబడిన computing జనాదరణ పొందటానికి ఇవి కొన్ని కారణాలు.
ఇది తరచుగా వ్యక్తిగత consumerల కోసం అంకితమైన server‌లను ఉపయోగించడం.
consumerలు వారి కోసం ఏర్పాటు చేసిన server‌లను ఉపయోగించగలరు.
ఈ సెటప్‌లో, server మరొక server‌కు client‌గా పని చేస్తుంది మరియు అన్ని System‌లు client-server మార్గంలో పని చేస్తాయి.
ఇది ఇలా పనిచేస్తే, ప్రతి భాగం దాని application కోసం ప్రత్యేకంగా పని చేస్తుంది.
మేము సరళమైన, పీర్-ఆధారిత పంపిణీ చేయబడిన application ప్రాసెస్ గురించి మాట్లాడుతున్నాము.
ఈ System‌లో వివిధ రకాల పీర్‌లు మరియు application‌లు పని చేస్తాయి.
ఈ application‌లు నిర్దిష్ట పనుల కోసం సహకరిస్తాయి.
ఇదంతా పంపిణీ చేయబడిన computing దృశ్యంలో భాగం.
here మరొక పెద్ద విషయం grid computing.
grid computing‌కు అనేక నిర్వచనాలు ఉన్నాయి.
ఇది Communication కోసం కేవలం నెట్‌work కంటే ఎక్కువ.
అందుబాటులో ఉన్న అన్ని వనరులను ఉపయోగించి problemలను పరిష్కరించడానికి ఇది Independent వ్యవస్థలను లింక్ చేస్తుంది.
ఇది నిర్దిష్ట పనుల కోసం బలమైన, రూపొందించబడిన నెట్‌work‌ను సృష్టిస్తుంది.
మేము విద్యుత్ grid‌లను అమలు చేయడం గురించి మాట్లాడుతున్నాము మరియు వాటిని companyలు లేదా ఇళ్లలో ఎలా ఉపయోగిస్తున్నారు.
కాబట్టి, ఈ power System‌లు grid నుండి ఎలా డిస్‌connect అవుతాయో మేము చర్చిస్తున్నాము.
ఈ శక్తి ఎక్కడి నుండైనా అందుబాటులో ఉంది, సరియైనదా? computing‌లో, ఇది consumerలు లేదా client యాప్‌లు నిజంగా వివరాలు తెలియకుండా వనరులను ఉపయోగిస్తున్నట్లుగా ఉంటుంది.
వారు నేపథ్య అంశాలు తెలియకుండానే processing power లేదా storage వంటి computing వనరులను పొందవచ్చు.
ఇది computing grid నుండి వనరులను ఎంచుకోవడం మరియు ఉపయోగించడం గురించి.
మనకు ఏ అల్గారిథమ్‌లు మరియు పద్ధతులు కావాలి మరియు మనకు ఏ వనరులు అవసరం అనే దాని గురించి మనం ఆలోచించాలి.
మనకు ప్రత్యేకమైన computing grid ఉంటే, మన అవసరాలను బట్టి దానిని ఉపయోగించవచ్చు.
grid PCలు లేదా work‌స్టేషన్‌లు కావచ్చు మరియు మీరు ఈ వనరులను ఎలా access చేస్తారో ఇది నిర్వచిస్తుంది.
ఈ grid‌లోకి ప్రవేశించడానికి consumerలకు ఒక మార్గం కావాలి, సరియైనదా? grid computing అనేది సమాచారం కోసం మాత్రమే కాదు,Dataను ప్రభావవంతంగా ఉపయోగించడానికి చాలా institutionలకు.
computing lab‌లో, విద్యార్థులు ఉపయోగించనప్పుడు మనం వనరులను మెరుగ్గా ఉపయోగించుకోవచ్చు.
తరగతి సమయాల వెలుపల, lab యొక్క computing శక్తిని ఇతర పరిశోధనలకు ఉపయోగించవచ్చు.
మీ వద్ద 100 PCలు ఉన్నాయని ఊహించుకోండి.
మేము దానిని విభజించడానికి మిడిల్‌వేర్ అని పిలవబడేదాన్ని ఉపయోగించవచ్చు మరియు కింద ఏమి జరుగుతుందో గురించి చింతించకూడదు.
మా కార్యక్రమాలు విశ్వసనీయంగా నడుస్తాయి, ఇది మనకు అవసరం.
ఉపయోగించని వనరులను ఉపయోగించడానికి ఇది గొప్ప అవకాశం.
మీరు అక్కడ అన్ని రకాల స్థానిక communityల మిశ్రమాన్ని పొందుతారు.
జీవశాస్త్రం, కళలు, జన్యుశాస్త్రం మరియు మరిన్నింటి కోసం వివిధ రకాల వ్యవస్థలు ఉపయోగించబడతాయి.
వీటికి కేవలం computing power కంటే ఎక్కువ అవసరం; ప్రాథమిక ప్రక్రియలు కూడా ముఖ్యమైనవి.
ఈ వనరులన్నింటినీ మనమే purchase చేసి నిర్వహించాలని కోరుకోవడం లేదు.
ఈ విభాగాలు యూజర్ ఫ్రెండ్లీ మార్గంలో కలిసి పని చేయాలి.
consumerగా, మేము కేవలం ఇంటర్‌ఫేస్‌తో వ్యవహరిస్తాము మరియు మిగిలిన వాటి గురించి చింతించము.
మనం ఉపయోగించే వాటికి మనం చెల్లించవచ్చు, కానీ అన్నింటినీ ఎలా నిర్వహించాలో మనం తెలుసుకోవలసిన అవసరం లేదు.
grid computing చాలా ముఖ్యమైనది.
శాస్త్రీయ పరిశోధనలో ఇది చాలా పెద్దది, ముఖ్యంగాData విశ్లేషణ మరియు సహకారం కోసం.
computer అనుకరణలు మరియు మోడలింగ్ మరొక పెద్ద ఉపయోగం.
data విజువలైజేషన్ కీలక అంశంగా మారుతోంది.
మాకు
ఉపయోగించని వనరులు ఒక పెద్ద ప్రేరణ.
మాకు చాలా వనరులు ఉపయోగించబడలేదు.
  వాటిని పనిలో పెట్టుకుందాం.
ఈ విధంగా మేము cloud computing వైపు తదుపరి అడుగు వేస్తున్నాము.
grid‌ను ఎవరు ఉపయోగిస్తున్నారు? సరే, ఫిజిక్స్, వెదర్ సైన్స్, మెటీreal సైన్స్ మరియు మరిన్ని ఉన్నాయి.
వివిధ రకాల grid‌లు ఉన్నాయి.
ఒకటి కంప్యూటేషనల్ grid, ఎక్కువగా computing పనులకు ఉపయోగించబడుతుంది.
మరొకటిData నిల్వ కోసం.
ఆపై మెరుగైన System టీమ్‌work కోసం సహకార grid ఉంది.
నెట్‌work grid‌లు మరియు ఇతరాలు కూడా ఉన్నాయి.
ఈ grid‌లు అధిక పనితీరును అందిస్తాయి మరియు లోపాలను చక్కగా నిర్వహించగలవు.
utility grid‌లుData, computing power, సాఫ్ట్‌వేర్ మరియు ఇతర వనరులను పంచుకుంటాయి.
utility grid హబ్ లాగా పనిచేస్తుంది, వివిధ విభాగాలు దీనిని ఉపయోగిస్తాయి.
కొందరు నిర్దిష్ట పనుల కోసం grid‌ను ఉపయోగిస్తారు, మరికొందరు సమూహ కార్యకలాపాల కోసం ఉపయోగిస్తారు.
ఇది వివిధ site‌లలో వనరుల స్థానాలను చూపుతుంది.
విధాన నిర్వహణ మరియు ఏమి భాగస్వామ్యం చేయాలో నిర్ణయించడం గురించి కూడా అంశాలు ఉన్నాయి.
ఇప్పుడు computing‌లో మరో పెద్ద విషయం cluster computing.
కాబట్టి, cluster అంటే ఏమిటి? ఇది ఒక టాస్క్‌లో కలిసి పని చేసే computerల సమూహం.
ఇవి PCలు, work‌స్టేషన్‌లు లేదా అధిక-పనితీరు గల System‌లు కావచ్చు.
computing‌లో cluster‌ల గురించి మాట్లాడుతూ, అవి ఇంటర్‌connection‌లు, మిడిల్‌వేర్ మరియు సమాంతర ప్రోగ్రామింగ్ System‌ల వంటి విభిన్న భాగాలను కలిగి ఉంటాయి.
ఇవన్నీ cluster computing‌ను తయారు చేస్తాయి.
cluster‌లు వేగం మరియు reliabilityకు సంబంధించినవి, సాధారణ LAN కంటే ఎక్కువ అందిస్తాయి.
అవి వేగంగా ఉంటాయి, తక్కువ జాప్యాన్ని కలిగి ఉంటాయి మరియు వదులుగా connect చేయబడ్డాయి.
వివిధ రకాల clusterNodeస్ ఉన్నాయి.
ముందుగా, అధిక లభ్యత లేదా ఫెయిల్‌ఓవర్ cluster ఉంది, ఏదైనా విఫలమైనNode‌ను బ్యాకప్ చేయడానికి సిద్ధంగా ఉంది.
appపుడు, load బ్యాలెన్సింగ్ cluster, పనిని సమానంగా వ్యాప్తి చేస్తుంది.
మరియు సమాంతర పనుల కోసం సమాంతర/పంపిణీ చేయబడిన processing cluster.
ఒక సాధారణ cluster‌లో వివిధNode‌లు మరియు వాటిని connect చేసే నెట్‌work‌లు ఉంటాయి.
cluster‌లకు System లభ్యత, తప్పును తట్టుకోవడం మరియు scalability వంటి అనేక ప్రయోజనాలు ఉన్నాయి.
మేము cluster‌లోని OS మరియు application‌ల నుండి reliability మరియు అధిక పనితీరు కోసం చూస్తాము.
సాధారణంగా, cluster అంటే మెరుగైన పనితీరు.
మేము పంపిణీ చేయబడిన computing, grid‌లు మరియు cluster‌ల గురించి అన్నింటినీ నేర్చుకుంటున్నాము.
ఇవన్నీ utility computing భావనకు దారితీస్తాయి.
utility computing అంటే వనరులను కలిగి ఉండటం మరియు షాపింగ్ లేదా టిక్కెట్లను బుకింగ్ చేయడం వంటి అవసరమైన వాటిని పొందడం.
ఇది మనకు అవసరమైన వాటి కోసం ఇంటర్‌ఫేస్ లేదా మధ్యవర్తిని కలిగి ఉండటం గురించి.
వివరాల గురించి చింతించకుండా plumbing కోసం utility కార్యాలయానికి call చేయడం వంటివి.
consumerలుగా, మేము నిర్వహణ గురించి చింతించకుండా వనరులు అందుబాటులో ఉన్నాయో లేదో తనిఖీ చేస్తాము.
cloud computing‌కు utility computing ఒక model.
ఇది service ప్రదాతలు మరియు consumerల గురించి, వినియోగం ఆధారంగా ఖర్చులు.
ఈ సందర్భంలో utility అనేది మనం విద్యుత్తును ఎలా ఉపయోగిస్తామో అదే విధంగా ఉంటుంది.
ఖర్చులు 'మీరు వెళ్లినప్పుడు చెల్లించండి' model వంటి వినియోగంపై ఆధారపడి ఉంటాయి.
meter రీడింగుల ఆధారంగా మనం విద్యుత్తు కోసం ఎలా చెల్లిస్తామో ఆలోచించండి.
విద్యుత్తు ఎలా ఉత్పత్తి అవుతుందనే దాని గురించి మేము చింతించము, కేవలం meter రీడింగ్‌లు.
mobile serviceలు వంటి టెలికాం serviceలు కూడా అలాగే పని చేస్తాయి.
మేము provider గురించి పట్టించుకోకుండా మనకు అవసరమైన వాటిని, post‌పెయిడ్ లేదా prepaid కోసం ఉపయోగిస్తాము మరియు చెల్లిస్తాము.
మేము call‌లు, మెసేజింగ్ లేదాData వంటి మా అవసరాల ఆధారంగా serviceలను ఎంచుకుంటాము.
ఇది utility Service, meter మరియు pay-యస్-యు-go model.
ఒక రోజు, utility completely computing‌గా రూపాంతరం చెందుతుంది.
కాబట్టి, distributed computing నుండి grid‌లు, cluster‌లు మరియు cloud‌కి అన్నీ connect చేయబడ్డాయి.
ఇది వివిధ IT వనరులతో సహా మంచి policy.
మేము ట్యాప్‌ను తెరవడం మరియు మూసివేయడం వంటి వనరులను అవసరమైన విధంగా ఉపయోగిస్తాము.
utility computing‌లో అదనపు నిల్వ సామర్థ్యం వంటి Virtualization కూడా ఉంటుంది.
మేము అlimited computing, నెట్‌వర్కింగ్ మరియు application‌ల వంటి భారీ computing వనరులను చూస్తున్నాము.
ఇది విద్యుత్ సరఫరా లాంటిది, here మనకు అవసరమైన వాటిని నిర్దిష్ట limitedుల్లో ఉపయోగిస్తాము.
మేము ఈ వనరులను virtual‌గా అlimitedంగా భావిస్తాము మరియు తదనుగుణంగా ఎంచుకుంటాము.
మేము ఎంచుకున్న మరియు ఉపయోగించే వనరులకు మేము చెల్లిస్తాము.
computing లేదా టెలికామ్‌లో, down‌load చేసేటప్పుడు మనకు అవసరమైన బ్యాండ్‌విడ్త్ అందుబాటులో ఉండాలని మేము ఆశిస్తున్నాము.
చిన్న ఫైల్ అయినా, పెద్ద ఫైల్ అయినా, మన అవసరాలు మరియు వినియోగాన్ని బట్టి మేము చెల్లిస్తాము.
utility computing అనేది మనం ఉపయోగించే మౌలిక సదుపాయాలు మరియు computing వనరులకు చెల్లించడం.
ఇది హార్డ్‌వేర్ నుండి ప్రత్యేకమైనData నిల్వ లేదా అనుకరణ సాధనాల వరకు ఏదైనా కావచ్చు.
మనం ఎంత ఎక్కువగా ఉపయోగిస్తే అంత ఎక్కువ చెల్లిస్తాం.
ఇది పెద్ద మొత్తంలో వనరులను నిల్వ చేయడం లాంటిది.
ఇది power grid‌ల మాదిరిగానే Tierల modelను ఉపయోగిస్తుంది.
data Center Virtualization మనకు దగ్గరగా ఉన్న వనరులను ఉపయోగించడానికి అనుమతిస్తుంది.
నిర్దిష్ట పనుల కోసం నిర్దిష్ట RAM మరియు Hard Disk సామర్థ్యంతో కూడిన System‌ను మనం అనుకరించవచ్చు.
వేర్వేరు consumerలు అందుబాటులో ఉన్న మొత్తం నుండి వివిధ వనరులను వర్చువలైజ్ చేయవచ్చు.
ఇది మనకు పుష్కలంగా ఉంటే వనరుల వినియోగ problemను విచ్ఛిన్నం చేస్తుంది.
సాఫ్ట్‌వేర్ నిర్వహణ లేదాData నిల్వ వంటి పనులను మేము అవుట్‌source చేయవచ్చు.
మేము serviceలపై మరింత దృష్టి సారిస్తూ,Data ఆధారితం నుండి serviceా ఆధారిత architecture‌కి మార్చాము.
utility computing‌లో వినియోగం మరియు Automation కీలకం.
వివిధ వనరులతో, మేము పని ప్రక్రియలను Automate చేయవచ్చు.
on-డిమాండ్ Cyber in‌ఫ్రాస్ట్రక్చర్ అనేది పరీక్షలు లేదా సమావేశాల వంటి మరొక అంశం.
మనకు కావాల్సిన మౌలిక సదుపాయాలు కల్పించి, తదనుగుణంగా చెల్లించవచ్చు.
utility computing‌లో provider మరియు consumer వేర్వేరు అవసరాలు మరియు modelలను కలిగి ఉంటారు.
Tier ప్రధాన అంశం; మేము Tier ఆధారంగా providerలను ఎంచుకుంటాము 
మరియు service నాణ్యత.
కొందరుData serviceలకు ప్రాధాన్యత ఇస్తారు, మరికొందరు మెసేజింగ్ మరియు call‌లపై దృష్టి పెడతారు.
serviceా స్థాయి ఒప్పందాలు వనరుల లభ్యత మరియు securityను వివరిస్తాయి.
security చాలా ముఖ్యం, మాData సరిగ్గా access చేయబడదని నిర్ధారించుకోవడం.
వివిధ యాప్‌లు ఎంతDataను హ్యాండిల్ చేస్తున్నాయో విశ్లేషించడం ద్వారా application sizing అవసరం.
కాబట్టి, మనకు ఎల్లప్పుడూ పెద్ద application అవసరం లేదు, కానీ మన అవసరాలకు అనుగుణంగా దాన్ని size చేసుకోవాలి.
వివిధ రకాల charge modelలు ఉన్నాయి.
వీటిలో flat rateలు, tiered pricing ఉన్నాయి మరియు అవి స్కేల్, నిబద్ధత మరియు charge frequencyలో మారుతూ ఉంటాయి.
consumerలకు వేర్వేరు Tier modelలు ఉన్నాయి.
utility computing‌లో కీలకమైన భాగం pricing model, ఇది providerలచే సెట్ చేయబడుతుంది.
ఎంత వనరులు కేటాయించాలో వారే నిర్ణయిస్తారు.
data బ్యాకప్ problemల వంటి ప్రమాదాలు ఉన్నాయి.
data నష్టపోయే ప్రమాదం ఎప్పుడూ ఉంటుంది మరియు థర్డ్-party provider వ్యాపారం నుండి బయటపడితే ఏమి జరుగుతుంది? ముఖ్యంగా institutionల మధ్య పోటీ ఉన్నప్పుడుData security చాలా కీలకం.
మరో పెద్ద problem serviceా స్థాయి ఒప్పందాన్ని (SLA) నిర్వచించడం.
ఈ ఒప్పందాలను నిర్వచించడానికి ప్రామాణిక మార్గం లేదు మరియు అవి విఫలమైతే, ఫీజులు ఎలా రికవరీ చేయబడతాయో asపష్టంగా ఉంది.
ఈ అంశాలన్నీ cloud computing పరిణామానికి దోహదం చేస్తాయి.
cloud computing, NIST ద్వారా నిర్వచించబడినది, కనిష్ట నిర్వహణతో సులభంగా అందుబాటులో ఉండే విస్తృత శ్రేణి computing వనరులను కలిగి ఉంటుంది.
ఇది భారీ వనరులను సులభంగా మరియు తక్కువ నిర్వహణతో ఉపయోగించడం గురించి.
computing‌పై మన అవగాహన అకస్మాత్తుగా కనిపించలేదు; ఇది వివిధ కారకాల నుండి ఉద్భవించింది.
మేము వివిధ కోణాల నుండి computing‌ని చూస్తున్నాము మరియు దానిని సులభతరం చేయడానికి ప్రయత్నిస్తున్నాము.
ఇది Tier modelలు, SLA modelలు మరియు security నిర్వహణను పరిగణనలోకి తీసుకుంటుంది.
మేము వివిధ అంశాలను దృష్టిలో ఉంచుకుని computing‌ను ఒక serviceగా అందించాలని లక్ష్యంగా పెట్టుకున్నాము.
మేము నేటి చర్చను ముగించాము మరియు భవిష్యత్ ఉపన్యాసాలలో ఇతర అంశాలతో కొనసాగిస్తాము.
మేము అన్ని మార్గదర్శకాలను దృష్టిలో ఉంచుకుని మా గణాంకాలు మరియు సామగ్రి కోసం వివిధ మూలాధారాలను ఉపయోగించాము.
ఇది విద్యా ప్రయోజనాల కోసం, వాణిజ్యపరమైన ఉపయోగం కాదు.
రాబోయే ఉపన్యాసాలలో, మేము cloud computing యొక్క ఇతర అంశాలను, దాని ప్రయోజనాలు మరియు లోపాలను అన్వేషిస్తాము.
ఈ చర్చలో చేరినందుకు ధన్యవాదాలు.
హే, ముందుగా, మేము here cloud computing గురించి మాట్లాడుతున్నాము.
మేము ప్రాథమిక అంశాలతో ప్రారంభించి, ఆపై మరిన్ని వివరాలలోకి ప్రవేశిస్తాము.
చివరి తరగతి, మేము cloud computing‌పై NIST యొక్క టేక్ గురించి మాట్లాడాము.
cloud computing ప్రతిచోటా ఉంది, ఉపయోగించడానికి సులభమైనది మరియు అవసరమైన విధంగా మార్పులు.
ఇది మేము పంచుకోగల computer వనరుల సమూహాన్ని కలిగి ఉంది.
కాబట్టి, ఇది త్వరగా సెటప్ అవుతుంది.
మీకు అవసరమైనప్పుడు మీరు దానిని పట్టుకోవచ్చు మరియు మీకు కావలసినప్పుడు సులభంగా వదిలివేయవచ్చు.
ఇలా, మీరు customer అయితే లేదా serviceను ఉపయోగిస్తున్నట్లయితే, మీకు అవసరమైనప్పుడు మీరు మరిన్ని పొందవచ్చు మరియు మీకు అవసరమైనప్పుడు ఆపివేయవచ్చు.
cloud computing ఫీచర్లను పరిశీలిస్తే, మేము ఇప్పటికే కొన్నింటిని చూశాము.
మనకు కావలసింది on డిమాండ్ సెల్ఫ్ Service.
ఇది మీకు కావలసినప్పుడు, మీ స్వంతంగా ఉపయోగించగల service.
అలాగే, బ్రాడ్ నెట్‌work access చాలా ముఖ్యం.
దీని అర్థం మనకు మంచి నెట్‌work access అవసరం.
వనరులు వేర్వేరు ప్రదేశాలలో విస్తరించి ఉన్నందున, అవి మన కోసం కలిసి వచ్చాయి.
మరొక ముఖ్య విషయం ఏమిటంటే వనరులను పూలింగ్ చేయడం, అంటే వనరులు కేవలం నా అవసరాల కోసం ఏర్పాటు చేయబడ్డాయి.
అవి మనకు భౌతిక మరియు virtual వనరులను భాగస్వామ్య మార్గంలో అందిస్తాయి.
ఒక Service provider వనరులను ఒక consumer నుండి అనేక మందికి మార్చవచ్చు.
నేను ఒకే service నుండి Linux లేదా Ubuntu వంటి విభిన్న హార్డ్‌వేర్ లేదా సాఫ్ట్‌వేర్‌లను కోరుకోవచ్చు.
కాబట్టి, వనరులను నిర్వహించడం మరియు భర్తీ చేయడం చాలా పెద్ద విషయం.
ఇతర ఫీచర్‌లలో మెజర్డ్ Service కూడా ఉంటుంది, ఇది మీరు ఉపయోగించే వాటికి మాత్రమే చెల్లించడం లాంటిది.
ఇది మీరు ఉపయోగిస్తున్న వాటిని ట్రాక్ చేయడం గురించి.
వేగవంతమైన స్థితిస్థాపకత కూడా కీలకం, అంటే మీరు వేగంగా పైకి లేదా క్రిందికి స్కేల్ చేయవచ్చు.
నేను 4 GB RAM ఉన్న యాప్‌ని ఉపయోగిస్తున్నానని చెప్పండి కానీ ఇంకా ఎక్కువ కావాలి, నేను దానిని 8 GB వరకు పెంచగలను.
నేను వనరులను త్వరగా జోడించగలగాలి.
అవసరమైన విధంగా వనరులను మార్చగలగడం cloud యొక్క ముఖ్య లక్షణం.
cloud computing తరచుగా భారీ స్థాయి మరియు స్థితిస్థాపకత వంటి సాధారణ లక్షణాలను అందిస్తుంది.
నాకు ఎల్లప్పుడూ వైవిధ్యమైన వనరులు అవసరం లేదు, నాకు అవసరమైనది మాత్రమే.
సాధారణంగా, వనరులు వివిధ ప్రాంతాలలో విస్తరించి ఉంటాయి.
Virtualization మరియు Service ఓరియంటేషన్ ప్రధాన కారకాలు.
serviceలు పరస్పరం అనుసంధానించబడి ఉన్నాయి.
serviceా ఆధారిత నిర్మాణంలో, మేము దీని గురించి మరింత చూస్తాము.
Service provider, consumer మరియు serviceల రిజిస్ట్రీ, ఫోన్ డైరెక్టరీ లాంటివి ఉన్నాయి.
మేము మొదట ఏ serviceలు అందుబాటులో ఉన్నాయో కనుగొంటాము.
ఇది ఫోన్ book‌లో హోమ్ డెలివరీ serviceల కోసం వెతకడం లాంటిది.
మేము serviceల గురించి తెలుసుకుంటాము మరియు వారి సంప్రదింపు సమాచారం ద్వారా connect చేస్తాము.
కాబట్టి, Service providerలు మరియు customerలను connect చేసే కేటలాగ్ లేదా రిజిస్ట్రీ ఉంది.
ఈ serviceా ఆధారిత సెటప్ గురించి మరింత అన్వేషిద్దాం.
cloud computing‌లో Service-ఓరియెంటెడ్ architecture ప్రధాన భాగం.
ఇందులో తక్కువ ఖర్చుతో కూడిన సాఫ్ట్‌వేర్ కూడా ఉంటుంది.
ఈ రకమైన సాఫ్ట్‌వేర్ consumerలకు ఖర్చులను తగ్గిస్తుంది మరియు మెరుగైన securityను అందిస్తుంది.
వివిధ security problemలు ఉన్నాయి, కానీ మేము స్థిరమైన securityను ఆశిస్తున్నాము.
security అనేదిDataను రక్షించడం మాత్రమే కాదు, cloud‌లో దాన్ని కోల్పోకుండా ఉండటం కూడా.
data నా System‌లో ఉంటే, దాన్ని secureగా ఉంచడం నా పని.
ఉదాహరణకు, cloud మెయిల్ యాప్‌ని చూద్దాం.
నాకు నా స్వంత మెయిల్ server ఉంటే, దానిని నిర్వహించడం నా ఇష్టం.
పరిగణించవలసిన విభిన్న కోణాలు ఉన్నాయి.
dataను రక్షించడం లేదా దాడులను నిరోధించడం కోసం, అధునాతన security ఫీచర్‌లు అందించబడ్డాయి.
తదుపరిసారి, మేము మరింత వివరంగా వివిధ cloud Service model‌లలోకి వెళ్తాము.
మేము మొదట సాఫ్ట్‌వేర్‌ను serviceగా చూశాము.
ఇది cloud‌లోని consumerలను వివిధ application‌లను ఉపయోగించడానికి అనుమతిస్తుంది.
ఈ రోజుల్లో, మేము వర్డ్ processing వంటి అన్ని రకాల వాటిని ఉపయోగిస్తున్నాము.
మీరు internet‌లో ఉపయోగించే స్ప్రెడ్‌షీట్‌లు మరియు ఇతర విషయాల గురించి మాట్లాడుతున్నారు.
అంటే మనం ఉపయోగించే యాప్‌లు ఎక్కడో cloud‌లో ఉన్నాయి.
నాData నా computer‌లో ఉంటుంది లేదా అదే సమయంలో Service provider వద్ద నిల్వ చేయబడుతుంది.
కాబట్టి, ప్రాథమికంగా, మనకు కొన్ని external cloud‌తో పరస్పర చర్య చేయడానికి ఒక మార్గం అవసరం.
మరియు ఇప్పుడు, మేము దానిని సాఫ్ట్‌వేర్ serviceగా పొందవచ్చు.
సాఫ్ట్‌వేర్‌ను System లేదా ఏదైనా ప్లాట్‌ఫారమ్‌లో అమలు చేయాలి మరియు కంపైల్ చేయాలి.
ఒక consumerగా, నేను దానితో కూల్‌గా ఉన్నాను మరియు నేను ప్రస్తావించదలిచినది అదే.
ప్రాథమికంగా, మొజిల్లా, internet ఎక్స్‌ప్లోరర్, క్రోమ్ వంటి System‌ను ఉపయోగించడానికి, మీకు Web బ్రౌజర్ ఇంటర్‌ఫేస్ అవసరం.
నేను సాఫ్ట్‌వేర్‌ని ఉపయోగిస్తాను మరియు వర్డ్ processing వంటి అంశాలను తెలుసుకోవాలి.
కానీ అది సైంటిఫిక్ సిమ్యులేషన్ లేదా టెక్స్ట్ processing కావచ్చు లేదా గణిత యాప్ లాంటిదే కావచ్చు.
ఇది ఒక service వలె సాఫ్ట్‌వేర్, here మేము cloud నుండి సాఫ్ట్‌వేర్‌ను పొందుతాము.
మరొక విషయం ఒక serviceగా మౌలిక సదుపాయాలు; అంటే, నేను నా స్వంత మౌలిక సదుపాయాలను క్రమబద్ధీకరించుకోవాలి.
ఇది ఒక service వలె in‌ఫ్రాస్ట్రక్చర్, here నా డెస్క్‌లోని మొత్తం System గురించి నాకు తెలుసు.
ఈ రోజు నాకు 4GB RAM అవసరం కావచ్చు, రేపు అది ఒక పనికి 64GB మరియు మరొక రోజు కేవలం 2GB మాత్రమే.
కాబట్టి, నా అవసరాలు ఎల్లప్పుడూ మారుతూ ఉంటాయి మరియు దాని కోసం నేను ఈ in‌ఫ్రాస్ట్రక్చర్ Service provider‌లపై ఆధారపడతాను.
వీటి మధ్య, సాఫ్ట్‌వేర్ serviceగా మరియు అవస్థాపనగా, ఒక serviceగా ప్లాట్‌ఫారమ్ ఉంది.
కాబట్టి, ఇది development కార్యకలాపాలకు వేదికను ఇస్తుంది.
సాఫ్ట్‌వేర్ మరియు in‌ఫ్రాస్ట్రక్చర్ అవసరం కాకుండా, నేను OSని in‌ఫ్రాస్ట్రక్చర్‌తో load చేస్తాను మరియు ఇతర యాప్‌లను పరీక్షిస్తాను.
దీని కోసం, నాకు ప్లాట్‌ఫారమ్ Service provider నుండి ఒక serviceగా అవసరం, నన్ను ప్లాట్‌ఫారమ్‌గా ఉపయోగించడానికి అనుమతిస్తుంది.
ఇవి మూడు ప్రసిద్ధ cloud serviceలు, కానీDataను నిల్వ చేసే serviceగాData వంటి ఇతర modelలు కూడా ఉన్నాయి.
వీటన్నింటికీ దిగువన ప్రాథమిక మౌలిక సదుపాయాలు, ప్లాట్‌ఫారమ్ serviceగా మరియు సాఫ్ట్‌వేర్ serviceగా ఉన్నాయి.
virtual మెషీన్ ప్రాథమికమైనది మరియు విభిన్నంగా ఉండవచ్చు
ప్రాథమిక సౌకర్యాల రకాలు.
serverలు, నిల్వ, load బ్యాలెన్సర్‌లు, నెట్‌work‌లు - ఇవి వివిధ రకాల మౌలిక సదుపాయాలు.
నాకు external పరికరాలు మరియు రేఖాచిత్రం చేయగల ఇతర అంశాలు వంటి మౌలిక సదుపాయాలు ఉన్నాయి.
పైన మేము ప్లాట్‌ఫారమ్‌ని రన్‌time,Dataబేస్, Web server మరియు డెవలప్‌మెంట్ టూల్స్‌తో స్టేజ్‌గా చూస్తాము.
డెవలప్‌మెంట్ ప్లాట్‌ఫారమ్ ఒక రకమైన శాండ్‌బాక్స్ వాతావరణం.
కాబట్టి, ఇది serviceగా ఒక ప్లాట్‌ఫారమ్‌గా ఉంటుంది, ఆపై CRM, ఇమెయిల్, virtual డెస్క్‌tap‌లు మరియు గేమ్‌లు వంటి సాఫ్ట్‌వేర్‌లు ఉన్నాయి.
సాఫ్ట్‌వేర్‌ను serviceగా అర్థం చేసుకోవడంలో cloud in‌ఫ్రాస్ట్రక్చర్ మరియు దాని పైన పనిచేసే అంశాలు ఉంటాయి.
ఇప్పుడు, ఎలా మరియు ఎక్కడ? ఈ భాగం ఎక్కువగా cloud provider‌పై ఆధారపడి ఉంటుంది.
కొంతమంది provider‌లు IaaS, మరికొందరు PaaS లేదా SaaS మరియు మరికొందరు మిక్స్‌ను అందించవచ్చు.
client దృక్కోణం నుండి, వారు దానిని ఎలా access చేస్తారు?
Web బ్రౌజర్, Web client లేదా mobile యాప్‌లు, థిన్ clientు, టెర్మినల్ ఎమ్యులేటర్‌ల వంటి ఇతర మార్గాల ద్వారా ఉత్తమమైన లేదా సార్వత్రిక మార్గం.
కాబట్టి, client వీటి ద్వారా cloud‌తో ఇంటర్‌ఫేస్ చేస్తుంది.
వివిధ రకాల cloud model‌లను చూద్దాం. మొదట, వ్యక్తిగత companyల కోసం private cloud ఉంది.
appపుడు వివిధ institutionలు ఉపయోగించే నిర్దిష్ట ప్రయోజనాల కోసం community cloud.
తర్వాత, Google డాక్స్ వంటి ఎవరైనా ఉపయోగించగల public cloud.
చివరగా, hybrid cloud రెండు లేదా అంతకంటే ఎక్కువ మేఘాలను మిళితం చేస్తుంది.
cloud మరియు Virtualization ఒకదానితో ఒకటి కలిసి వెళ్తాయి మరియు మేము దానిని Virtualization stack అని పిలుస్తాము.
ముగింపులో, బేర్ మెటల్ హార్డ్‌వేర్ ఉంటే, నేను విభిన్న virtual ఆబ్జెక్ట్‌లను సృష్టించగలను.
కాబట్టి, మాకు విభిన్న హార్డ్‌వేర్ మరియు నెట్‌work‌లు ఉన్నాయి మరియు నా అంతిమ లక్ష్యం Windows లేదా Linuxలో 16GB virtual మెషీన్‌ను అమలు చేయడం.
కాబట్టి, నేను 64GB RAMతో కూడిన మెషీన్‌ని పొందాను మరియు అది విభిన్న virtual mission‌లను ఉపయోగిస్తోంది.
నేను దీన్ని VMM లేదా హైపర్‌వైజర్‌ని ఉపయోగించి సృష్టించే virtual missionలు అని పిలుస్తాను.
ఈ హైపర్‌వైజర్ విషయం నన్ను వివిధ రకాల మెషీన్‌లను అనుకరించేలా చేస్తుంది.
మనం రియాలిటీగా మాట్లాడుతున్నట్లయితే, నేను కోరుకున్నది చేయగలను లేదా కలలు కనవచ్చు.
cloud మరియు Virtualization‌లో, ఈ virtual work‌స్payస్‌లు ఉన్నాయి.
virtual work‌స్payస్ అనేది కొన్ని ప్రోటోcall‌ని ఉపయోగించి సెటప్ చేయబడిన అధికారిక స్థలం లాంటిది మరియు ప్రతి client కోసం మార్చవచ్చు.
నా ప్రాజెక్ట్‌ల కోసం డెవలప్‌మెంట్ లేదా computing ఎన్విరాన్‌మెంట్‌ల వంటి విభిన్న వాతావరణాలు నాకు అవసరం.
మరియు ఇవి ప్రాజెక్ట్ కోసం డైనమిక్‌గా మారవచ్చు.
భౌతికంగా సెటప్ చేయడానికి చాలా ఖరీదైన 14-రోజుల ప్రాజెక్ట్ ఉండవచ్చు, కానీ నేను దీన్ని virtual‌గా చేయగలను.
నేను అన్నింటినీ purchase చేయకుండానే నాకు అవసరమైన వాటిని పొందడానికి public cloud‌ని ఉపయోగించగలను.
virtual missionలు వివిధ రకాలుగా ఉంటాయి; తరగతి తర్వాత, కొత్త రకం ఉండవచ్చు.
ఇలా, మేము మేఘాలయలో ఉపయోగించే virtual missionల గురించి మూడు విభాగాలలో మాట్లాడుతాము.
ఈ యంత్రాలు విభిన్న లభ్యతను కలిగి ఉంటాయి మరియు అవస్థాపన API మరియు హార్డ్‌వేర్ మద్దతుతో వస్తాయి.
వారు వివిధ మౌలిక సదుపాయాలకు connect చేయడానికి APIని అందిస్తారు.
మేము విజువలైజేషన్‌లో విభిన్న అంశాలను చూడబోతున్నాము.
తదుపరి ఉపన్యాసాలలో మరిన్ని చూద్దాం.
virtual machine టెక్ అనేది ఒకే భౌతిక వాటిపై బహుళ virtual mission‌లను ఉంచడానికి అనుమతిస్తుంది.
కాబట్టి, ఇది కేవలం ఒక యంత్రం కాదు; నేను రెండు 4GB System‌లను లేదా మొత్తంగా 40GBని కలిగి ఉండగలను.
మీరు ఈ 40GBని రెండు 16GB భాగాలుగా ఎలా విభజించవచ్చనే దాని గురించి కొన్ని నియమాలు ఉన్నాయి.
హార్డ్‌వేర్‌ను అనుకరించడానికి మరియు విభిన్న virtual mission‌లు మరియు అతిథి OSలను అమలు చేయడానికి మాకు virtual మెషీన్ మానిటర్ అవసరం.
అతిథి OS Linux లేదా మరేదైనా కావచ్చు మరియు అవి వేర్వేరు అనువర్తనాలను అమలు చేస్తాయి.
ప్రపంచవ్యాప్తంగా ఉన్న ఎవరైనా ఈ virtual missionలను ఉపయోగించవచ్చు.
ఈ యంత్రాలు వ్యక్తిగత consumerల కోసం రూపొందించబడ్డాయి.
Virtualization‌లో, ముడి భౌతిక పనితీరుకు దగ్గరగా ఉండటం వంటి వివిధ స్థాయిలు ఉన్నాయి.
జనాదరణ పొందిన virtual మెషీన్ మానిటర్లు లేదా హైపర్‌వైజర్‌లలో Xen మరియు VMWare ఉన్నాయి.
ఫిజికల్ హార్డ్‌వేర్ మద్దతు ఇవ్వని రన్నింగ్ ఆపరేటింగ్ System‌ల వంటి virtual మెషీన్‌లు పెర్క్‌లను కలిగి ఉంటాయి.
cloud సోర్సింగ్ కీలకం ఎందుకంటే ఇది హై-ఎండ్ ఇంకా తక్కువ-Tier provider‌లను ఉపయోగిస్తుంది.
ఇది చౌకైన serviceలను పొందడం మరియు ఆర్థిక విషయాలలో ఎలా ఆడుతుంది.
cloud ఎకనామిక్స్ ఇది ఎల్లప్పుడూ ఉపయోగకరంగా ఉందా లేదా ప్రయోజనకరంగా ఉందా అనే దాని గురించి మాట్లాడుతుంది.
మీరు Web బ్రౌజర్ ద్వారా ఎప్పుడైనా ఈ serviceలను access చేయవచ్చు.
ఈ computing ప్రయోగాత్మక serviceలకు లేదా నేను కలిగి ఉన్న ఏ రకమైన ప్రాజెక్ట్‌కైనా గొప్పది.
నా serviceలను లేదా కంటెంట్‌ను ఉపయోగించుకోవడం గురించి నేను చింతించాల్సిన అవసరం లేదు.
scalability చాలా వేగంగా ఉంటుంది.
స్థానిక ITపై పెద్దగా దృష్టి పెట్టాల్సిన అవసరం లేదు.
అన్ని మౌలిక సదుపాయాలు ఎక్కడ ఉన్నాయో చూద్దాం; మీరు ఒక పాయింట్ నుండి వనరులపై ఎక్కువగా ఆధారపడినప్పుడు ఆందోళనలు ఉంటాయి.
ముఖ్యమైన ఆందోళనలలో పనితీరు reliability మరియు serviceా స్థాయి ఒప్పందాలు ఉన్నాయి.
serviceల కోసం ఒప్పంద నిబంధనల వంటి problemలు ఉన్నాయి.
cloud‌లో నాData సురక్షితమైనది మరియు తాజాగా ఉంటే దాని గురించి ఆందోళనలు ఉన్నాయి.
మరొక problem ఏమిటంటే, వారు 90% లేదా 95% లభ్యతను ఎలా వాగ్దానం చేస్తారు వంటి serviceా పరామితి.
నేను ఎల్లప్పుడూ విషయాలు ఎలా పని చేస్తున్నాయో మరియు అవి సరిగ్గా ఉన్నాయా అని చూస్తున్నాను.
పరిగణించవలసిన problemలు లేదా లక్షణాలు మరియు ఎంపికలు ఎల్లప్పుడూ ఉన్నాయి.
కొన్నిtimes, cloud provider‌లు బాగా ఇంటరాక్ట్ అవ్వడం లేదా అనుకూల ఎంపికలను అందించడం వంటి problemలతో నాకు problemలు ఉంటాయి.
serviceలను purchase చేసేటప్పుడు, in‌ఫ్రాస్ట్రక్చర్ provider నుండి హార్డ్‌వేర్‌ను purchase చేయడం వంటి వాటి గురించి చాలా ఆలోచించవలసి ఉంటుంది.
API బాగుందా, అది SOAP లేదా REST అయినా, Service స్ట్రక్చర్ ఎలా ఉందో నేను ఆశ్చర్యపోతున్నాను.
పెద్ద ఆందోళనలు security, goప్యత, సమ్మతి, reliability, పోటీ మరియు ప్రమాదం
n serviceను purchase చేయడం.
ముఖ్యంగా నేటి పనులకు అవసరమైన వాటిని కొనడం చాలా ముఖ్యం.
cloud నిల్వ ఎందుకు వేరుగా ఉంది? ఇది serviceలో కీలక భాగం.
cloud నిల్వ ఫోన్‌లు లేదా computer‌ల వంటి విభిన్న పరికరాలలో తాత్కాలికంగా అంశాలను service్ చేయడానికి అనుమతిస్తుంది.
ఒక serviceగాData అనేది ఒక పెద్ద విషయం, మరియు మేము amazon యొక్క EC2 మరియు S3 వంటి వాటిని చాలా ఎక్కువగా ఉపయోగిస్తాము.
కొన్ని ప్రయోజనాలు తక్కువ computer ఖర్చులను కలిగి ఉంటాయి, అయినప్పటికీ ఇది ఎల్లప్పుడూ చౌకగా ఉండదు.
నేను మెరుగైన పనితీరు మరియు విలువను పొందుతాను, ప్రత్యేకించి నేను ఖరీదైన సాఫ్ట్‌వేర్‌ను purchase చేయనవసరం లేదు.
సాఫ్ట్‌వేర్ app‌డేట్ ఉంటే, నేను దాని గురించి చింతించాల్సిన అవసరం లేదు.
theoretically, నిల్వ అlimitedంగా ఉంటుంది; నేను చెల్లించి మరింత స్థలాన్ని పొందుతాను, ఇది నమ్మదగినది మరియు బాగా పంపిణీ చేయబడుతుంది.
data ప్రతిచోటా అందుబాటులో ఉంటుంది మరియు నేను ఎల్లప్పుడూ నా సమాచారాన్ని మరియు తాజా సాఫ్ట్‌వేర్ సంస్కరణలను పొందగలను.
విభిన్న యాప్‌లతోDataతో కలిసి పని చేయడం సులభం మరియు నేను దానిని ఏ పరికరం నుండైనా access చేయగలను.
కానీ నెట్‌work problemలు, ముఖ్యంగా స్లో connection‌ల వంటి ప్రతికూలతలు ఉన్నాయి.
అనుకూల వ్యక్తిగత అంశాలను సెటప్ చేయడానికి కొంత సమయం పట్టవచ్చు.
నిల్వ నిజంగా ఎంత సురక్షితమైనది అనే ప్రశ్న ఎల్లప్పుడూ ఉంటుంది.
provider క్రాష్ అయినా లేదా స్టఫ్ పోగొట్టుకున్నా,Data నష్టం గురించి నేను ఆందోళన చెందుతున్నాను.
cloud నిజంగా అధిక-పనితీరు గల computing System‌ల కోసం కాదు.
మీరు అధిక-పనితీరు గల computing కోసం చూస్తున్నట్లయితే, cloud మీకు అవసరమైన వాటిని అందించకపోవచ్చు, ముఖ్యంగాDataబేస్‌ల కోసం.
మంచిDataబేస్ connectivity మరియు సాధారణ API connectivity ఉందా అనే ప్రశ్నలు ఉన్నాయి.
కాబట్టి, hereితో ఆpayద్దాం, తరువాత ఉపన్యాసాలలో వివిధ నిర్మాణాలను చూద్దాం.
ధన్యవాదాలు!
ఈ విషయాల పై స్థాయి వీక్షణ చూస్తే, మనకు
ఆఖరిలో ఏం ఉంటుంది,మనము దేనికోసం చూస్తున్నామో
,అందులో ఒకటి ఉపయోగించే యూసర్ లేదా మొత్తం
cloud computing, ఇది మేము కొన్నిconsumerల
సంభంధించి వ్యాపార లక్ష్యాన్ని సాధించడానికి
ధోహదపడుతుంది.. ఇది నిర్మాతకు సంబంధించి
వ్యాపార లక్ష్యంగా ఉండవచ్చు లేదా cloud
computing యొక్క మొత్తం ఫ్రేమ్work
కావచ్చు.
కాబట్టి, కొంత వ్యాపార లక్ష్యాలు అనేవి
ప్రధానమైనవి.
తరువాత, మనకు నాణ్యతా లక్షణాలు మరియు నిర్మాణ
వ్యూహాలు లేదా ప్రాథమిక నిర్మాణ చట్టం ఉన్నాయి.
కాబట్టి, మీరు ఎగువన ఉన్న లక్ష్యాన్ని
చూస్తే, ప్రధానంగా మేము చూస్తున్నదిఏమిటి,
ఏమిటంటే institutionకు మొత్తం ఖర్చు ఎంత,వాటదారులు ఎవపు, వాటాదారు హోదా
సంతృప్తి, వివిధ ప్రమాణిక market
shareలుతో policy, ఆవశ్యత, మొదలైనవి.
కాబట్టి, ఇది CSP తరహాలోని మొత్తం వ్యాపార లక్ష్యం
మరియు ఈ వ్యాపార లక్ష్యాన్ని సాధించడానికి
,పరిశీలించి మరికొన్ని పారాmeterలను లెక్కించి,దిశానిర్ధేశం
చేయాల్సి ఉంది.here మనము సరిగ్గా నిర్వహించాల్సినవి
చెప్పాలంటే, లభ్యత, స్థితిస్థాపకత, ఇంటర్పోపెరాబిలిటీ,
security, స్వీకరించదగ్గత, పనితీరు, వినియోగం
మరియు నిర్వహణ వంటివి.
ఇప్పుటి వరకు చూసాం కదా,ఒక్కసారి ఒకటి,రెండు
ఉపన్యాశాలకు వెనకకు వెళితే , ఎక్కడ cloud
computing యొక్క ప్రాథమిక నిర్వచనం
ప్రారంభించబడింది.
కాబట్టి, మనము , అది ఎలా అందుబాటులో ఉందో,
ఎలా సాగేది, అది ఎలా పరస్పరం ఉంటుంది
అనే అంశాల కోసం వెతుకుతున్నాం.
, కనుక ఇవి ప్రధానమైనవి.. ఈ లక్షణాలు ప్రాథమికంగా
ఈ వేర్వేరు cloud విఫణిలో తన వ్యాపార
లక్ష్యాన్ని నిర్వచించడానికి serviceా ప్రదాతను అనుమతిస్తుంది.
చివరకు, సాధించడానికి ఈ వివిధ కొలిచిన
serviceలు లేదా వ్యాపార లక్ష్యాలు, ప్రాథమిక
నిర్మాణ వ్యూహాలు లేదా నిర్మాణ వీక్షణ
ఉండాలి.
కాబట్టి, పరిగణించ దగ్గ అవసరాలు , సరిగ్గా
ఏకమవుతుందో లేదో, ఇది ఒక స్థితిలేని
రూపంగా ఉందా,ఇది భౌgoళిక వ్యాప్తి
చెందిన పలు పరికరములు ఉన్నాయి అని మనము
ఆలోచిస్తున్నాము సో, వారు వదులుగా
జత, వైవిధ్యమైన, మేము విషయం లోకి తీసుకుని
ఏమి ఉండాలి విస్తృత network access
కుడి విషయాలు మధ్య ఒక ఇంటర్connect
మరియు సజాతీయత విధమైన ఉంది. కాబట్టి, క్యాచింగ్
విధానం ఏమిటి.
కాబట్టి, ధృవీకరణ అవ్వాల్సినది ఏమని
చెప్పుకోవాలో, అది దావా ఆధారంగా ప్రమాణీకరణ
అనంతరం, నిర్మాణ పద్ధతుల యొక్క అనేక
ఇతర అంశాలు ఉన్నాయి.
ఇప్పుడు, మీరు ఈ విధమైన విషయాలను ఎక్కడైనా
చూస్తే ఇతరవి ఏ రకమైన service modelలో కనిపించవచ్చు,
నేను చెప్పినట్లుగా మౌలిక serviceా model
తీసుకుంటే, కొన్ని అంశాలు నాటకం లోకి
వస్తాయి, నేను PaaS చెప్పినప్పుడు మరికొన్ని అంశాలు
నాటకంలోకి వస్తాయి మరియు మేము SaaS లేదా
ఏ ఇతర రకం model కలిగిఉండొచ్చు.
కాబట్టి, development చెందుతున్నప్పుడు
ఏ నిర్మాణ దృక్పధాన్ని ప్రతిపాదించినా
ఇది ముఖ్యమైనదిగా మారుతుంది.
కాబట్టి, ఈ గౌరవంతో దృష్టిలో ఉంచుకొని,
మేము ఈ cloud architectureలో ప్రాథమిక పరిశీలన
ఏమిటి అని చూస్తాం.
కాబట్టి, మీరు cloud computing నిర్మాణం
యొక్క ప్రధాన నిర్మాణ బ్లాక్ను చూసినట్లయితే,
ఒక టెక్నాలజీ నిర్మాణం, XaaS stack ప్రకారం
నిర్మిస్తోంది.
cloud computing పధార్ధాలను,cloud
serviceలు మరియు భాగాలు, మిడిల్వేర్ మరియు
Communication మరియు నిర్వహణ మరియు securityలను
రూపొందించడాలను అమోదించడం.
కాబట్టి, ఇవి వాస్తుకళాపూరిత సాంకేతిక పరిజ్ఞానం
యొక్క సాంకేతిక లక్షణం.
విస్తరణ operation నిర్మాణం యొక్క కొన్ని
విషయాలు ఉన్నాయి.
నాఫెడరల్ అవసరం ప్రకారం నామొత్తంData , ప్రభుత్వ
సంబంధిత కార్యకలాపాలకు అవసరమయ్యే నా దరఖాస్తులు
దేశ భూభాగంలో ఉండాలి.
నేను host లేదా ఏ application లేదా
విషయాలు బహిరంగంగా చేయొచ్చు.
ఇలా, నేను ఒక మెయిల్ service కలిగి ఉంటే, మెయిల్
data, మెయిల్ server మొదలైనవి మా దేశం
యొక్క భౌgoళిక సరిహద్దు ప్రాంతంలోనే ఉండాలి,
కాబట్టి ఒక విషయం చట్టపరమైన problemలు
కూడా ఉండవచ్చు.
operation మరియు పర్యవేక్షణ వంటి లావాదేవీల problemలు
ఉన్నాయి.
కాబట్టి, కార్యాచరణ వ్యూహంగా ఎలా ఉండాలి,
ఇది ఎలా పర్యవేక్షిస్తుందో, ఈ XaaS stackలు ఇతర
విస్తరణ operation నిర్మాణం ఎలా చేస్తైయో.
ఈ విధంగా, మీరు ఈ విలక్షణ XaaS విషయాన్ని గమనించినట్లయితే,
ఉన్న ఈ serviceలలో PasS,SaaS కంటే ఏది తగ్దింది.
ఇప్పుడు, మీరు ఈ నిర్మాణ భాగాన్ని లేదా ప్రాథమిక
బిల్డింగ్ బ్లాక్ను చూస్తే, అందులో నిల్వ
మరియు అవస్థాపన మరింత ఉంటుంది.
కాబట్టి, ఈ నీలం రంగు ఉంది; app లో విషయం
ఈ కుడి application.
మరియు client అవస్థాపన ఈ అనువర్తనం సంకర్షణ
ఇది ఉన్నాయి; మధ్యలో మధ్యస్థం లేదా మనం
చెప్payది ఏమిటంటే, PaaS,ప్లాట్ఫారమ్లో
serviceలు cloud రన్time గ్రంధాలయాలు మరియు
ఇతర విషయాలు బయటకు వస్తాయి.
కాబట్టి, ఏ cloud computing అంతర్గ్హత
నిర్మాణం అయినా అది public, private,
బహిరంగ మూలం, అనుకూలీకరించబడినాయినా, మనకు ఈ రకమైన పరిపూర్ణతను
కలిగి ఉన్న ఇతర ప్రదేశాలలో చూడవలసిన అవసరం ఉంది.
మరియు consumerడికి వర్తకులు లేదా customer
వర్సెస్ provider యొక్క దృక్కోణంగా
చూస్తే, ఐఏఎస్ఎస్ మరొకసారి IT operation
రకంలో ఐటి వాస్తుశిల్పి ప్రధానంగా ముఖ్యమైనది.
consumerని application, నిర్వాహకుడు etcetera
అనేది చాలా ఉపయోగకరంగా ఉన్న consumer
లేదా application consumerకు CRM
గా చెప్పవచ్చు.
మరియు ఈ hardware అంతర్గ్హత నిర్మాణంను
ఉపయోగిస్తున్న లేదా మధ్యస్థంగా ఉన్న
Software ఆర్కిటెక్ట్ డెవలపర్ కోసం, ఇది
ఒక service వలె ఈ మౌలిక సదుపాయాన్ని ఉపయోగిస్తుంది,
దీనిని development చేయడం లేదా దీనిపై
ఈ అనువర్తనానికి మద్దతు ఇవ్వడం, ఈ
రకాలు మధ్యలో ఉన్నవి.
కాబట్టి, వివిధ వ్యక్తులు లేదా వివిధ రకాల
consumerలు ఈ నిర్మాణం యొక్క పద్దతిని
వివిTierకాలుగా ఉపయోదిస్తారు.
ఇప్పుడు మనము రెండు ప్రముఖమైన cloud
serviceలను కలిగి ఉన్న రెండు ప్రముఖమైన
వాటికి మ్యాప్ చేసేందుకు ప్రయత్నిస్తాము,
అక్కడ అనేక ఇతర ప్రముఖ serviceలు ఉన్నాయి, కానీ
ఇవి ప్రస్తుతానికి అందుబాటులో ఉన్నాయి
మనము పొందడానికి.
కాబట్టి, microsoft windows ఆజర్ ప్లాట్ఫారమ్, మరొకటి amazon cloud ప్లాట్ఫారమ్ లేదా amazon EC2. ఇప్పుడు ఆ మూడు
stackలో ఎక్కువ లేదా అంతకంటే తక్కువగా
విభజించబడినది.
చొచ్చుకొని పోయే విషయాల దిగువ భాగంలో
ఇది ECE2లోఎక్కువ.
amazon విషయంలో ఇది windows serverలు
మరియు సంబంధిత అంశాలలో గమనించవచ్చు; EC2 విషయంలో
ఇది amazon S3 మరియు సాధారణ DV మరియు ఇతర
రకాల నిల్వలతో windows లైనక్స్ మౌలిక
సదుపాయాలుగా ఉంటుంది.
మరియు మధ్యలో మనకు ఈ మిడిల్వేర్
కలిగిన వేదిక ఉంటుంది, stuff యొక్క అనలాగ్
లా ఉంటుంది.
మరియు పై స్ధాయిలో applicationలు
ఉన్నాయి.
ఇవి కొన్ని windows ఆజరు applicationస్ మరియు amazon applicationలు.
here ఒక client ని మరో client
కు connect చేయవచ్చు ఈ సందర్భంలో silver light
లేదా బ్రౌజర్ ద్వారా connect
చేయవచ్చు.
కాబట్టి, నేను ఇంతకు ముందు చెప్పినది
గమనిస్తే అది కూడా మునుపటి Slideలో
ఉంది, నిర్వహణ మరియు security హక్కుసంభంధించిన
రెండు నిలువు వరుసలు ఉన్నాయి.
ఇవిరెండు చాలా ముఖ్యమైనవి,ఎందుకంటే మానేజ్మెంట్ మరియు
security వియయాలలో కొంతమంది securityను ఒక management
అంశంగా పరిగనిస్తారు మరియు కొన్నిtimes
క్వాలిటి ఆఫ్ Service ను పరిగనిస్తారు.
అందువల్ల, serviceల యొక్క నిర్వహణ నాణ్యత మరియు
సూచనలు లేదా విషయంలో కొన్నింటిని మీరు
గమనిస్తుండాలి.
కాబట్టి, ఇవన్నీ here నిలువుగా ఉన్న
stack అయిన దృశ్యాలు, అంటే security లేదా
నిర్వహణ ను ఒక లేయర్ తోనే సాధించలేము.
అందువల్ల, ఇది ఒక విధమైన క్రాస్ లేయర్
పరిశీలన అవసరంఉంది, అందుకే ఇవి నిలువుగా
ఉండే stackలు.
మీరు ఈ అంశాన్ని AZURE లేదా EC2లో చూసినట్లయితే,
ఇవి కూడా ఈ నిలువు stackలు ఏను. అందువల్ల,
వారు నిర్వహణ యొక్క security సంబంధిత అంశానికి
చెందిన వివిధ భాగాలను కలిగి ఉంటాయి, కానీ
ఇవి నిలువు stackలకు సంభంధించినవి.
అదేవిధంగా, security ఆధారపడిన అంశం,దానిపై
గల నియంత్రణ అంశం తరువాత చూద్దాం.
నాకు ఒకవేల infrastructure as a service కలిగి ఉన్నట్లయితే,
నా security లేదా నిర్వహణ మౌలిక సదుపాయాలు
మరింత పరిశీలనగా ఉంటుంది.
కాబట్టి, ఒకసారి నేను ఈ మౌలిక సదుపాయాన్ని
బయలుపరచుకుంటాను, ఈ మౌలిక సదుపాయాల
వెలుపలి యంత్రం మొదలైన వాటికి నేను కేటాయించాను,
అందువల్ల consumerని లేదా consumerడి
బాధ్యత ఈ విషయాన్ని పరిశీలిస్తుంది.
నేను ఒక Softwareను ఒక serviceగా కలిగి ఉన్నట్లయితే,
ఈ problemలన్నింటినీ ఆ లేయర్ కు సరిగ్గా
అందించాలి.
సో, వర్డ్ processing service లేదా CRM service అనేది
Software service. కాబట్టి, ఆ స్థాయి
నిర్వహణ మరియు securityకు సంబంధించిన అన్ని
అంశాలను అందిస్తుంది, అందుచే ఇది ఏ విధమైన
serviceా కేటాయింపు లేదా ఏ విధమైన serviceా విస్తరణను
చేస్తున్నామో ఈ ప్రత్యేక deployment లో ఉంటుంది
ఇవి మనం మాట్లాడుతున్న వివిధ అంశాలు మరియు
problemలు; ఒకటి elasticity.
మనము చెప్పినట్లుగా లేదా మనము తెలుసుకున్నట్లుగా,
cloud యొక్క అతి ముఖ్యమైన లక్షణాలలో
ఒకటి scaleup,scale down ఇప్పుడు, అది సాధించడానికి.
, రెండు విస్తృత విధానాలు ఉన్నాయి.
ఈ రెండు విస్తృత విధానాలు , cloud
లేకుండా ఇది ఎక్కువ elastic computing ని కలిగి ఉంటుంది.
ఒకటి మీరు నిలువు స్థాయిని చేయవచ్చు;
అనగా, ఎక్కువ వనరులను బాక్స్ కు కుడివైపున,
మనము ఒక ప్రత్యేకమైన మౌలిక సదుపాయాన్ని
కలిగి ఉన్నప్పుడు, ఉదాహరణకు, నాకు వేరే
serverలతో ప్రత్యేక రాక్ ఉంటుంది.
కాబట్టి, మేము మొదట కొన్ని 24 serverలను
కలిగి ఉన్నామని చెప్పాము, appపుడు నేను మరిన్ని
serverలను పెట్టినట్లయితే లేదా నా classes 16 బ్లేడ్లు
కలిగి ఉండవచ్చు మరియు అవసరాన్ని బట్టి
ప్రారంభంలో 4 కలిగి ఉండవచ్చు, institutionకు
మరో నాలుగు లేదా 16వరకు blade chases అవసం అనిపించవచ్చు
. ఇప్పుడు ఇది నిలువుగా ఉంది. కాబట్టి, ఇది
ఒక చిన్న scenario కు లాభంగా ఉంటుంది.మాములుగా
ఇది scaleup కు చాలా తక్కువ స్ధాయి , ఇది కేవలం
మీరు ఎంపికచేసిన 1 way server కంటే ఎక్కువ
Tier. అంశంపై పనిచేస్తుంది.
ఒకే computational box కుమరిన్ని వనరులను చేర్చవచ్చు,
ఎక్కువ పనిభారాన్ని వనరుల నుండి కంప్యుటేషన్
unitకు తరలించండి.
కాబట్టి, ఎక్కువ వనరులను కలిగి ఉన్నాము.
అయితే, మనకు ఉన్న scenarios లో పెద్ద scenario
ఉన్నప్పుడు పరిష్కారం 64 వే server.కాని
64 అనేది 1 way server కంటే ఎక్కవ విలువ.
. అందువల్ల,64 computational unit అనేది 1 unit of computation
కన్నా విలువ తక్కువ.
నాకు పెద్ద ఎత్తున దృశ్యం వచ్చినప్పుడు,
ఆ పద్ధతిలో విస్తరించడం చాలా ఖరీదైనది కావచ్చు.
కాబట్టి, ఆ సందర్భాల్లో మాత్రమే ఆర్థిక అంశాల
పరంగా వ్యయం పరంగా విస్తరించడం మాత్రమే
కాదు, ఇది ఒకే వ్యవస్థ, అది వైఫల్యం ఒకే
ఒక్క పాయింట్ అయితే వైఫల్యం యొక్క నిర్వహణ
రేటు కావచ్చు ఆ సమయంలో.
నేను బహుళ వ్యవస్థలు కలిగి ఉంటే, కనుక
కొన్ని వ్యవస్థలు విఫలమైతే, నేను కొద్దిగా
తక్కువ పనితీరు మెట్రిక్ లో పనిచేయగలగాలి,
కానీ నేను దానిపై పని చేయవచ్చు.
అందువల్ల, ఇది horizontal scale up లేదా scale out లేద
vertical scale out అనేది మన అవసరాన్ని బట్టి
పరిగణించవలసి ఉంటుంది.
ఇప్పుడు, మా serviceా modelకు తిరిగి వచ్చినా,
కాబట్టి XaaS ఏమి జరుగుతుందో, అవగాహన ఏమిటంటే serviceా-ఆధారిత
అంతర్గ్హత నిర్మాణం లేదా మౌలిక సదుపాయాన్ని
గుర్తించడం మరియు cloud computing
XaaS ను గ్రహించడం.service ఓరియెంటెడ్ architecture అంటే ఏమిటి, నేను చాలా వరకు ఇప్పటికే
తెలుసుకున్నారని భావిస్తున్నాను.
కాబట్టి; తదుపరి ఉపన్యాసాలలో serviceా-ఆధారిత
నిర్మాణంపై కొన్ని రకాల స్లైడ్స్ ఉంటయి.
కాబట్టి, ఆ ఈ విధమైన విషయాలు చాలా బాగా
తెలిసినవా లేదా కాదు, మేము వెంటనే తనిఖీ
చెస్తాము.
అయితే ఇది మౌలిక సదుపాయాలకు లేదా
PaaS లేదా ఏదైనా రకాలైన విషయాల కోసం నడిచే
ఒక విధానం.
సో, మేము ఈ XaaS గ్రహించడం కోసం SOI మరియు cloud
computing మిళితం ప్రయత్నించాము.
అందువల్ల, cloud సంబంధిత serviceల సాధారణీకరణ
అనేది ఏదైనా serviceగా స్థానికంగా లేదా
siteలో కాకుండా internetలో పంపిణీ చేయబడిన serviceల
సంఖ్యను సూచిస్తుంది.
XaaS అనేది cloud computing యొక్క సారాంశంఅని
మనకు ముందే తెలుసు.
కాబట్టి ఏదైనాservice అయితే, మనంDataను
మరొక ప్రజాదరణ కలిగిన ఇతర serviceగా కలిగి
ఉంటుంది.
ఈ ప్రసిద్ధ XaaS ఉదాహరణలో ఒకటి infrastructure as a service,platform
software service మనకు ముందుగానే తెలిసినవి.
ఇంకొక విషయం ఏమిటంటే,business process as a servise అనే మరొక
వచ్చి బాగా popular అయింది.
కాబట్టి, నాదగ్దర ఉండే workflow ని service క్రింద
ఇవ్వాలనుకుంటున్నాను.
కాబట్టి, సమాంతర లేదా నిలువు వ్యాపార
ప్రక్రియలు companyలు లేదా పరిశ్రమలకు
చందా ఆధారంగా అందించబడతాయి.
ఒక నిర్దిష్ట operation కోసం , నేను ఒక వ్యాపార
ప్రక్రియ కలిగిఉన్నాను.
కాబట్టి, దీని అర్థం ఏమిటి, ఇది కేవలం
పంపిణీ చేసే ఒక application మాత్రమే కాదు.
వాటి మధ్య వాద్యాలుగా కలిగి ఉన్న వేర్వేరు
ప్రక్రియలు నాకు కలిగి ఉంటాయి, appపుడు
నాకు ఒక నిర్దిష్ట అనువర్తనాలను గుర్తించడం
కోసం అనుమతిస్తాయి.
ఇది బ్యాంకింగ్ రంగం కోసం ఉంటుంది, ఇది
విషయాలు వివిధ development ప్రణాళిక కార్యకలాపాలు
కొన్ని అంశాలను కోసం ఉంటుంది.
కాబట్టి, నేను application ను run చేసి ఫలితాలు
పొందేది ఇది ఒక్కటే కాదు ఒక application
ఇతర applications పై ఆధారపడి ఉంటుంది.
నాకు realize అవ్వడానికి భిన్న applications లభిస్తాయి.
కాబట్టి, P12 అని పిలవబడే p13ఇది P3 మరియు అంతర్గత
P3 మరియు P4 లకు inపుట్గా ఉంటుంది, అంతేకాక
అంశాల యొక్క తుది ఫలితంతో వస్తుంది.
ఇప్పుడు, నాకు భిన్నమైన వేరే విధానాలు ఉండవచ్చు.
కాబట్టి, ఈ విషయాలలో వాద్యములు ఉన్నాయి.
కాబట్టి, నేను business ప్రాసెస్ అనేది . వివిధ
సబ్ ప్రాసెస్లు లేదా సబ్ applicationల
సమ్మేళనం లేదా ఏకీకరణ.
ఆసక్తికరమైన అంశం ఏమిటంటే ఒక టైమింగ్
సంబంధం ఉంటుంది,ఎలా చెప్పొచ్చు అంటే
process execution tree లేదా process execution graph ఉంటుందని,
అది ఒక నిర్దిష్ట అంశాలను అనుసరిస్తుంది.
ఇప్పుడు, ఈ విధమైన విషయాల కోసం, ,ఇది
నిర్వచించబడితే, appపుడు , ఒక వ్యాపార
ప్రక్రియతో ఒక serviceను అందించాను అని చెప్పగలను.
కాబట్టి, ఇది కేవలం application as a service or software as a
service గాఉండదు, కాబట్టి నేను ప్రాథమికంగా
software as a service కన్నా ఎక్కువ విషయాలు కలిగి ఉంటాను.
యాదృచ్ఛికంగా ఈ విభిన్న ప్రక్రియలు విభిన్న
వైవిధ్యమైన providerల నుండి రావచ్చు.
కాబట్టి, నేను ప్రాథమికంగా ఇప్పుడు cloud service
providerలతో సంప్రదించి ఆపై విషయం తెలుసుకోవచ్చు.
సో, ఈ వ్యాపార ప్రక్రియ అనేది organisations రోజు
ఆఖరి సమాయనికి చాలా అవసరం, ఈ విషయాలను,
మీరు చాలా మంది విన్న ఉండవచ్చు . కాబట్టి,
ఇది మీరు ఎక్కడైతే business process of outflow ని ఉపయోగిస్తారో
అక్కడ business process execution language ఉంటుంది.ఇది ప్రధాన
అంశాలలో ఒకటి.
IaaS అనేది RAW infrastructure.
PaaS Virtualizeడ్ application డెవలప్మెంట్
లేదా రన్ time ప్లాట్ఫారమ్.
SaaS అనేది subscription ఆధారంగా అందించబడిన cloudలో
host చేసిన Software application.
మరియు business process service అనేది horizontal లేద vertical గా companies
or industries లో subscription basis లో ఆధారపడి ఉంటుంది.
మరియు మరొకసారి వెనకకు తిరిగి చూసినట్లయితే,
అది మా జనాదరణమైన IaaS, PaaS మరియు, PaaS ఇతర
మౌలిక సదుపాయాలను కలిగి ఉంటుంది.
కాబట్టి, ఇవే కాకుండా here మూడు అత్యంత
ప్రసిద్ధ ఉదాహరణలు ఉన్నాయి, అనేక వ్యాపార
కార్యకలాపాలు, అనేక ఇతర XASS సంఘటనలు ఉన్నాయి,
business process as a service ,storage as a serviceగా ఇంతకమునుpay
చూసాము., security as a service ఉంటే అది వివిధ security
అంశాలను అందిస్తుంది., database as a service కలిగినట్లైతే
, నేను etcetera install చేయవలసిన పనిలేదు,
నేను datebase ని service గా చేసుకోవచ్చు.
monitoringmanagement asa service తో నేను నా IIT infrastructure ని manage చేసుకోవచ్చు.మా
IIT infrastructure లో వివిధ రకాల ug,pg labs ని నిర్వహించాల్సి
ఉంటుంది.
సాఫ్టువేర్ మొదటి నుంచే మనం నిర్వహన
భాద్యతను చేపట్టాల్సి ఉంటుంది,ఎలాగంటే
Software లో ఏమి జరుగుతోందో, hardware లేద
ఇతర వాటి నుంచి ఏదైనా problem ఉందా అని చూడాలి.
కాబట్టి, నేను ప్రత్యేక టూల్స్ కలిగి ఉన్నానా
లేదా లేక ఇంకెవరైన machine తో అనుసంధానించే
service ని large infrastructure కు సంభంధించిన విషయంలో
అందించారా . కాబట్టి, communication content computing as a service
లో identity as a service,backup asa service,desktop as a service కొన్ని ముఖ్యమైనవి
. కాబట్టి, నేనుఏ service నైనా కలిగి ఉండగలము
మరియు ఇవి ప్రపంచవ్యాప్తంగా ఉపయోగించబడుతున్నవి.
CSP లేదా cloud provider పెరుగుదల ఉత్పాదకత,
తుది consumer సంతృప్తి, కొన్ని
వినూత్న serviceలు, దాని market స్థానం
కలిగి ఉండటం రోజు ముగింపులో గమనించవచ్చు.
మరియు వేర్వేరు దారులు ప్రవేశించాడానికి
ఉంటాయి.
కాబట్టి, ఇది నడవ వలె ఉంటుంది మరియు
ఇది దానికై అదే ఏ వస్తువు కావాలో తెలుసుకో
గలదు.
మనము మరలా చూస్తే, మన ప్రాథమిక నిర్వచనానికి
తిరిగి వచ్చి చూడడానికి ప్రయత్నిస్తే, అందువల్ల
విస్తృత network access, resource
పూలింగ్, వ్యాపార నడిచే మౌలిక సదుపాయాలు
అక్కడ మరియు service ఆధారిత ఓరియంటేషన్,
service ఆధారిత నిర్మాణం.
కాబట్టి, ఈ నాలుగు ఈ serviceలు XAS రకం serviceలను
గుర్తించడంలో అనుకూలిస్తాయి.
కాబట్టి, Service provider యొక్క
నాలుగు సాధారణ డిమాండ్లను XaaS నెరవేరుస్తుంది.
ఇప్పుడు, మా TCP / IP లేదా OSI modelల వంటి మా
network stack లాగా, నేను మా యొక్క
మాడల్ model లేదా XaaS model యొక్క సాధారణ
క్లాక్ stack . కాబట్టి, ఆధారం ఏమిటంటే అది
అలాంటిది కాదు, కాబట్టి మనము ఏమి చెప్తున్నామో,
తార్కిక విధానాన్ని చూద్దాం, సరియైనది
కాదు, అది ఏదో ఒకదానికంటే ఎల్లప్పుడూ జరుగుతుంది,
కానీ అది విషయాలు తార్కిక ప్రాతినిధ్యం.
విషయం యొక్క కోర్ వద్ద వలె networking
ఉంది. కాబట్టి, మీకు ఒక విస్తృత network
access ఉంది, ఇది విషయాలు ఒకదానితో
ఒకటి మాట్లాడటానికి అనుమతిస్తుంది.
ఇంకొక ముఖ్య భాగమే అది సర్వోన్నతమైన
ఏదో నిల్వ.
ఇతర అంశం server.
కాబట్టి, మీరు ఈ మూడు అంశాలను చూసినట్లయితే
ప్రధానంగా ప్రధాన భవనం బ్లాక్, ఇది
మేము ఏమి పనిచేస్తుందో దానిపై బేర్ మెటల్
విషయాలు చెబుతాము.
కాబట్టి, ఒక Communication, ఒకటి ఈ వేర్వేరు
serverలు మరియు ఇతర భౌతిక అవస్థాపన,
మరియు ఇతర ఒకటి నిల్వ ఉంది. నిల్వ ఎల్లప్పుడూ
మేము మౌలిక సదుపాయాలలో ఒకదానిని ఉంచకుండా
మరొక ప్రత్యేక కారకంగా ఉంచడానికి ప్రయత్నిస్తాము,
కొన్ని సందర్భాల్లో నిల్వను మౌలిక సదుపాయంగా
ఉంచారు, కానీ నిల్వ వేర్వేరు రకం నిల్వ
నిర్వహణ నిర్వహణ విభిన్నంగా ఉంటుంది,
అందువల్ల నిల్వ యొక్క ముఖ్యమైన అంశాలు
inపుట్ కారకంగా చెప్పవచ్చు.
గ్రహించడం క్రమంలో ఏమిటంటే విషయాలు
వాస్తవికత యొక్క అంశంగా ఉంటాయి.
కాబట్టి, నేను అన్ని విషయాలు వర్చ్యువల్
అవసరం.
కాబట్టి, నేను మొత్తం మౌలిక సదుపాయాల యొక్క
Virtualizationను కలిగి ఉండవచ్చు,
నేను ప్రత్యేక ప్రవర్తన virtual machine
యొక్క Virtualizationను కలిగి ఉండవచ్చు,
నేను కూడా networkను వాస్తవికీకరించవచ్చు.
సో, నేను ఒక infrastructure వాస్తవీకరణ కలిగి,
నేను ఒక నిర్దిష్ట వాస్తవిక network
అవస్థాపన గ్రహించడం, మరియు కోర్సు యొక్క,
నిల్వ.
కాబట్టి, virtual అనేది ప్రాథమికంగా
ఈ పిలవబడే వర్చ్యువల్ missionలు లేదా వర్చ్యువల్
network, వర్చ్యువల్ storage రకము కలిగివుంటుంది.
అది ఒక virtual machine ఉంటే నేను
ప్రత్యేకమైన OS ను నేను తప్పక సరిగా
అమలు చేయాలి.
కాబట్టి, ఈ మిడిల్వేర్ తరువాత నేను రన్time
లైబ్రరీని కలిగి ఉంది, దత్తాంశంతో
దగ్గరికి దత్తాంశం మరియు చివరికి, stack
యొక్క చివరి భాగం అనువర్తనాలు.
కాబట్టి, ఈ ఐఏఎస్ఎస్ను తయారు చేసే విభిన్న
భాగాలు, అన్ని భాగాలు సమానంగా ముఖ్యమైనవి
కావు, అన్ని రకాలైన XaaS రకం కోసం సమానంగా
ముఖ్యమైనవి కావని గమనించవచ్చు, అయినప్పటికీ
వారు గ్రహించడంలో ముఖ్యమైన పాత్రను
పోషిస్తారు.
ఇప్పుడు మనము ప్రయత్నిస్తే, మనం ఎక్కడా కొంతమంది
మనం ఎవరికైనా ఉంటున్నారంటే మనము ఇప్పటికే ఈ
వస్తువులను పొందుతున్నాము, ఈ పెద్ద పరదైసు షిఫ్ట్
సరైనది.
కాబట్టి, appపటికే మనం మన ప్రధమ ఉపన్యాసాలలో
ఇప్పటికే వివరించాము, ఇప్పటికే మేము పంపిణీ
వ్యవస్థలు మరియు ఇతర విషయాలను కలిగి
ఉన్నాము.
మేము విషయాలు చాలా తెలుసుకుంటారు etcetera.
అందువల్ల, ఇది మరింత market లాభదాయకంగా
మరియు ఒక కొలవలేని computing మౌలిక
సదుపాయాన్ని కలిగి ఉండటంతో మేము మామూలు
ప్రమాణాలు serviceలను నిజంగా సులభంగా మళ్లించాము.
కాబట్టి, మీరు సరళీకృత ఐటి stackను చూస్తే,
మనము consumerని దరఖాస్తు మరియు అంకితమైన
అవస్థాపనను తుది చేస్తాము.
కాబట్టి, ఇది ఐటి లెగసీలో ఉంది లేదా
ఇప్పటికీ ఇది ఇప్పటికీ చాలా institutionల్లో లేదా
వివిధ institutionల్లో మరియు ఇతర విషయాల్లో
సర్వసాధారణంగా ఉంది, కాబట్టి ఇవి కొంతవరకు
సరైన లేదా మరింత బలంగా జతచేయబడిన
హక్కును కలిగి ఉంటాయి.
అందువల్ల, అంకితమైన దరఖాస్తు మౌలిక సదుపాయాలకు
అంకితమైన అనువర్తనాలపై నడుస్తుంది.
అందువల్ల, application పరిమాణాత్మక అంశాలని
మౌలిక సదుపాయాలపై లేదా ఇతర మార్గాల
ఆధారంగా తయారు చేస్తారు.
అంతిమ consumerడు పని చేయడానికి కొన్ని
ప్రత్యేకమైన applicationలను కలిగి ఉంటారు, అయితే
మనం ఏమి చేయాలో ప్రయత్నిస్తున్నామంటే మనం ఎలా తెలుసుకోవాలనుకుంటున్నాము
అనేది సరళీకృత ఐ.టి infrastructure
ఎక్కువ, ఇవి కొద్దిగా ఎక్కువ సౌకర్యాలను
కలిగి ఉంటాయి.
కాబట్టి, నేను దరఖాస్తు ముగింపు consumer
పరికరాలపై కొన్ని ప్రత్యేక అవస్థాపనను
కలిగి ఉన్నాను, కానీ అవి చాలా గట్టిగా
కట్టుబడి ఉండవు.
కాబట్టి, మనము చేయబోయే విషయమేమిటి, అది
కూడా తరువాత చూపించిన కొన్ని ఉపోద్ఘాతాలను
చూద్దాం, ఈ విధమైన విషయాలు వనరులను
బాగా ఉపయోగించుకోవచ్చని లేదా inవెస్ట్మెంట్
కుడి వైపు మంచి రాబడిని కలిగిస్తాయి.
లేదా ఇదే రకం లేదా serviceల యొక్క సాధారణ
వనరు ఆధారిత రకాన్ని serviceలను వివిధ రకాల
serviceలను అందించడం.
కొన్ని సందర్భాల్లో అనేక institutionలు చాలా
మిగులు వనరులను కలిగి ఉన్నాయి, మా సొంత
యుజి లేదా పిజి labల గురించి నేను మళ్లీ
మాట్లాడటం వంటివి, ఇది గణన వనరులను
భారీ మొత్తంలో కలిగి ఉండవచ్చు, కానీ appపుడు
వారు 24 గంటలు వినియోగిస్తారు, 8 నుండి 10 గంటల చాలా
load. కానీ క్లాస్ గంటలు లేదా లేబుల్
గంటలు లేనందున, పరిశోధకులు వారి ప్రాథమిక వనరుల
ప్లాట్ఫారమ్పై అధిక అనుకరణను అమలు చేయడానికి
అవకాశాన్ని కల్పించవలసి ఉంటుంది, అందువల్ల
ఒక సొంత వనరులను ఉపయోగించుకునే ఒక
మార్గం కావచ్చు మంచి ఫ్యాషన్.
సాంప్రదాయిక model ప్లస్ XaaS model వంటి
కొన్ని ఇతర విషయాలు లైసెన్స్ చేయబడిన
సాఫ్టవేర్, hardware ఉత్పత్తి మరియు ప్రజల
ఆధారిత serviceలు వంటివి, మా సాంప్రదాయిక cloud,
సంప్రదాయ అవస్థాపన modelలు లేదా సాంప్రదాయిక
అవస్థాపన model.
మరియు మేము ఈ ప్రయత్నాన్ని పెంచుకునేందుకు
అలాంటి పద్ధతిలో నిర్మాణాన్ని చేయవలసి
ఉంది. అయితే, మనము ఊహించిన విషయాలు
XASS యొక్క serviceలకు వెళుతున్నాము, అందుకే Software
IaaS, PaaS లేదా XASS రకం ఏ రకమైన అయినా రకాలు.
మీరు మా క్లాసిక్ విషయం చూస్తే లేదా
ఇప్పటికీ చాలా చెల్లుబాటు అయ్యే ఉంటే మేము
ఒక client server నిర్మాణం కలిగి.
కాబట్టి, అనేక clientకు service చేసే server
ఉంది; మరియు server ప్రోగ్రామ్ ఆధారంగా
serverలో నడుస్తుంది, మరియు కక్షిదారుడు
connect కావడానికి ఎల్లప్పుడూ ఎదురు
చూస్తున్నాం మరియు మేము అంశానికి connect
చేస్తాము.
మరియు ఈ చాలా ప్రజాదరణ మరియు ఇప్పటికీ చాలా
ఉపయోగం మరియు కుడి అనేక సందర్భాల్లో
ఉపయోగంలో ఉంటుంది.
కానీ అక్కడ నుండి మనం ఒక serviceా ఆధారిత
నిర్మాణంకి వలసవెళ్లాము, దానికి బదులు ఈ చాలా
బలంగా కలుపుకున్న client serverకు,
serviceకు సంబంధించి ఒకదానితో ఒకటి serviceా
చర్చలు ఉన్నాయి.
మరియు మేము ఒకదానితో ఒకటి మాట్లాడటానికి
వైవిధ్యమైన విషయాలు కలిగి మరియు మేము
flexibilities చాలా ఉన్నాయి ప్రత్యేక ప్రయోజనాలు
ఉన్నాయి.
చాలా ప్రజాదరణ client server విషయాలు FTP
server లాగా ఉంటాయి, టెల్నెట్, HTTP ఈ మార్గం
ఈ client ఈ చర్చలు కనిపిస్తోంది server
భాగంగా ఒక నిర్దిష్ట డెవ్ ఉంటాయి.
కాబట్టి, cloud computing యొక్క
ఈ ప్రత్యేక నిర్మాణ అంశాలపై మా తర్వాతి
ఉపన్యాసాలలో మా చర్చను కొనసాగిస్తాము మరియు
మనం వాస్తవికత యొక్క మరొక విషయాలను మరో
విషయం చూస్తాము.
కాబట్టి, నేటికి ఈ lecture hereతో
ముగుస్తుంది.
ధన్యవాదాలు.
మేము సాంప్రదాయ client-server model మరియు cloud serviceల గురించి చివరిసారి మాట్లాడాము; అక్కడ నుండి పికప్ చేద్దాం.
client-server model అంటే server అనేక client‌లతో connect అవుతుంది.
server మరియు client ఒకే మెషీన్‌లో లేదా వేర్వేరు వాటిపై ఉండవచ్చు.
ప్రతి server సాధారణంగా దాని స్వంత client‌లను కలిగి ఉంటుంది, FTP server‌కు connect చేయబడిన FTP client వంటిది.
నిర్దిష్ట పోర్ట్‌లో ప్రాసెస్ కోసం serverలు వేచి ఉన్నాయి.
కాబట్టి, మీరు FTP, telnet లేదా HTTPని ఉపయోగిస్తుంటే, మీకు ftpd, telnetd లేదా httpd వంటి server అవసరం.
ఈ server‌లు HTTP కోసం పోర్ట్ 80 వంటి నిర్దిష్ట పోర్ట్‌లలో వింటాయి.
ఏదైనా బ్రౌజర్ లేదా client నుండి, మీరు అభ్యర్థనను పంపినప్పుడు, server త్వరగా connect అవుతుంది.
server ఎల్లప్పుడూ దాని నిర్దిష్ట పోర్ట్‌కి connect అయ్యే client‌ల కోసం చూస్తుంది.
మేము రెండు రకాల server‌లను కలిగి ఉన్నాము: ఏకకాలంలో serviceలను నిర్వహించే ఏకకాల serverలు మరియు మరొక serviceను ప్రారంభించే ముందు ఒక serviceను పూర్తి చేసే పునరావృత serverలు.
ఈ server-client సంబంధాలు చాలా బలంగా ఉన్నాయి కానీ సమర్థవంతంగా ఉండాలి.
కొన్ని యాప్‌లలో,Data మరియు application ప్రామాణికత కోసం విభిన్నంగా కమ్యూనికేట్ చేస్తాయి.
client-server architecture client అభ్యర్థనలను నిర్వహించే load-బ్యాలెన్సింగ్ server‌లను కలిగి ఉంటుంది.
clientు మరియు serverలు సందేశాలను మార్పిడి చేస్తాయి మరియు client సాధారణంగా తక్కువ powerful యంత్రం.
server అనేది load-బ్యాలెన్స్‌డ్ cluster లేదా Independent యంత్రం కావచ్చు.
ఉదాహరణకు, mobile‌లు లేదా ల్యాప్‌tap‌ల వంటి client‌లు తక్కువ powerfulవి అయితే, HTTP server బలంగా ఉంటుంది.
మూడు లేయర్‌లు ఉన్నాయి: ప్రెజెంటేషన్, లాజికల్ మరియుData.
ఈ త్రీ-టైర్ architecture దాని utility కారణంగా ప్రజాదరణ పొందింది.
cloud computing‌లో, client-server model అనేది server client అభ్యర్థనలను నిర్వహించే సాధారణ serviceా model.
cloud‌లో, IaaS, PaaS, SaaS వంటి complex modelలు ఉన్నాయి.
client‌లను serviceలకు connect చేయడానికి ప్రతి client-server model‌కు server ప్రోగ్రామ్ అవసరం.
cloud‌లో, విభిన్న XaaS model‌లు ఉన్నాయి.
client-server model‌లలో, load బ్యాలెన్సింగ్ మారవచ్చు, కానీ cloud‌లో, ఇది ఎల్లప్పుడూ సమతుల్యంగా ఉంటుంది.
cloud client-server model‌లా కాకుండా అనంతంగా స్కేల్ చేయగలదు.
cloud computing సామర్థ్యం మరియు మెరుగైన వనరుల వినియోగంపై దృష్టి పెడుతుంది.
cloud serviceలను పొరలుగా విభజిస్తుంది: కార్యకలాపాలు, కార్యాచరణ వ్యవస్థ మౌలిక సదుపాయాలు మరియు వివిధ serviceలు.
ప్రతి లేయర్ వద్ద, IaaS, PaaS లేదా SaaS వంటి serviceలు అందించబడతాయి.
ఈ serviceలు వ్యాపార ప్రక్రియలను అమలు చేయడంలో సహాయపడతాయి మరియు developmentలో సహాయపడతాయి.
వ్యాపార ప్రక్రియను serviceగా పొందడం వంటి వ్యాపార ప్రక్రియ కోసం నేను దీన్ని ఉపయోగిస్తున్నాను.
consumerలు నేరుగా ఇంటరాక్ట్ అయ్యే లేదా APIల ద్వారా వివిధ Service model‌లకు connect అయ్యే ప్రెజెంటేషన్ లేయర్ కూడా ఉంది.
వేర్వేరు Service providerలు వివిధ రకాల APIలను ఉపయోగిస్తున్నారు మరియు మేము వాటిని ఉపయోగించి connect చేస్తాము.
కేవలం APIని అందించడం వలన మీరు serviceా ప్రదాతగా మారలేరు; consumerలు అనుకూలీకరించిన యాప్‌లు లేదా ప్రత్యేక ఇంటర్‌ఫేస్‌లతో connect కావాలి.
Service ఇంటిగ్రేషన్ కోసం సాలిడ్ ఆర్కెస్ట్రేషన్ Engine వంటి మొత్తం System‌కు ఇంటిగ్రేటెడ్ ప్లాట్‌ఫారమ్ అవసరం.
service నాణ్యత కోరుకున్న స్థాయికి అనుగుణంగా ఉందో లేదో మేము తనిఖీ చేస్తాము.
మేము వివిధ serviceలకు ఎలా connect చేయాలో గుర్తించడానికి సమాచార రకాలను ఉపయోగిస్తాము.
మొత్తం వ్యవస్థ యొక్క అవస్థాపన మరియు నిర్వహణను నిర్వహించడం, మొత్తం పాలన కీలకమైనది.
మేము చట్టపరమైన problemలతో వ్యవహరిస్తాము మరియు ఫెడరల్ చట్టాలు మరియు నిబంధనల కోసం విధానాలను అమలు చేస్తాము.
కాబట్టి, మేము విభిన్న serviceా modelలను ఉపయోగిస్తున్నాము.
SaaS, PaaS మరియు IaaSలను రవాణాతో పోల్చడం ద్వారా వాటిని కొంచెం ఎక్కువ డైవ్ చేద్దాం.
రవాణాలో, రోడ్లు మౌలిక సదుపాయాలు, వాహనాలు ప్లాట్‌ఫారమ్‌లు మరియు వస్తువులు లేదా వ్యక్తులు సాఫ్ట్‌వేర్ లేదా సమాచారం వంటివి.
cloud computing‌లో, మేము in‌ఫ్రాస్ట్రక్చర్, ప్లాట్‌ఫారమ్‌లు మరియు టాస్క్‌లను చేస్తున్న విభిన్న యాప్‌లను కలిగి ఉన్నాము.
SaaS అంటే ఏమిటో మాకు తెలుసు, కాబట్టి పునరావృతం చేయవలసిన అవసరం లేదు; ఇది internet‌లో pay-యాజ్-యు-go model‌లో ఉపయోగించే సాఫ్ట్‌వేర్.
SaaS features వాణిజ్య సాఫ్ట్‌వేర్‌కు Web access‌ను కలిగి ఉంటాయి, కేంద్రీయంగా నిర్వహించబడుతున్నాయి కానీ పంపిణీ చేయబడతాయి.
ఈ సాఫ్ట్‌వేర్ ఫోకస్ చేయబడిన స్థానం నుండి నిర్వహించబడే విభిన్న అనుకరణలకు మద్దతు ఇస్తుంది.
ఇది ఒకటి నుండి అనేక model‌లో పంపిణీ చేయబడుతుంది, కాబట్టి consumerలు app‌గ్రేడ్‌ల గురించి ఆందోళన చెందాల్సిన అవసరం లేదు.
SaaSలోని APIలు వివిధ సాఫ్ట్‌వేర్ భాగాల మధ్య ఏకీకరణను అనుమతిస్తాయి.
ఈ ఏకీకరణ institutionలు మరియు బయటి ప్రపంచం మధ్య పరస్పర చర్యలకు ఉపయోగపడుతుంది.
SaaS స్వల్పకాలిక అవసరాలకు ఉపయోగపడుతుంది; మీరు దానిని అవసరమైనప్పుడు మాత్రమే ఉపయోగిస్తారు.
ఉదాహరణకు, ఒక రోజు కోసం ప్రత్యేక పరీక్ష లేదా టాస్క్‌ని అమలు చేయడం, మీరు అన్నింటినీ శాశ్వతంగా అమలు చేయాల్సిన అవసరం లేదు.
పన్ను లేదా బిల్లింగ్ సాఫ్ట్‌వేర్ వంటి కాలానుగుణ డిమాండ్‌లకు SaaS చాలా బాగుంది.
సంవత్సరంలో నిర్దిష్ట సమయాల్లో ఈ application‌లకు డిమాండ్ పెరుగుతుంది.
ప్రసిద్ధ SaaS ఉదాహరణలలో సేల్స్‌ఫోర్స్, CRM మొదలైనవి ఉన్నాయి.
సూపర్-ఫాస్ట్ processing లేదా నిజ-సమయData అవసరమయ్యే application‌లకు SaaS ఉత్తమ ఎంపిక కాకపోవచ్చు.
cloud computing అనేది డిజాస్టర్ మేనేజ్‌మెంట్‌లో వలె ఆలస్యం చాలా కీలకమైన కార్యకలాపాలకు అనువైనదిగా పరిగణించబడదు.
ఇది వ్యాపార ప్రక్రియలను నిర్వహించడం గురించి.
మేము వ్యాపార ప్రక్రియను serviceగా పొందుతున్నాము.
మరొక భాగం ప్రెజెంటేషన్ లేయర్, here consumerలు నేరుగా ఇంటర్‌ఫేస్‌లతో ఇంటరాక్ట్ అవుతారు లేదా వివిధ Service model‌లకు connect అవుతారు.
మేము దాని కోసం APIలను పొందాము.
వివిధ Service providerలు వివిధ రకాల APIలను ఉపయోగిస్తున్నారు.
మేము ఈ APIలను ఉపయోగించి connection‌లను చేస్తాము.
కేవలం APIలను అందించడం వల్ల మమ్మల్ని Service provider‌గా మార్చలేము.
consumerలు కొన్ని యాప్‌లను అనుకూలీకరిస్తారు లేదా ప్రత్యేక ఇంటర్‌ఫేస్‌లతో ఎలా connect అవ్వాలో తెలుసుకుంటారు.
మొత్తం System‌కు ఇంటిగ్రేటెడ్ ప్లాట్‌ఫారమ్ అవసరం
ఓ వీలైనంత దృఢంగా ఉండాలి.
మాకు ఖచ్చితంగా ఏకీకరణకు వేదిక కావాలి.
ప్రత్యేకంగా, హార్డ్‌వేర్‌ను సమగ్రపరచడానికి మరియు serviceా ఏకీకరణను ఆర్కెస్ట్rate చేయడానికి మాకు నిర్మాణాత్మక విధానం అవసరం.
ఉపయోగించిన serviceలను అమలు చేయడానికి ఇంటిగ్రేషన్ Engine‌ను సెటప్ చేయాలి.
service నాణ్యత కోరుకున్న స్థాయికి అనుగుణంగా ఉందో లేదో మేము తనిఖీ చేస్తాము.
మేము వివిధ serviceలకు ఎలా connect చేయాలో గుర్తించడానికి సమాచార రకాలను ఉపయోగిస్తాము.
మొత్తం వ్యవస్థ యొక్క అవస్థాపన మరియు నిర్వహణను నిర్వహించడం, మొత్తం పాలన కీలకమైనది.
మేము చట్టపరమైన problemలతో వ్యవహరిస్తాము మరియు ఫెడరల్ చట్టాలు మరియు నిబంధనల కోసం విధానాలను అమలు చేస్తాము.
కాబట్టి, మేము విభిన్న serviceా modelలను ఉపయోగిస్తున్నాము.
SaaS, PaaS మరియు IaaSలను రవాణాతో పోల్చడం ద్వారా వాటిని కొంచెం ఎక్కువ డైవ్ చేద్దాం.
రవాణాలో, రోడ్లు మౌలిక సదుపాయాలు, వాహనాలు ప్లాట్‌ఫారమ్‌లు మరియు వస్తువులు లేదా వ్యక్తులు సాఫ్ట్‌వేర్ లేదా సమాచారం వంటివి.
cloud computing‌లో, మేము in‌ఫ్రాస్ట్రక్చర్, ప్లాట్‌ఫారమ్‌లు మరియు టాస్క్‌లను చేస్తున్న విభిన్న యాప్‌లను కలిగి ఉన్నాము.
SaaS అంటే ఏమిటో మాకు తెలుసు, కాబట్టి పునరావృతం చేయవలసిన అవసరం లేదు; ఇది internet‌లో pay-యాజ్-యు-go model‌లో ఉపయోగించే సాఫ్ట్‌వేర్.
SaaS features వాణిజ్య సాఫ్ట్‌వేర్‌కు Web access‌ను కలిగి ఉంటాయి, కేంద్రీయంగా నిర్వహించబడుతున్నాయి కానీ పంపిణీ చేయబడతాయి.
ఈ సాఫ్ట్‌వేర్ ఫోకస్ చేయబడిన స్థానం నుండి నిర్వహించబడే విభిన్న అనుకరణలకు మద్దతు ఇస్తుంది.
ఇది ఒకటి నుండి అనేక model‌లో పంపిణీ చేయబడుతుంది, కాబట్టి consumerలు app‌గ్రేడ్‌ల గురించి ఆందోళన చెందాల్సిన అవసరం లేదు.
SaaSలోని APIలు వివిధ సాఫ్ట్‌వేర్ భాగాల మధ్య ఏకీకరణను అనుమతిస్తాయి.
ఈ ఏకీకరణ institutionలు మరియు బయటి ప్రపంచం మధ్య పరస్పర చర్యలకు ఉపయోగపడుతుంది.
SaaS స్వల్పకాలిక అవసరాలకు ఉపయోగపడుతుంది; మీరు దానిని అవసరమైనప్పుడు మాత్రమే ఉపయోగిస్తారు.
ఉదాహరణకు, ఒక రోజు కోసం ప్రత్యేక పరీక్ష లేదా టాస్క్‌ని అమలు చేయడం, మీరు అన్నింటినీ శాశ్వతంగా అమలు చేయాల్సిన అవసరం లేదు.
పన్ను లేదా బిల్లింగ్ సాఫ్ట్‌వేర్ వంటి కాలానుగుణ డిమాండ్‌లకు SaaS చాలా బాగుంది.
సంవత్సరంలో నిర్దిష్ట సమయాల్లో ఈ application‌లకు డిమాండ్ పెరుగుతుంది.
ప్రసిద్ధ SaaS ఉదాహరణలలో సేల్స్‌ఫోర్స్, CRM మొదలైనవి ఉన్నాయి.
సూపర్-ఫాస్ట్ processing లేదా నిజ-సమయData అవసరమయ్యే application‌లకు SaaS ఉత్తమ ఎంపిక కాకపోవచ్చు.
cloud computing అనేది డిజాస్టర్ మేనేజ్‌మెంట్‌లో వలె ఆలస్యం చాలా కీలకమైన కార్యకలాపాలకు అనువైనదిగా పరిగణించబడదు.
మేము PoC చేస్తున్నాము: భావన యొక్క రుజువు, అది ఎలా పని చేస్తుందో చూడటానికి.
కొన్ని అంశాలను పరీక్షించబోతున్నాను, ఇది ఎక్కువ సమయం తీసుకుంటుందో లేదో చూడండి.
ప్రారంభం నుండి ముగింపు వరకు మొత్తం ప్రక్రియ యొక్క శీఘ్ర తగ్గింపు here ఉంది.
మీరు నగదుపై కఠినంగా ఉన్నప్పుడు ఈ IaaS విషయం చాలా బాగుంది.
ఇది నిర్దిష్ట వ్యాపార అవసరాలకు లేదా తాత్కాలిక సెటప్‌లకు సరైనది.
కానీ ఇది ఎల్లప్పుడూ ఉత్తమ ఎంపిక కాదు, ముఖ్యంగా కొన్ని పరిస్థితులలో.
data ఎక్కడ నిల్వ చేయబడి మరియు ప్రాసెస్ చేయబడుతుందనే దాని గురించి కఠినమైన నియమాలు ఉన్నప్పుడు.
కొన్నిtimes చట్టపరమైన problemలు లేదా నిబంధనలు పెద్ద డీల్ కావచ్చు, ముఖ్యంగా ఆఫ్‌షోరింగ్ లేదా అవుట్‌సోర్సింగ్.
మీకు అత్యుత్తమ పనితీరు అవసరమైనప్పుడు, ఇంట్లోనే నిర్వహించడం మంచిది.
మానిటర్ మరియు ఇతర హార్డ్‌వేర్ పైన ఈ VMలు, virtual mission‌లు రన్ అవుతున్నాయి.
తరువాత, మేము వివిధ VMలను సెటప్ చేయవచ్చు.
వీటన్నింటికీ వనరులు మరియు గణన సమయం అవసరం.
మీరు complex టాస్క్‌ల కోసం అత్యున్నత పనితీరును అనుసరిస్తే, IaaSకి వెళ్లే అవకాశం ఉండదు.
వివిధ SaaS providerలు మరియు వారి Tier modelల గురించి మాట్లాడుదాం.
కొన్నింటికి chargeలు, కొన్ని ఉచితం, మరికొన్ని సబ్‌స్క్రిప్షన్ ప్లాన్‌లను కలిగి ఉంటాయి.
PaaS providerలు సారూప్యత కలిగి ఉంటారు, వివిధ ప్లాట్‌ఫారమ్‌లు మరియుDataబేస్ serviceలను అందిస్తారు.
మేము .NET, Web డెవలప్‌మెంట్, ఎంటర్‌ప్రైజ్ యాప్‌లు మొదలైన విభిన్న ఫీచర్‌లు మరియు ఉపయోగాలను చూస్తున్నాము.
వివిధ IaaS providerలు వివిధ హార్డ్‌వేర్ సామర్థ్యాలు మరియు ఆపరేటింగ్ System‌లను అందిస్తారు.
వాటికి వేర్వేరు బిల్లింగ్ విధానాలు కూడా ఉన్నాయి.
కాబట్టి, ఇవి IaaS provider‌ల రకాలు.
మేము చర్చించినట్లుగా, మీరు సాధారణ భాగాలను మళ్లీ ఆవిష్కరిస్తున్నట్లయితే, SaaS మీ కోసం యాప్‌లను నిర్వహిస్తుంది.
XaaSలో, provider రన్‌time వాతావరణాన్ని నిర్వహిస్తారు, కానీ మీData మరియు యాప్ వినియోగానికి మీరు బాధ్యత వహిస్తారు.
IaaSతో, Virtualization మరియు VM provisioning‌కు provider బాధ్యత వహిస్తాడు.
కొన్నిtimes వారు అతిథి OSని అందిస్తారు లేదా మీరే load చేసుకోవచ్చు.
కానీ మిగతావన్నీ IaaS consumerగా మీ ఇష్టం.
cloud computing‌లో మరొక ముఖ్యమైన భాగం నెట్‌వర్కింగ్.
నెట్‌వర్కింగ్ కీలకమైనది ఎందుకంటే ఇది మా హార్డ్‌వేర్ వనరులన్నింటినీ లింక్ చేస్తుంది.
ఇది cloud computing‌కు వెన్నెముక వంటిది, serverలు అధిక వేగంతో పనిచేస్తాయని నిర్ధారిస్తుంది.
నెట్‌work వర్చువలైజ్ చేయబడుతుందా అనేది ఒక ముఖ్యమైన ప్రశ్న.
ప్రత్యేక ఈవెంట్ కోసం మాకు నెట్‌work అవసరమని చెప్పండి.
మేము దాని కోసం రూటర్లు మరియు server‌లను సెటప్ చేయవచ్చు.
విభిన్న వనరులను purchase చేయడం మరియు వాటిని connect చేయడం ఒక ఎంపిక.
అయితే వీటన్నింటిని వర్చువలైజ్ చేసి virtual నెట్‌work‌ని create చేయవచ్చో లేదో పరిశీలించాలి.
కొన్ని ఈవెంట్‌ల కోసం, మేము తాత్కాలిక నెట్‌work‌ని సెటప్ చేయవచ్చు, కొన్ని భాగాలను పరీక్షించవచ్చు, మరికొన్నింటిని ఉపయోగించుకోవచ్చు, ఆపై దాన్ని విడదీయవచ్చు.
కాబట్టి, నిర్దిష్ట అవసరాల కోసం నెట్‌work‌ను నిర్మించడం అనేది ఒక మార్గం.
cloud computing నెట్‌work వనరులను డైనమిక్‌గా కేటాయించడానికి అనుమతిస్తుంది.
VLAN, VPN మరియు విభిన్న ప్రోటోcall లేయర్‌ల వంటి కీలక అంశాలు ఉన్నాయి.
OpenSSH మరియు OpenVPN వంటి సాధనాలు వాస్తవ-ప్రపంచ స్పర్శను అందిస్తాయి.
cloud model‌లలో, నెట్‌వర్కింగ్ సాధారణ OSI stack‌ను అనుసరిస్తుంది.
IaaSలో, providerData లింక్ లేయర్ వరకు హ్యాండిల్ చేస్తుంది మరియు consumerలు మిగిలిన వాటిని నిర్వహిస్తారు.
SaaSలో, మొత్తం stack‌కు provider బాధ్యత వహిస్తారు.
PaaSలో, provider ప్రెజెంటేషన్ లేయర్ వరకు జాగ్రత్త తీసుకుంటారు మరియు consumerలు application లేయర్‌ను నిర్వహిస్తారు.
కాబట్టి, Service model ఆధారంగా, OSI వివిధ రూపాల్లో చూడవచ్చు.
నెట్‌వర్కింగ్ ఉంది
వీటన్నింటిలో ఒక పెద్ద విషయం.
నెట్‌work ఫంక్షన్ Virtualization సరిగ్గా అదే.
మేము ప్రారంభించడానికి ముందు ఒక శీఘ్ర గమనిక. మీకు ఇంకో విషయం చెప్పాలి.
"జట్టు కోసం ప్రాక్టికల్ టెక్.
నెట్‌వర్కింగ్ ద్వారా చాలా జ్ఞానాన్ని వ్యాప్తి చేయండి.
మేము మాDataలోని స్విచ్‌ల వంటి ప్రామాణిక గేర్ గురించి మాట్లాడుతున్నాము.
వీటన్నింటినీ మా in‌ఫ్రాస్ట్రక్చర్‌లో ఉంచడం గురించి మేము చాట్ చేస్తాము.
మరో మాటలో చెప్పాలంటే, మేము ఇప్పుడే payర్కొన్న అంశాలను అందించబోతున్నాము.
ఇది వివిధ హార్డ్‌వేర్‌లపై అమలు చేయగల ప్రామాణిక server సాఫ్ట్‌వేర్.
సాఫ్ట్‌వేర్‌లో నెట్‌work ఫంక్షన్‌లను సెటప్ చేయడం ఇందులో ఉంది మరియు ఇది చాలా కొత్తది.
ఇది చాలా అవసరం మరియు మేము అన్ని చోట్లా పరికరాలను in‌స్టాల్ చేయాల్సిన అవసరం లేదు.
ఇది తక్షణం మారవచ్చు.
మనం మాట్లాడే తదుపరిసారి నేను దీని గురించి కొంచెం ఎక్కువగా వెళ్తాను.
మనకు మౌలిక సదుపాయాలు ఉంటే.
స్వాగతం.
నేడు, మన cloud architecture పై కొంత చర్చ
కొనసాగుతుంది మరియు ఒక cloud యొక్క
కొన్ని ప్రత్యేకమైన అంశాలను, అందులో
ఒకటి Virtualization  చూద్దాం.
మునుపటి Lecture  లలో మనము వివిధ
రకాలైన Service modelస్ పై చర్చించాం
, అలాగే cloudలో వివిధ రకాలైన deployమెంట్
modelలు,అయిన public , private ,
hybrid మరియు community cloud లు ఉన్నాయి.
వేర్వేరు అంశాలు మరియు అన్ని రకాలైన
serviceలు వేర్వేరు రకాలైన మోహరింపు modelలలో
host చేయబడతాయి, సరియైనవి.
ఒక public cloud, payరులో
సూచించినట్లుగానే ఇది ఎక్కువ మందికి
అందుబాటులో ఉంటుంది.
కనుక, దీన్ని ఎవరైనా purchase చేయవచ్చు
మరియు ఇది internet అంతటా అందుబాటులో
ఉంటుంది.
చాలా ప్రసిద్ధ ఉదాహరణలలో కొన్ని Google app Engine, microsoft azure, IBM cloud,
amazon EC2 మొదలనవి, అనేక ఇతర cloud
 లు ఉన్నాయి.
ఈ public cloud ని ఒక institution లేదా
వ్యక్తిగత అవసరాలకు Subscribe 
చెయ్యొచ్చు.
internetలో ఈ public cloud సబ్స్క్రిప్షన్  మరియు దాని
services  గురించిన వివరాలు ఉంటాయి.
కాబట్టి, ఈ cloud  infrastructure
 లు సామాన్య ప్రజానీకం, institutionలు
, enterprise  లు మరియు ఎవరైతే
చెల్లించి , ఉపయోగించగలరో వారి కోసం కేటాయించబడతాయి,
ఇందులో ఖచ్చితంగా కొన్ని చట్టపరమైన
విధాన problemలు ఉన్నాయి.
కాబట్టి, ఇది వ్యాపారం, విద్యావేత్తలు, ప్రభుత్వ
institution లేదా వాటి యొక్క కొన్ని Hybridizationల
ద్వారా నిర్వహించబడుతుంది.
ఇది cloud provider యొక్క అదీనంలో
ఉంటుంది.
కాబట్టి, భౌతికంగా ఇది CSP యొక్క ఆవరణలో
లేదా premisesలో ఉంటుంది, అందుచే
computing infrastructure, storage
infrastructure మరియు ఇతర
రకాలైనవి CSP లు లేదా cloud provider
premisesలో ఉంటాయి, అంతేకాని private
లేదా consumerల అదీనంలో ఉండవు, కాబట్టి
ఇది ఒక అంశం.
మరియు public అమరికలో, provider
యొక్క computing మరియు storage 
resources  అధిక మొత్తంలో సమర్థవంతంగా
ఉంటాయి , కాబట్టి ఇది అందరికీ ఉపయోగపడుతుంది.
Communication లింకు లు ,public
internet , service ల మీద
అమలు చేయబడతాయి; మరియు cloud service
 అనేది అన్ని client  యొక్క
ఒక విభిన్న సమూహం పై పనిచేస్తుంది
మరియు వాటిలో అందరూ విశ్వాసకులుగా ఉండకపోవచ్చు,
వారిలో కొనదారు హానిపరులు,హాకర్లు మొదలైనవాళ్లు ఉండవచ్చు.
కాబట్టి, ఇది సాధారణంగా ఒక service provider
ను కలిగి అందరికీ , ఎవరైతే Subscribe
 చేసుకుంటారో వారందరికి ఉపయోగకరంగా
ఉంటుంది.
ఇందులో విభిన్న రకాల consumerలు ఉంటారు.
విలక్షణమైన లక్షణాలలో ఒకటి workload
స్థానాలు client కు తెలియవు , ఇది ప్రధానమైన
వాటిలో ఒకటి consumerనిగా మన virtual machine మరియు మన వాస్తవికData ఎక్కడ ఉంటుందో
అంటే ఏ server లో లేదా ఏ virtual
machine  లో ఉంటుందో మనకు తెలియదు,
కాబట్టి, security మరియు ఇతర అంశాల గురించి
చట్టపరమైన మరియు విధానపరమైన అంశంపై
మీరు కఠినంగా లేకుంటే, మీరు శ్రద్ధ వహించకపోతే,
చాలా కాలం ఉండే మన servicesకి.
multi tens నుంచి ప్రమాదం ఉంటుంది;
అనగా, మన computing మరియు storage 
ఎక్కడ ఉంటుందో అక్కడ ఇతర consumerల
data కూడా ఉంటుంది.
ఇది తార్కికంగా లేదా theoretically సాధ్యం
అవుతుంది.
ఇప్పుడు, కొన్ని institutionలకు చెందిన
వ్యక్తులు లేదా మరికొందరు విశ్వాసం లేనివారు
వుంటే అది మనకు సౌకర్యవంతమైన కాదు, ఇద్దరు వేర్వేరు
consumerలు ఇద్దరూ ఇదే విషయాల్లో పనిచేయగలరు.
కాబట్టి, ఇతర అర్ధంలో here ప్రమాదం ఉంది;
ముందు మనం చూసిన multi-tenancy వలన కూడా నష్టాలు ఉన్నాయి, ఎందుకంటే
అక్కడ services  ఎక్కడ ఉన్నాయో
మనకు తెలియదు,Data servicesని
మరియు ఇతర రకాలైన resources  ని
access చేయడానికి ఒక నిర్ధేశిత channel
ఉన్నదా లేదా అనేది తెలియదు, కనుక, ఈ multi-tenancy వలన ప్రమాదం ఉంది. అందువల్ల, ఒకే machine
లు అన్నీ work load లకు , subscriber
 లకు share చేస్తారు.
ఈ work load లు పోటీదారు work
load లు అన్నీ కలిపి ఒకేచోట ఉంటాయి,
కాబట్టి ఇది reliability మరియు security ప్రమాదం
రెండింటిని పరిచయం చేస్తుంది.
onsite public cloud వినియోగాన్ని
పరిగణనలోకి తీసుకున్న institution network
dependency ని పరిగణించాలి.
ఎప్పుడైనా IIT Kharagpurలో lab ల్లో కొన్ని
public cloud లు నడుపుతున్నాము,
తద్వారా మా మొత్తం నిర్వహణ వ్యయం లేదా
నిర్వహణ load మొత్తం మీద తగ్గుతుంది.
ఇప్పుడు, మొదటి dependency network.
అందువల్ల, network connectivity ఎల్లప్పుడూ వరకు అందుబాటులో
ఉండాలి.
కనుక, ఇది ఒక dependency .
securityకు సంబంధించినDataపై limited
దృశ్యమానత మరియు నియంత్రణ ఉన్నాయి.
కాబట్టి, మనంData యొక్క limited దృశ్యమానతను
కలిగి ఉన్నాము.
data  ఎక్కడ ఉందో మనకు తెలియౌ మరియు
అది ఎలాంటి securityను కలిగి ఉన్నదో తెలియదు,
కేవలం ఒక విధమైన SLA లేదా ఒక provider
 తో మనం కుదుర్చుకున్న ఒక విధమైన ఒప్పనడం
లాంటి MOU మాత్రమే ఉంటుంది.
elasticity ; అlimited resources
 లభ్యత యొక్క స్థితిస్థాపకత లేదా
భ్రాంతి problem ఉంది. కాబట్టి, మీరు public
cloud ని ఉపయోగించినప్పుడు ఇది చాలా బాగా ఉపయోగకరంగా
ఉంటుంది, ఎందుకంటే సిద్దాంత పరంగా మనకు
మరింత computing శక్తి అవసరమైతే elasticity
 ని విడుదల చెయ్యొచ్చు.
ఆ విషయాలు సాధ్యమయ్యేవి.
అందువల్ల, theoretically అనంతమైన scaling
app , scaling down కు అవకాశం
ఉంది.
cloud లోకి మైగ్rate  అయ్యేటప్పుడు
తక్కువ app-ఫ్రంట్  cost  ఉంటుంది.
ఇది మరొక ముఖ్యమైన విషయం.
కాబట్టి, మీరు మీ సొంత private cloud ని నిర్మించాలనుకుంటే, మీరు resources ని
purchase చేసి వాటిని provision  కు
ఉంచాలి, Softwareను install చేయడం
మొదలైనవి అన్నీ ఉంటాయి; here maintenance
problemలను ఎదుర్కోవాలి.
క్కడ చాలా తక్కువ app ఫ్రంట్ ఖర్చు
ఉంటుంది , మీరు చెల్లించి దాన్ని ఉపయోగించుకోండి.
నియంత్రిత డిfault SLA లు ఉంటాయి, కాబట్టి
ఏదో ఒక resource  ని purchase
చేసినప్పుడు అది ప్రామాణికమైనదా
లేదా అని నిర్ధారించేందుకు, provider మరియు
consumerల మధ్య నిర్ధిష్ట service
level agreements  ఉంటాయి.
కాబట్టి, చాలా సందర్భాలలో ప్రత్యేకమైన నిబంధనలను
అనుసరించాల్సిన అవసరం ఉంది, వాటిలో
కొన్ని provider  ఏది ప్రొవైడ్
 చేస్తున్నారు, large scale deployమెంట్
 అనగా ప్రత్యేక రేటుతో, ప్రత్యేకమైన
SLA తో చర్చలు జరిపి తీసుకుంటామో.
కానీ సాధారణంగా ఒక చిన్న institution మరియు
ప్రజలకు ఏది అందించబడుతుందో అది మేము ధృవీకరించాల్సిన
అవసరం ఉంది.
మరొక అంశం private cloud .
మీరు మీ సొంత cloud  ని కలిగి ఉంటారు
మరియు దానిపై పనిచేసే అన్నీ resources
 ని కలిగి ఉంటాము.
కనుక, cloud infrastructure  అనేది ఒకే
institutionకు limitedమై ఉంటుంది.
ఆ institutionకు సంభందించిన అనేక consumerలు
లేదా వ్యాపార విభాగాలు వాటి ప్రత్యేక ఉపయోగం
కోసం దీన్ని వినియోగిస్తారు.
IIT KGP private cloud  resources
 ని, IIT  విభాగాలు, section  లు మొదలైన
వాటిలో అన్నింటిని కేటాయిస్తుంది.
దీని నిర్వహణ అనేది స్వయంగా ఉండచ్చు
లేదా institution ajamanyaంది కావచ్చు లేదా here
మూడవ party management resources 
ని outsource చేయవచ్చు, కానీ ఇది
మీ పరిధిలో, మీ network నియంత్రణలో మరియు
మీ premisesలో ఉంటుంది.
ఇది premises లోపల లేదా బయట కూడా ఉండవచ్చు.
ఇది సాధారణంగా, premisesలో ఉంటాయి లేదా private
సమూహాలు గా ఉంటాయి లేదా private cloud
ని outsource చెయ్యొచ్చు.
here నేను office premisesలోనే ఉన్నాను,
అయితే అది అధికార పరిధి లేదా నా పాలసీ
నియమ నిబంధనలను లేదా institution నియమాలను నిర్వహిస్తుంది.
కనుక, కొన్ని open source మరియు
ఇతర public cloud లో ఒకటి ప్రజాదరణ
పొందిన eucalyptus , open stack, ubuntu enterprise cloud, amazon
VPC - virtual private cloud,
VMware cloud infrastructureస్ suite, microsoft
ECIData centers మొదలైనవి.
private cloud లో అనేక విషయాలు
ఉన్నాయి.
ప్రముఖ నమ్మకానికి విరుద్ధంగా, private
cloud premisesలో ఉండకుండా, మూడవ పక్షం
ద్వారా నిర్వహించబడవచ్చు.
బాధ్యత తీసుకోవడమే కాకుండా, ప్రధానంగా
మొత్తం మీద నియంత్రణను కొనసాగించాలని కోరుకుంటున్నాను,
కానీ నేను ప్రాధమికంగా ఆవరణలో ఉన్నాను లేదా
నేను ఒక మూడవ పక్షం సహాయంతో కూడా ఒక
ప్రత్యేకమైన resources  ని install
చేసుకోవచ్చు.
అందువలన, రెండు private cloud scenarios
 ఉన్నాయి.
అందులో ఒకటి on site private cloud
, ఇది వాస్తవంగా ఉంది లేదా customer
premisesలో అమలు చేయబడిన private
cloud లకు వర్తిస్తుంది, ఇది privateగా ఉన్న
దాని గురించి మాట్లాడుతున్నప్పుడు మనకు గుర్తుకు వస్తుంది.
customer  premisesలో లో private cloud
 ను implement  చేస్తుంది.
మరొకటి out sourced private cloud
, ఇది private అయినా premises
దాటి Outsource చేస్తుంది.
అందువల్ల, private cloudకు వర్తిస్తుంది,
అక్కడ server side  ను
hosting company కి outsource
చేయబడుతుంది.
on site private cloud
విషయంలో, security అనేది రెండింటి subscriberస్
on site resources మరియు private
cloud resources రెండింటినీ
విస్తరించి ఉంటుంది.
security లేదా మీ చట్టపరమైన నియంత్రణ ప్రాథమికంగా
private cloud ని కలిగి ఉంటుంది.
security perimeter private cloud
resources పై నియంత్రణకు
haami (Not an English word but included for context) ఇవ్వదు, కానీ subscriberస్
ఇతర వనరులపై నియంత్రణను కలిగి ఉంటారు.
అదే on site అయితే, అక్కడ ఏ private
cloud ఉన్నా, దాని యొక్క మొత్తం
resources పై మనం మొత్తం నియంత్రణను
కలిగి ఉంటాము.
కొన్ని అంశాలు client యొక్కon site private
cloud ని నిర్వహించడంలో కొన్ని
అనుకూల లక్షణాలను మరియు ప్రతికూల లక్షణాలు
కలిగి ఉంటాయి, వీటిలో ఒకటి network dependency on site private.
ఇది మీ internet network
పై ఆధారపడి ఉంటుంది.
ఒక institution దాని సొంత cloud నిర్వహించడానికి
లేదా institution సొంత cloud నిర్వహించడానికి
subscriber కి IT నైపుణ్యం అవసరం.
కాబట్టి, దానిని నిర్వహించడానికి
ఒక విధమైన నైపుణ్యం ఉండాలి.
work load  స్థావరాలు client కు తెలియవు.
వివిధ client  లు వేర్వేరు సబ్
unit  లో ఉన్నప్పటికి, work load  స్థావరాలు
client కు తెలియవు.
premisesలో లేదా on site private
cloud లో ఉన్నకూడా, నిజానికి
cloud నుండి inఫ్రాసృక్టురే  ని దాచి పెడుతుంది,
ఎక్కడైతే ఆ institution client  గా లేదా
institution client మరో వైపు ఉంటాయి.
multi-tenancy నుంచి వచ్చే ప్రమాదం
మరో అంశం . ఇంకొక సమయData దిగుమతి egumati
మరియు పనితీరు limitedులు.
hereData దిగుమతి egumati సంభందించిన
problemలు ఉంటాయి ఎందుకంటే చాలాDataను పెరుగుతూ,
తగ్గుతూ ఉంటుంది.
కనుక, on site private cloud network సామర్థ్యం వలన on డిమాండ్
 data  దిగుమతి egumati limitedంగా
ఉంటుంది మరియు real time లేదా complex
processing ఈ networking 
లోపల వలన problemాత్మకంగా మారవచ్చు.
external threat ల నుండి బలమైన security,
ఇది మన network సరిహద్దులోని ఒక
private cloud  అయితే మన network
యొక్క అన్ని ఇతర features వస్తాయి.
మన ముందు lectureలో కొన్నింటిని ప్రస్తావించినట్లుగా,
IIT, Kharagpur దాని పరిశోధన ప్రయోజనం
కోసం ఒక private cloud ని development
చేసింది, దాని payరు Meghamala, అది ఆ network
పరిధిలోనే ఉంది. కాబట్టి, IIT, Kharagpur
కు ఏయే network security limitedులు
లేదా లక్షణాలు ఉన్నాయో , అవన్నీ కూడా ఈ infrastructure
కు వర్తించబడుతుంది.
అందువల్ల, ఇది powerful బలమైన security లక్షణాలను
కలిగి ఉంటుంది.
cloud లోకి మైగ్rate  అవ్వటానికి అధిక
app ఫ్రంట్ cost అవుతుంది.
ఇది మరొక problem.
మన దగ్గర ఒక private cloud ఉన్నట్లైతే.
దానిని install చేసి నిర్వహించడానికి
మరియు private cloud లోకి మైగ్rate
అవ్వడానికి significant ఖర్చు అవుతుంది.
ఇందులో, limited resources  ఉంటాయి, కనుక
కొన్ని times మనం purchase చేయవలసిన
అవసరం రావచ్చు, అది ఇప్పటికే ఉన్న విషయాలతో
సరిగా అనుసంధానం కావాలి.
కొన్ని times, scalable resourceలు
ఉన్నప్పుడు ఈ resources  ఆవసరం పెరగడం,
reduce జరగవచ్చు.
ఏ నిర్దిష్ట సమయం లో అయినా on site
private cloud లో ఊహించిన
work load  మరియు ఖర్చు అనుగుణంగా,
ఒక స్థిర computing మరియు storage 
సామర్ధ్యం కలిగి ఉంటుంది.
మనం ఒక private cloud ని install
చెయ్యాలనుకున్న, storage , computing,
మొదలైనవాటిని అంచనా వేయాలి.
తర్వాత ఒక సదుపాయం, ఒక partnership దీన్ని
x amount purchase చేసి , 1.5 total install
చేస్తే , దాని యొక్క limitedి 1.5x అవుతుంది.
ఇది నేను privateగా ఉపయోగిస్తున్న వాటిలో
ఇంకొక వైవిధ్యమైనది here చర్చిస్తాము,
కానీ నేను దానిని outsource
చేస్తాను, అనగా నిర్వహణ, management మొదలైనవి,
నా objective, institution protection తీసుకోదు
అని కాదు, కానీ అది outsource
చేస్తుంది, కాబట్టి source  లేకుండా
outsource చెయ్యడం.
outsource private cloud
రెండు security limitedులను కలిగి ఉంటుంది,అందులో
ఒకటి cloud లో ఉన్న subscriberఅమలు
చేసేది ,మరియు provider చే అమలు చేయబడేది.
కాబట్టి, ఇది ఒక perimeter.
here ఏమి జరుగుతుందంటే ఒక విధమైన ఛానల్,
ఇతర premisesలో outsource చేయబడిన private
cloudకి లేదా కొన్ని cloud Service
provider యొక్క ఉపసమితి
కి కలుపుతుంది.
కాబట్టి, వీటన్నిటిని కలపడానికి నేను ఒక
ఛానల్ కలిగి ఉంటాను, కానీ చివరికి మొత్తం
private గా ఉంటుంది.
కాబట్టి, outsource private cloud లో నిర్వహించేData మరియు processing
యొక్క security, security limitedుల మరియు సురక్షిత
Communication యొక్క బలం మరియు
లభ్యత పై ఆధారపడి ఉంటుంది.
కాబట్టి, external విషయాల్లో మన infrastructure
 భద్రపరచబడాలని కోరుతున్నాము, మన
కమ్యూనికేట్  అయ్యే ఛానల్ లేదా
network connection లింక్ ఒక
నిర్ధిష్ట స్థాయి వరకు securityను పాటిస్తూ
సురక్షితమై ఉండాలి.
out sourced private cloud 
ఉపయోగించుకోవడంలో ఉన్న ప్రయోజనాలు
మరియు appరయోజనాలు చూద్దాం.
అందులో ఒకటి network dependency  అనగా మనం ముందు చర్చించుకున్నట్లుగా
అన్నీ ఎలా connect చేయబడ్డాయి అనే దాని
పై ఆధారపడటం.
workload స్థానాలను clientకు తెలియకుండా
ఉంచడం లాంటి problemలు.
multi tenancy  problemలు అనగా,
మనం మన private cloud ని ఎక్కడ
hosting చేస్తున్నామో, అక్కడ ఇతర వ్యక్తులు
కూడా private cloud ని host చేయవచ్చు.
data దిగుమతి, egumati మరియు పనితీరు limitedి
అదే problemలు ఉన్నాయి.
external threatస్  నుండి బలమైన
security అవసరం.
ఎందువలన అనగా ఇప్పటికీ మన వ్యక్తిగత విషయాలు
ఉన్నాయి, ఇది completely public కాదు
మరియు అందరూ వ్యక్తులు మన cloud లోకి
రాలేరు, అయితే మీరు బహుశా infrastructure
ని పంచుకోవడం మరింత తక్కువ స్థాయిలో
ఉంటుంది.
కానీ ఉన్నత స్థాయిలో మీరు ఎవరికీ విషయాలు
పంచడానికి లేదు.
cloud లో కి మైగ్rate  అవ్వడానికి Tierలు
మధ్యరకం నుంచి గరిష్టంగా ఉంటాయి ఇవ్వన్ని
కూడా ముందుగా చెప్పుకున్నవే.
మరియు ఎక్కువ సంTier్భాలలో , మనకు ఈ cloud అందించే
provider  లేదా మూడవ party అందించే
provider తో SLA పరంగా చర్చలు అవసరం.
విస్తృతమైన resource లభ్యత బహుశా ఒక ప్రయోజనం,
ఎందుకంటే ఇది limitedం కాదు. నేను ఒక అవకాశాన్ని
తీసుకుంటాను, సాధ్యమైనంత resource లభ్యత
ను పెంచడానికి అభ్యర్థిస్తాను.
provider resource  లేకుండా ఉండరు,
సాధారణంగా వారి దగ్గర resourceలు
ఉంటాయి.
కాబట్టి, ఒక వైపు private cloud
 మరో వైపు public cloud  ఉన్నాయి,
ఇవే కాకుండా మరొక సాధారణ cloud
community cloud ఉంది. కాబట్టి,
మనం ముందుగా చర్చించుకున్నట్లుగా ప్రధానంగా ఇది ఒక
ప్రత్యేక community కి services
ని అందిస్తుంది.
ఇది సాధారణంగా ఒక public మరియు private
రెండింటిలో పనిచేయగలదు మరియు ఇది ప్రాథమికంగా
ఒక ప్రత్యేకమైన ప్రత్యేక community కి
services ని అందిస్తుంది.
ఏదైతే దాని operation కి ఒకే domain లేదా
ఒకే లక్ష్యం కలిగిన interoperating
ఉంటుందో దానికి.
అందువల్ల cloud infrastructure
ని, institution యొక్క ప్రత్యేకమైన community యొక్క
ప్రత్యేకమైన ఉపయోగం కోసం ఉద్దేశించబడ్డాయి,
అంటే వాటికి సంబంధించిన విషయాలు, ఆ community
 యొక్క mission , security అవసరాలు,
పాలసీ సమ్మతి పరిశీలన, మొదలైనవి ఉండవచ్చు,
దీనిని ఆ community లో ఉన్న ఒకటి లేదా
అంతకంటే ఎక్కువ institutionలు నిర్వహించవచ్చు.
కాబట్టి, థర్డ్ party  లేదా వారి Hybridizationతో
అది premisesలో ఉండి ఉండవచ్చు లేదా బయట
ఉండవచ్చు.
అందువల్ల అది premises లోపల లేదా premises
భయట ఉండవచ్చు, అనేక community cloud లు వేర్వేరు service provider
ద్వారా అందించబడుతున్నాయి.
here A, B, C అనే institutionలు మరియు అనేక X, Y, Z institutionలు
ఉన్నాయి.
వాటిని ABC, XYZ వంటి విభిన్న Hybridizationలను ఏర్పరచగలవు
అది ఒక community కావచ్చు; X, Y తో ఏ కలిసి
మరొక community గా ఈవిధంగా వేర్వేరు
community  లు గా ఏర్పడవచ్చు.
అన్నిటిని కలిసి తీసుకురావడానికి
అవకాశం ఉంది. ఒక community కొంత సమయం వరకు ఉండవచ్చు
లేదా ఇతర సమయాలలో ఇది ఉనికిలో ఉండకపోవచ్చు,
రోజువారీ జీవితం లో ఒక institution కు ఒకటి
కంటే ఎక్కువ community  లు ఉండవచ్చు.
మనం మన office లో ఒక భాగమే కావచ్చు.
దానితో పాటు నివాస community  లో
కూడా భాగంగా ఉంటాము.
కాబట్టి, విభిన్న విధానాలు ఉండవచ్చు
మరియు ఇతర విషయాలు కూడా ఉన్నాయి, కానీ
ప్రధాన objective ఏమిటంటే, ఒకే రకమైన
సంబంధిత లేదా work flow  ఉంటుంది.
ఒకే రకమైన వాటిని ఒకే community 
లో తయారుచేయడానికి మరియు ఉత్పాదకతకు
ఈ సంఘం సహాయపడుతుంది.
here మరలా దీని లక్షణాలు ,లాభాలు
మరియు నష్టాలు మొదైలన వాటి గురించి తెలుసుకుందాం.
భాగస్వామ్య institutionలు సరిహద్దు నియంత్రికల
మధ్య ఒక అనుసంధానముతో కలుపబడి ఉంటాయి,
మరియు firewall విధానాలు లేదా సరిహద్దు
విధానాల వంటి వాటి security పారామితుల
ద్వారా access  ను అనుమతించును.
community cloud యొక్క access 
విధానం సంcomplexగా ఉండవచ్చు ఎందుకంటే
ఇందులో ఎక్కువ community  లు ఉంటాయి.
అందువల్ల, access  చేయలేని data
 ను ఏ విధానం లో access  చేస్తున్నాం,
ఎదైనా community  సమాచారాన్ని
మరొక community  కి పంపడం, లాంటివి
limitedం చేయాలి.
వీటికి role  ఆధారిత access నియంత్రణ,
లక్షణం ఆధారిత access నియంత్రణ వంటి విధాన
వివరణ పద్ధతులు ఉన్నాయి; నా role  ఆధారంగా
నేను కొంతDataను access చేస్తున్నాను.
మరియు విస్తరణ modelల యొక్క ఇతర రూపం వలె,
here కూడా మేము network dependency ని కలిగి ఉన్నాము.
subscriber  కి ఇప్పటికీ కొన్ని
IT నైపుణ్యాలు అవసరం ఎందుకంటే, ఇది వివిధ
community విషయాలు నిర్వహించడానికి
అవసరం.
workload స్థానాలు client నుండి
మళ్లీ దాచబడతాయి.
data దిగుమతి egumati మరియు performance
limitedులు, community  ల మధ్య, community
 లోపల ఎక్కువ subscriber 
లు ఉనప్పుడు data  కు సంభందించిన
problemలు ఉన్నాయి.
చాలా సంధార్భాలలో community 
లు చాలా loosely coupled గా ఉంటాయ, తద్వారా
బలమైన securityను నిర్వహించడం, మరింత complexగా
మారుతుంది, ఎందుకంటే మీరు ఇప్పటికీ ఒక
community లో ఉన్నారు, తద్వారా
మీ community విధానాల ఆధారంగా
మరియు మీ సొంత విధానంతో external threatస్ కు మంచి ప్రతిఘటన ఉంటుంది.
cloud కు మైగ్rate  అవ్వడానికి అయ్యే
అధిక స్థిరత్వం లేని app-ఫ్రంట్ ఖర్చులు,
నిజమైన private cloud విషయంలో
మనము చూసినట్లుగా, cloud కు మైగ్rate
 అవ్వడానికి అధిక app-ఫ్రంట్ ఖర్చులు
ఉంటాయి, ఎందుకంటే ఇది public  గా
లభించదు.
కాబట్టి, వీటిని మనం create 
చేసుకోవాలి.
విభిన్న విధానాలు, అంటే కొన్ని institutionలు
కలసి అక్కడ కొన్ని సరిహద్దు నియంత్రికతో
ఏర్పరుస్తాయి.
ఇది private subscriber  మరియు దాని
అంశాలతో కూడుకుని ఉంటుంది.
community cloud అనేది on ప్రిమేసిస్లో లేదా off-premisesలో అయినా ఉంటుంది.
అనగా, ఒక private cloud విషయంలో
మనం చూసినట్లుగా community cloud కూడా outsource చెయ్యవచ్చు.
కాబట్టి, ఒకసారి మేము network dependencyని outsource చేస్తే, work
స్థానాలు clients  కి తెలియదు.
multi-tenancy,Data దిగుమతి
egumati మరియు performance  limitedి problemల
నుండి వచ్చే అపాయం, ఇది మనం చెప్పిన
విధంగా external threatస్ 
ల నుండి powerful security ఉంటుంది.
మోడrate-నుంచి-అధిక app ఫ్రంట్ వ్యయం,
ఒక సొంస్థ లో outsource చేస్తే చాలా load
లు తీసుకుంటుంది.
కాబట్టి, మొత్తం loading మనం in
premise కొనసాగితే, మొత్తం ఖర్చు తక్కువగా
ఉంటుంది.
మరియు theoretically, మీరు outsourcing చేస్తే విస్తృతమైన resource లభ్యత
సాధ్యమే.
మనం theoretically చూసినా లేదా ఆచరణాత్మకంగా
చూసినా నేను ఆ cloud అనేది అన్నిటి Hybridization.
మనం private, public, community
cloud లను కలిగి ఉంటాము.
ప్రత్యేకంగా private cloud , public
cloud  లా కాకుండా ఇది ఒకటి కంటే ఎక్కువ
రకాలైన modelల Hybridizationతో ఉంటుంది.
cloud infrastructure అనేది రెండు విభిన్న
cloud infrastructure  private,
community లేదా public cloud
 ల యొక్క Hybridization.
కాబట్టి, here మూడు రకాలైన అంశాలు ఉన్నాయి,
మరియు ఈ మూడు అంశాల Hybridizationతో ఉన్న cloud
ని ఉపయోగించాలనుకుంటున్నాం.
ఎందుకు, ఇది ముఖ్యం అంటే, అంటే మొదటిది
ఏ విధమైన model ఉపయోగిస్తున్నాం అనేదానిపై ఆధారపడి
ఉంటుంది.
మన దగ్గర ఉన్న కొన్ని consumerల modelలు,
ఏవైతే private గా చెయ్యాలనుకుంటున్నామో
అవి security threatస్ కి మరింత
complexగా లేదా ప్రమాదకరమైనవిగా
ఉంటాయి.
నేను తగిన network సరిహద్దు లేదా network
చుట్టుకొలత securityను కలిగి ఉండాలని అనుకోవడం
లేదు. here కొన్ని resource లో
కొన్ని చాలా secure కావని నేను కోరుకోకపోవచ్చు
లేదా అన్ని విషయాలలోని అన్ని security గురించి
నేను పట్టించుకోను మరియు కొన్నిటిని
public గా తయారు చేయవచ్చు.
విద్యార్థులకు computing labs కోసం
practice sessions ఉంటాయి, అందువల్ల
security స్థాయి విద్యార్థి రికార్డులు లేదా
విద్యార్థుల పరీక్షా విషయాలు మొదలైనవాటిని
ఉంచినప్పుడికంటే చాలా తక్కువగా ఉంటుంది.
కాబట్టి, అదే రకమైన కార్యకలాపాలను కలిగి
ఉండవచ్చు, కానీ కొన్నింటిని మాత్రం బయట కలిగి
ఉంటాను మరియు దానిని outsource
చేయడం మరియు public cloud కి పంపవచ్చు.
మరియు మరొకొన్నింటిని ఆర్థికంగా ఉన్నప్పటికీ,
నా వ్యక్తిగత విషయాలను నేను private
గా ఉంచాలని అనుకుంటున్నాను.
ఇప్పుడు, నేను ఒక private Hybridizationలు
కలిగిన cloud ని తీసుకుంటాను.
సందర్భానుసారంగా, కొన్ని times మీరు
private గా ఏదో ఒకటి చేస్తారనేది
జరుగుతుంది, మరియు మీరు కొన్ని రిసోర్సెస్
ఆకస్మిక పెరుగుదల కారణంగా ఏర్పాటు
చేయవలసి ఉంటుంది.
appపుడు అకస్మాత్తుగా private cloud లో resource provisioning లేదా purchase
చేయడం మొదలైనవి sudeergh ప్రక్రియ.
కనుక, మీరు ఒక స్వల్ప కాలానికి ఒక public
cloud లో resourceని purchase చేయవచ్చు.
అందువల్ల, infrastructure community  ఏకైక institutionలను అలాగే ఉంచుతుంది.
కానీData మరియు applicationలు
portable అయ్యేలా చేసే ప్రామాణిక లేదా
ajamanya సాంకేతికతతో కలిసి సరిహద్దులుగా
ఉంటాయి, ఇది ముఖ్యమైనది.
కాబట్టి, portability అనేదిData కు
మాత్రమే సంబంధించింది కాదు, నేను ఈ private,
public, community అన్ని కలిసి, రెండు
లేదా అంతకంటే ఎక్కువ Hybridizationను కలిగి ఉన్నపుడు,
intra operative అనే ఇతర అంశం
ఉంటుంది, మరో చోటు నుంచి మనము application
తీసుకున్నప్పుడు data అనేది బాగా
పని చేస్తుంది.
data మరియు కొన్నిtimes applicationలు రెండు
కూడా, మన application ఒక private cloud పై నడుస్తున్నది అనుకుందాం, ఇప్పుడు
మీరు ప్రధానంగా public domain కు వెళ్ళే
ఒక VM ను ప్రొవైడ్ చెయ్యొచ్చు.
ఇప్పుడు, కొన్ని రకాల application
లను, అనగా ఏ appప్లికటిన్కి size ను మార్చలో
లేదా ఆ application  యొక్క portability
కి సంభందించిన problemలు పరిశీలించవలసి వుంటుంది.
కాబట్టి, కొన్ని hybrid cloud ఉదాహరణలు, ప్రముఖ windows azure  hybrid cloud, VMware V cloud
యొక్క సామర్ధ్యం కలిగిన కొన్ని ఉన్నాయి;
మరియు ఈ రకమైన విషయాలను అందించే అనేక ఇతర
providerలు ఉన్నాయి.
కాబట్టి, hybrid cloud రెండు
లేదా అంతకన్నా ఎక్కువ private, public
ల Hybridizationతో కూడి ఉంటుంది, అవి hybrid
ను నిర్మించటానికి ఎంపిక చేయబడిన cloud
యొక్క రకాన్ని బట్టి Performance, reliability,
securityలో significant వైవిధ్యాలు ఉన్నాయి.
ఇది ఒక community cloud లేదా
public మొదలైనవి అయి ఉంటే దాని security
లక్షణాలు, వేర్వేరు performance
లో తేడా ఉంటుంది.
కాబట్టి, hybrid cloud చాలా
complexది, ఇది ప్రధానమైన వాటిలో
ఒకటి. మీ ప్రత్యేక application
జరుగుతుందని అనుకుందాం మరియు public
మరియు private cloud Hybridizationపై అమలు
కావాల్సి వస్తే, appపుడు మొత్తం నిర్మాణాత్మక
architecture  చాలా complexదిగా
ఉండవచ్చు, అందువల్ల మీ application
సజావుగా నడుస్తుంది.
కాబట్టి, కొన్నిtimes ఈ private cloud లు చాలా సంcomplexగా ఉంటాయి.
కాలక్రమేణా ఈ cloud లు అన్నీ కలిపి
ఒక hybrid cloud గా మారవచ్చు.
మీ స్వంత private cloud ని మరియు
మరో రెండు public cloudతో ఒక
hybrid cloud ని నిర్మించగలం.
ఇప్పుడు నిబంధనలు మరియు షరతుల ముగింపుల
ఆధారంగా public cloud  ని డిస్connect
చెయ్యొచ్చు, మీ public cloud  నుంచి
మారవచ్చు, వారు మళ్లీ membership పొందాలని
కోరుకోరు మరియు వారు వేరే Tier model
ను కలిగి ఉంటారు, కాబట్టి, ఆ సందర్భంలో,
అక్కడ చేరడం, వదిలివేయడం మరియు క్రొత్త విషయాలను
చేర్చుకోవడం లేదా కొన్నిtimes మీకు
మరింత resources  కు అవసరం కావచ్చు.
కాబట్టి, మీరు మరిన్ని public లేదా
community cloud లను చేర్చుతారు.
ఇది అంతా నిర్వహించ్డం అంటే చాలా సంcomplex
విషయం, అంటే, కాలక్రమేణా, అందులో ఉన్న cloudస్
వెళ్లిపోవచ్చు లేదా చేరవచ్చు మరియు మొత్తం
ప్రక్రియ సంcomplexగా తయారవుతుంది.
కాబట్టి ఇప్పుడు నేను ఏది ఎంచుకోవాలి?
నా deployమెంట్ model ఏమిటి
అనేది పెద్ద ప్రశ్న.
ఇది మీ అవసరం మీద completely ఆధారపడి
ఉంటుంది.
మనది చిన్న institutionను లేదా వ్యక్తులకు,
public cloud మంచి పరిష్కారంగా
ఉంటుంది.
కనుక, మన business ఎక్కువ కాలం appఫ్రంట్
 Tierను భరించలేక , ఒక సొంత private
cloud వెళ్ళడానికి ప్రోత్సహిస్తుంది.
here ఇతర constants , ఇంకొకరికి business
 చెయ్యడం, నేను కొన్ని ఇతర subscriber
 బేస్ లేదా client బేస్ కలిగి ఉండటం, ఇప్పుడు ఈ client, ఒక
storage  provider,Data storage provider కొరకు చూస్తూ ఉంటుంది.
ఇప్పుడు, నేను నా premisesలో ఈ అన్ని
storage లను కలిగి ఉండవచ్చు లేదా
నేను ఈ resources ను outsource
చేస్తాను లేదా ఇతర public cloud  ల నుండి ఈ resources ను అందిస్తారు.
ఇప్పుడు, ఇలా జరిగేది ఎందుకంటే clientస్
 mission complex వారు, అయినా clientస్
అనేవి ఆర్థిక రంగం లేదా రక్షణ రంగం
అయితే , appపుడు ఏమీ జరగదు, here అన్నీ
సొంత విషయంగా ఉండాలి.
కనుక, ఇవి అన్ని మనం చూసే మార్గం పై ఆధారపడి
ఉంటుంది.
నేను hybrid గురించి మాట్లాడినందున, నా
అవసరానికి అనుగుణంగా, private, public
మొదలైన వాటి Hybridizationను కలిగి ఉంటాను.
లేదా నా application  వేర్వేరుగా
, dataను వేర్వేరు వర్గాలుగా వర్గీకరించవచ్చు,
మరియు appపుడు నేను ఈ వర్గాన్ని private
 కు వెళ్లగలనని చెప్తాను, ఈ సమూహం
public కు వెళ్లవచ్చు, ఈ community 
ని community cloud కి వెళ్లవచ్చు.
కాబట్టి, అన్నింటిని నిర్వహించడం లేదా
institution లేదా institution కోసం నిర్వహించడానికి
మరొక పెద్ద సవాలు.
కాబట్టి, మేము ఈ lectureను ముగిస్తున్నాము.
తరువాతి చర్చలలో cloud computing యొక్క ఇతర అంశాలపై మా lecture కొనసాగుతుంది.
ధన్యవాదాలు.
పునఃస్వాగతం! ఈ రోజు, Virtualization‌లోకి ప్రవేశిద్దాం, ఇది మునుపటి ఉపన్యాసాలలో మనం తాకింది.
cloud computing‌లో Virtualization కీలకమైన అంశం మరియు cloud computing ప్రారంభమైనప్పటి నుండి ఇది ఉంది. మనలో చాలామంది దీనిని Linux లేదా Windows System‌లలో ఏదో ఒక రూపంలో ఉపయోగిస్తాము.
Virtualization‌లో భాగమైన virtual LANలు లేదా VPNల వంటి వాటి గురించి కూడా మాకు బాగా తెలుసు.
IaaS వంటి వివిధ serviceలను అందించడానికి cloud computing Virtualization‌ని ఉపయోగిస్తుంది.
సబ్‌స్క్రైబర్‌గా, మీరు virtual mission‌లు, నెట్‌work access, virtual storage మరియు ఫైర్‌వాల్ కాన్ఫిగరేషన్‌లను పొందుతారు, కానీ అవి ఎక్కడ లేదా ఎలా సెటప్ చేయబడతాయో మీకు తెలియదు.
మీరు virtual missionల సమితిని access చేయవచ్చు మరియు మీ స్వంత నెట్‌work మౌలిక సదుపాయాలను కలిగి ఉండవచ్చు.
సాధారణంగా CPU గంటలు, storage మరియు నెట్‌work బ్యాండ్‌విడ్త్ ఆధారంగా సబ్‌స్క్రైబర్‌లు ఈ serviceలను ఎలా చెల్లిస్తారో మరియు ఉపయోగిస్తున్నారో మేము పరిశీలిస్తాము.
cloud providerలు provisioning కోసం సిద్ధంగా ఉన్న virtual missionల సెట్‌ను కలిగి ఉన్నారు.
IIT ఖరగ్‌పూర్‌లో, మేము అభ్యర్థనను బట్టి చిన్నవి, పెద్దవి మరియు అదనపు పెద్దవి వంటి వివిధ రకాల VMలను కలిగి ఉన్నాము.
వేర్వేరు client‌లు వేర్వేరు VMలకు access కలిగి ఉంటారు మరియు providerలు అవసరాల ఆధారంగా VMలను కేటాయిస్తారు.
IaaS కాంపోనెంట్ stack‌లో హార్డ్‌వేర్, ఆపరేటింగ్ System, మిడిల్‌వేర్ మరియు application‌లు ఉంటాయి.
ఆపరేటింగ్ System రెండు లేయర్‌లుగా విభజించబడింది: ప్రివిలేజ్డ్ inనర్ లేయర్ మరియు VMలలో గెస్ట్ ఆపరేటింగ్ System‌లు రన్ అయ్యే హై లేయర్.
cloud providerలు బేర్ మెటల్ హార్డ్‌వేర్ మరియు హైపర్‌వైజర్ లేదా VMMని నియంత్రిస్తారు.
చందాదారులకు అతిథి OS, మిడిల్‌వేర్ మరియు application‌లపై నియంత్రణ ఉంటుంది.
నియంత్రణ బయటి లేయర్‌లలోని సబ్‌స్క్రైబర్‌లకు మరియు లోపలి లేయర్‌లలోని provider‌లకు మారుతుంది.
IaaS cloud‌లో, provider భౌతిక హార్డ్‌వేర్ మరియు హైపర్‌వైజర్‌ను నియంత్రిస్తారు, అయితే చందాదారు అతిథి OS, మిడిల్‌వేర్ మరియు application లేయర్‌ను నిర్వహిస్తారు.
cluster మేనేజర్ cluster‌లోని వనరులను ఎలా గుర్తిస్తుంది మరియు computer మేనేజర్ మరియు cloud మేనేజర్‌తో ఎలా కమ్యూనికేట్ చేస్తుంది అనే దాని గురించి మాట్లాడుదాం.
computer మేనేజర్ cluster మేనేజర్ మరియు cloud మేనేజర్ మధ్య మధ్యవర్తిగా వ్యవహరిస్తారు.
cloud మేనేజర్ వనరుల కేటాయింపు మరియు రీకాన్ఫిగరేషన్ కోసం దిశను సెట్ చేస్తుంది.
cluster మేనేజర్ నిరంతర స్థానిక నిల్వకు అనుసంధానిస్తుంది, ఇది పూత లేదా అన్‌కోటెడ్ కాని asథిర నిల్వ.
VMకి problemలు ఉంటే, అది రికవరీ కోసం స్థానిక నిల్వను ఉపయోగిస్తుంది.
పెర్సిస్టెంట్ లోకల్ storage (PLS) VMల కోసం ఒక పెర్సిస్టెంట్ డిస్క్ వంటి నిల్వను అందిస్తుంది.
మీరు తిరిగి లాగిన్ చేసినప్పుడు, నిరంతర డిస్క్ ఉనికిలో ఉన్నట్లయితే మీData అలాగే ఉంటుంది.
అత్యల్ప స్థాయిలో, cloud మేనేజర్ Virtualization‌ని ఉపయోగించడం ద్వారా చందాదారులకు VMలను అందిస్తుంది.
computer మేనేజర్ రన్నింగ్ VMల స్థితిని మరియు ఎన్ని యాక్టివ్‌గా ఉన్నాయో నిర్వహిస్తుంది.
computer మేనేజర్ మాదిరిగానే VMలను ప్రారంభించడానికి, తాత్కాలికంగా నిలిపివేయడానికి మరియు పునర్నిర్మించడానికి cloud మేనేజర్ కమాండ్ ఇంటర్‌ఫేస్‌ను ఉపయోగిస్తుంది.
మేము తదుపరి Slide‌లలో Virtualization మరియు దాని ఎలిమెంట్‌లను నిశితంగా పరిశీలిస్తాము.
Virtualization అంటే virtual మెమరీ, నెట్‌work‌లు లేదా నిల్వ.
మేము Virtualization ప్లాట్‌ఫారమ్‌పై దృష్టి పెడుతున్నాము, ఇది ఒకే హార్డ్‌వేర్ వనరును బహుళ virtual మెషీన్‌లలో పంపిణీ చేయడానికి అనుమతిస్తుంది.
మీరు ఒకే బేర్ మెటల్‌పై వివిధ యంత్రాలు లేదా VMలను కలిగి ఉండవచ్చు.
మీరు గెస్ట్ OS in‌స్ట్రక్షన్ సెట్‌లు మరియు application sizing‌తో డీల్ చేస్తూ windows‌ని ఒక VMలో మరియు Linuxని మరొకదానిలో రన్ చేయవచ్చు.
VM వనరులు మరియు కొనసాగింపును నిర్వహించడం గమ్మత్తైనది.
Virtualization లేకుండా, ఒకే OS అన్ని హార్డ్‌వేర్ వనరులను నియంత్రిస్తుంది, కానీ Virtualization‌తో, మీరు ఒకే ప్లాట్‌ఫారమ్‌లో బహుళ virtual కంటైనర్‌లను కలిగి ఉండవచ్చు.
ఒకే హార్డ్‌వేర్‌పై application‌లను అమలు చేయడానికి బహుళ OSలను Virtualization ఎలా అనుమతిస్తుంది అని మేము చూశాము.
మీరు ఒక మెషీన్‌లో ఏకకాలంలో రెండు వేర్వేరు OSలను కలిగి ఉండవచ్చు.
Virtualization‌తో, విభిన్న OSలు ఒకదానికొకటి completely వేరుచేయబడి కలిసి పనిచేస్తాయి.
virtual machine మానిటర్ లేదా హైపర్‌వైజర్ అతిథి OSని నేరుగా CPUలో రన్ చేస్తుంది.
అతిథి OS సబ్‌స్క్రైబర్ లేదా client ద్వారా in‌స్టాల్ చేయబడింది మరియు హార్డ్‌వేర్‌పై హైపర్‌వైజర్ ద్వారా అమలు చేయబడుతుంది.
అతిథి మరియు host OS ఒకే సూచనల సెట్‌ను ఉపయోగిస్తే, అవి నేరుగా పని చేస్తాయి; కాకపోతే, సూచనల అనువాదం ఉపయోగించబడుతుంది.
virtual మెషీన్ architecture‌కు మూడు లక్ష్యాలు ఉన్నాయి: సమానత్వం (VMలు అంతర్లీన హార్డ్‌వేర్‌పై నడుస్తున్నట్లుగా ప్రవర్తించాలి), వనరుల నియంత్రణ మరియు సామర్థ్యం.
వనరుల నియంత్రణ అంటే 4 GB మెషీన్ లేదా 60 GB Hard Disk వంటి కేటాయించిన వనరులపై VMలకు పూర్తి నియంత్రణ ఉండాలి.
సమర్థత అనేది హైపర్‌వైజర్ జోక్యం లేకుండానే నేరుగా CPUలో రన్ అయ్యే VM సూచనల గురించి, విషయాలు మరింత ప్రభావవంతంగా ఉంటాయి.
మేము హైపర్‌వైజర్‌ని ఉపయోగించి VMలను అనుకరిస్తాము, ఇది virtual వాతావరణాన్ని నిర్వహించడానికి కీలకమైనది.
CPU సూచనలు ఈ Virtualization ఫీచర్‌లను ఎలా ప్రారంభిస్తాయో పోపెక్ మరియు goల్డ్‌బెర్గ్ వివరించారు.
IaaS స్థాయిలో Virtualization కోసం, మేము సూచనలను మూడు రకాలుగా వర్గీకరిస్తాము: ప్రివిలేజ్డ్, సెన్సిటివ్ మరియు బిహేవియర్ సెన్సిటివ్.
ప్రత్యేక సూచనలను consumer మోడ్‌లో అమలు చేసినప్పుడు ఉచ్చులు ఏర్పడవచ్చు; సున్నితమైన సూచనలు అంతర్లీన వనరులను మారుస్తాయి.
మేము వివిధ స్థాయిలలో పని చేస్తాము, బేర్ మెటల్‌కి దగ్గరగా ఉంటుంది, here Virtualization ప్రతిదీ నిర్వహిస్తుంది.
మనం ఎంత లోతుగా వెళ్తే అంత జాప్యం మరియు అనువాదం అవసరం.
పోపెక్ మరియు goల్డ్‌బెర్గ్ సున్నితమైన సూచనలను అమలు చేస్తున్న VMల గురించి మాట్లాడతారు, ఇవి విశేష సూచనల ఉపసమితులు.
ఈ VMలు మరియు హార్డ్‌వేర్ virtual మెషీన్‌లో రన్ అవుతాయి
మానిటర్లు మరియు వివిధ VMల అనుకరణను అనుమతిస్తాయి.
VM అది రన్ అయ్యే హార్డ్‌వేర్‌కు నిర్దిష్ట సూచనలను అర్థం చేసుకోగలదు మరియు మార్చగలదు.
Virtualization పూర్తి నైరూప్యమైనా లేదా మరేదైనా అమలుపై ఆధారపడి అతివ్యాప్తి చెందుతుంది.
Virtualization యొక్క పరిణామంలో, మేము VMware మరియు Microsoft వినియోగం వంటి పూర్తి Virtualization లేదాByనరీ రీరైటింగ్‌ని కలిగి ఉన్నాము.
రెండవ తరం పారా-Virtualization, ఇది VMware మరియు Xen ద్వారా ఉపయోగించబడే సవరించబడిన అతిథి OSతో కూడిన సహకార Virtualization.
మూడవ తరం హార్డ్‌వేర్-సహాయక Virtualization, ఇది హార్డ్‌వేర్ ప్లాట్‌ఫారమ్ గురించి తెలుసు.
పూర్తి Virtualization CPUతో సహా అన్ని హార్డ్‌వేర్‌లను అనుకరిస్తుంది మరియు ప్రసిద్ధ ఎమ్యులేటర్లు QEMU మరియు Bochs.
పూర్తి Virtualization యొక్క ప్రయోజనాలు మొత్తం VM portabilityని కలిగి ఉంటాయి, అయితే ఇది పనితీరు ఖర్చుతో వస్తుంది.
సాంప్రదాయ x86 architecture‌లో, ప్రివిలేజ్డ్ మోడ్‌లలో అమలవుతున్న OS కెర్నల్స్‌లో హార్డ్‌వేర్ పనితీరు ఖర్చులను అనుకరించడం.
పారా-Virtualization గెస్ట్ OSను సవరించడం మరియు సమర్థత కోసం అధిక కెర్నల్ స్థాయిలో అమలు చేయడం.
System ఎలా సెటప్ చేయబడిందనే దానిపై ఆధారపడి, పూర్తి మరియు పారా-Virtualization రెండింటిలోనూ చెల్లించాల్సిన పనితీరు Tier ఉంది.
పారా-Virtualization అంటే VMM పనితీరును మెరుగుపరచడానికి VMల వ్యాపారంలోకి ప్రవేశిస్తుంది.
ఇది completely అనువదించబడదు కానీ పనితీరును మెరుగుపరుస్తుంది, పెరుగుతున్న ప్రజాదరణ పొందింది.
పారా-Virtualization కోసం, మీరు OS కెర్నల్‌ను మళ్లీ కంపైల్ చేయాలి మరియు వర్చువలైజ్డ్ డ్రైవర్‌లను in‌స్టాల్ చేయాలి.
హార్డ్‌వేర్-సహాయక Virtualization‌లో, Intel VT లేదా AMD V వంటి Processor పొడిగింపులను ఉపయోగించి గెస్ట్ OS రింగ్ 0లో నడుస్తుంది.
ఈ రకమైన Virtualization VMM వ్రాయడానికి సంబంధించిన అనేక problemలను పరిష్కరిస్తుంది.
హార్డ్‌వేర్ సహాయం అంటే నిర్దిష్ట హార్డ్‌వేర్ కోసం నేరుగా కంపైల్ చేయడం, కానీ మీరు VM portabilityని కోల్పోతారు.
సవరించని OSలతో, మీకు మార్పులు అవసరం లేదు, కానీ మీరు మైగ్రేషన్‌లో సౌలభ్యాన్ని కోల్పోతారు మరియు వేగంపై ఆధారపడి ఉంటారు.
నెట్‌work Virtualization IP లేదా ATM-ఆధారిత లేయర్‌ల వంటి సాంకేతికతలను ఉపయోగించి, ఇచ్చిన నెట్‌work‌లోని virtual నెట్‌work‌లను అనుకరించటానికి అనుమతిస్తుంది.
మేము వివిధ దృశ్యాలకు అనువైన ఒక-పరిమాణ-అందరికీ సరిపోయే విధానానికి బదులుగా వివిధ రకాల నెట్‌work‌లను సృష్టిస్తాము.
నెట్‌work Virtualization భవిష్యత్ నెట్‌work architecture‌లు మరియు ప్రోటోcall‌లకు టెస్ట్ బెడ్‌గా పనిచేస్తుంది.
ఇది virtual private నెట్‌work‌లు, ప్రోగ్రామబుల్ నెట్‌work‌లు మరియు ఓవర్‌లే నెట్‌work‌లను కలిగి ఉంటుంది.
నెట్‌work Virtualization‌లో in‌ఫ్రాస్ట్రక్చర్ provider‌లు, Service providerలు, ఎండ్-యూజర్‌లు మరియు బ్రోకర్‌ల మధ్య సంక్లిష్ట సంబంధాలు ఉంటాయి.
నెట్‌work Virtualization యొక్క వ్యాపార model కేవలం నెట్‌work అంశాలకు మాత్రమే కాదు, ఇతర Virtualization అంశాలకు కూడా వర్తిస్తుంది.
మీరు Service provider‌తో in‌ఫ్రాస్ట్రక్చర్ provider అయితే, మీరు వివిధ రకాల నెట్‌work‌లను అనుకరించవచ్చు.
వివిధ Service providerలు ఒకే అంతర్లీన నెట్‌work‌లో ఇతర నెట్‌work రకాలను అనుకరించవచ్చు.
నెట్‌work Virtualization అనేది server‌లతోనే కాకుండా భౌgoళిక ప్రదేశాలలో నిర్దిష్ట పరీక్షలను నిర్వహించడానికి అనుమతిస్తుంది.
server-స్థాయి లేదా IaaS-స్థాయి Virtualization‌కు మించి virtual IP అవస్థాపనను రూపొందించడానికి ఇది చాలా కీలకం.
మేము మా తదుపరి ఉపన్యాసాలలో ఈ అంశాల గురించి చర్చించడం కొనసాగిస్తాము. ట్యూన్ చేసినందుకు ధన్యవాదాలు!
నేను Virtualization‌పై హ్యాండిల్‌ని పొందాను, దానిని నెట్‌వర్కింగ్ మరియు అనేక ఇతర వనరుల కోసం ఉపయోగిస్తున్నాను.
cloud computing‌లో Virtualization‌లో భాగమైన virtual LANలు మరియు VPNల వంటి వాటి గురించి మనందరికీ బాగా తెలుసు.
IaaS వంటి cloud Service‌లలో, సబ్‌స్క్రైబర్‌లు virtual mission‌లు, నెట్‌work access మరియు virtual storage‌ని పొందుతారు, అయితే ఇది ఎక్కడ ఎలా సెటప్ చేయబడిందో వారికి నిజంగా తెలియదు.
అయినప్పటికీ, సబ్‌స్క్రైబర్‌లు నిర్దిష్ట రకాల virtual mission‌లను access చేయవచ్చు మరియు వారి స్వంత నెట్‌work in‌ఫ్రాస్ట్రక్చర్‌ను సృష్టించుకోవచ్చు.
ఖర్చుల విషయానికొస్తే, చందాదారులు సాధారణంగా CPU గంటలు, GBకి నిల్వData మరియు వారు ఉపయోగించే నెట్‌work బ్యాండ్‌విడ్త్ ఆధారంగా చెల్లిస్తారు.
cloud Service providerలు వివిధ అవసరాల కోసం సిద్ధంగా ఉన్న virtual మెషీన్‌ల శ్రేణిని కలిగి ఉన్నారు, IIT ఖరగ్‌పూర్‌లో, here మేము వివిధ సామర్థ్యాలతో VMలను కలిగి ఉన్నాము.
సబ్‌స్క్రైబర్‌లు వారి అవసరాలను బట్టి వివిధ VMలకు access‌ను కలిగి ఉంటారు.
IaaS stack‌లో, హార్డ్‌వేర్, ఆపరేటింగ్ System‌లు, మిడిల్‌వేర్ మరియు application‌ల కోసం లేయర్‌లు ఉన్నాయి.
ఆపరేటింగ్ System‌లో రెండు లేయర్‌లు ఉన్నాయి: హైపర్‌వైజర్ ద్వారా నిర్వహించబడే ప్రివిలేజ్డ్ inనర్ లేయర్ మరియు గెస్ట్ ఆపరేటింగ్ System‌ల కోసం అధిక లేయర్.
cloud providerలు హార్డ్‌వేర్‌పై పూర్తి నియంత్రణను కలిగి ఉంటారు, అయితే చందాదారులు అతిథి OS, మిడిల్‌వేర్ మరియు application‌లపై నియంత్రణను కలిగి ఉంటారు.
నియంత్రణ పంపిణీ చేయబడుతుంది, providerలు లోపలి పొరలను నిర్వహిస్తారు మరియు చందాదారులు బయటి పొరలను నిర్వహిస్తారు.
IaaS సెటప్‌లో, provider భౌతిక హార్డ్‌వేర్ మరియు హైపర్‌వైజర్‌ను నియంత్రిస్తారు, అయితే చందాదారు అతిథి OS మరియు ఇతర లేయర్‌లను నియంత్రిస్తారు.
సబ్‌స్క్రైబర్‌లకు వారి స్వంత అతిథి ఆపరేటింగ్ System‌లను load చేయడానికి మరియు ఆపrate చేయడానికి స్వేచ్ఛ ఉంది, VMలలో వారి కార్యకలాపాలను completely నిర్వహిస్తుంది.
ఈ సెటప్ చందాదారులు అతిథి OSని load చేసిన తర్వాత దానిపై పూర్తి నియంత్రణను పొందేందుకు అనుమతిస్తుంది, cloud provider అంతర్లీన మౌలిక సదుపాయాలను సులభతరం చేస్తుంది.
cloud వాతావరణంలో సబ్‌స్క్రైబర్‌గా, నేను విభిన్న Linux వేరియంట్‌లను load చేయగలను మరియు వాటిపై పూర్తి నియంత్రణను కలిగి ఉంటాను.
IaaS కాంపోనెంట్ stack virtual mission‌లను (VMలు) సృష్టించడానికి ఒకటి లేదా అంతకంటే ఎక్కువ హైపర్‌వైజర్‌లను ఉపయోగిస్తుంది, ప్రతి VM ఒక వివిక్త real మెషీన్‌లా పనిచేస్తుంది.
సబ్‌స్క్రైబర్‌లు VMలకు access‌ను అద్దెకు తీసుకుంటారు, వాటిని వాస్తవమైనట్లుగా నిర్వహిస్తారు
హార్డ్‌వేర్, వాటిని ఆఫ్ చేయడం లేదా పెరిఫెరల్స్‌ను రిమోట్‌గా కాన్ఫిగర్ చేయడం.
సాధారణ cloud architecture‌లో, మీకు ఎగువన cloud మేనేజర్, రెండవ స్థాయిలో cluster మేనేజర్‌లు మరియు దిగువన computer మేనేజర్‌లు (CM) ఉంటారు.
computer మేనేజర్ హైపర్‌వైజర్‌లను మరియు వివిధ రకాల VMలను నిర్వహిస్తుంది మరియుDataబేస్ కంటెంట్‌లను పర్యవేక్షించడానికిData ఆబ్జెక్ట్ నిల్వ కూడా ఉంది.
cloud provider లేనప్పటికీ, నిరంతర స్థానిక నిల్వData అలాగే ఉండేలా చేస్తుంది.
cloud architecture మూడు స్థాయిలను కలిగి ఉంటుంది: కేంద్ర నియంత్రణ కోసం cloud మేనేజర్, computer cluster‌లను నిర్వహించడానికి cluster మేనేజర్‌లు మరియు VMలను అమలు చేసే host computing System‌లు.
cloud వాతావరణంలో ప్రశ్నలు మరియు ఆదేశాలు పై నుండి క్రిందికి ఈ లేయర్‌ల ద్వారా కదులుతాయి.
cloud మేనేజర్ cloud యొక్క public access పాయింట్‌గా పనిచేస్తుంది, చందాదారుల ఖాతాలను మరియు అద్దె వనరులను నిర్వహిస్తుంది.
ఇది చందాదారులను ధృవీకరించడానికి ప్రమాణీకరణ పద్ధతులను ఉపయోగిస్తుంది మరియు అభ్యర్థనల ఆధారంగా ఉన్నత-స్థాయి వనరులను నిర్వహిస్తుంది.
data ఆబ్జెక్ట్ storage (DOS) consumer ఆధారాలు మరియు ఆపరేటింగ్ System‌లకు సంబంధించిన మెటాdataను నిల్వ చేస్తుంది.
cluster మేనేజర్ computer‌లను హై-స్పీడ్ లోకల్ నెట్‌work ద్వారా connect చేస్తుంది మరియు cloud మేనేజర్ నుండి వనరుల కేటాయింపు ఆదేశాలు మరియు ప్రశ్నలను నిర్వహిస్తుంది.
cluster అభ్యర్థనను సంతృప్తిపరచగలదా అని ఇది తనిఖీ చేస్తుంది మరియు దానిని cloud మేనేజర్‌కి తెలియజేస్తుంది.
computer మేనేజర్ cluster మేనేజర్ మరియు cloud మేనేజర్‌ల మధ్య మధ్యవర్తిగా వ్యవహరిస్తుంది, వనరుల కేటాయింపు మరియు ఇతర నిర్వహణ పనులలో సహాయం చేస్తుంది.
మొత్తంమీద, cloud architecture‌లోని ఈ లేయర్డ్ విధానం వనరుల లభ్యత నుండి సబ్‌స్క్రైబర్ అభ్యర్థనలను సమర్ధవంతంగా నెరవేర్చడం వరకు ప్రతిదీ నిర్వహిస్తుంది.
నిర్వాహకులకు ఏమి చేయాలో చెబుతుంది.
cluster మేనేజర్ ఎల్లప్పుడూ స్థానికంగానే ఉంటారు.
నిల్వ వరకు హుక్స్; cluster మేనేజర్ నిల్వ connect చేయబడి ఉంటుంది.
అంటే, ఇది power ఆఫ్ చేయబడినప్పుడుDataను కోల్పోకుండా ఉండే ఒక రకమైన storage లాంటిది.
నిర్దిష్ట virtual మెషీన్ షట్‌down అయినప్పుడు, తప్పిపోయినప్పుడు లేదా కొన్ని problemలు ఉన్నప్పుడు వస్తాయి.
కాబట్టి, ఇది విషయాలలో స్థానిక నిల్వను కలిగి ఉంది.
ఈ PLS అనేది virtual మెషీన్ యొక్క నిల్వ, ఇది ఒక నిరంతర డిస్క్ వంటిది.
కాబట్టి, అదే నిరంతర డిస్క్ ఉన్నట్లయితే, మీరు తదుపరిసారి లాగిన్ అయినప్పుడు,Data అందుబాటులో ఉంటుంది.
మేము cloud మేనేజర్ కార్యకలాపాలు చేస్తున్నాము.
అత్యల్ప స్థాయిలో, ప్రతి cloud computer System‌లో నడుస్తుంది.
virtual mission‌ను అందించడానికి, మేము Virtualization‌ని ఉపయోగిస్తాము.
ప్రాథమికంగా, cloud మేనేజర్ VMలను అందిస్తుంది.
computer మేనేజర్ అందించిన VMలకు సబ్‌స్క్రైబర్ బాధ్యత వహిస్తాడు.
computer మేనేజర్ నడుస్తున్న virtual missionలను ట్రాక్ చేస్తుంది.
ఇది ఎన్ని VMలు రన్ అవుతున్నాయి అనే స్థితి సమాచారాన్ని నిర్వహిస్తుంది.
అంతేకాకుండా, cloud మేనేజర్ virtual mission‌లను ప్రారంభిస్తుంది, పాజ్ చేస్తుంది మరియు పునర్నిర్మిస్తుంది.
ఇది హైపర్‌వైజర్‌తో మాట్లాడటానికి కమాండ్ ఇంటర్‌ఫేస్‌ను ఉపయోగిస్తుంది.
computer మేనేజర్ అవసరమైతే, అదే ఒప్పందం.
here మనం చూసేది Virtualization యొక్క పెద్ద పాత్ర.
తర్వాతి Slide‌లలో Virtualization ఎలా పని చేస్తుందో త్వరితగతిన చూద్దాం.
Virtualization అనేది విస్తృత పదం - మెమరీ, నెట్‌work లేదా నిల్వ కావచ్చు.
మనం ఏదైనా virtual‌గా చేయగలము, దానిని Virtualization ఫ్యాక్టర్ అని పిలుస్తాము.
మేము ప్రధానంగా Virtualization ప్లాట్‌ఫారమ్‌పై దృష్టి పెడుతున్నాము.
Virtualization ఒక computer దాని వనరులను పంచుకుంటూ అనేకం వలె పని చేస్తుంది.
కాబట్టి, ఇది ముఖ్యం; నా దగ్గర ఒక మెషీన్ ఉంది, కానీ చాలా virtual వాటిని సృష్టించగలను.
ఒకే మెషీన్ ఈ virtual వాటిని నడుపుతుంది.
ప్రత్యేక సెటప్‌లో, మీరు ఒకే మెటల్‌పై Windows లేదా Linux వంటి విభిన్న OSని అమలు చేయవచ్చు.
హార్డ్‌వేర్‌లో గెస్ట్ OS సూచనలను ఎలా అమలు చేస్తారు అనే problem ఉంది.
ఇది VMల కోసం యాప్ పరిమాణ సమయాలను మరియు వనరుల నిర్వహణను ప్రభావితం చేస్తుంది.
విషయాల హార్డ్‌వేర్ వైపు చూద్దాం.
Virtualization లేకుండా, ఒక OS అన్ని హార్డ్‌వేర్ వనరులను నియంత్రిస్తుంది.
Virtualization‌తో, ఒకే భౌతిక ప్లాట్‌ఫారమ్ బహుళ virtual కంటైనర్‌లను అమలు చేయగలదు.
కాబట్టి, మేము ఒకే భౌతిక ప్లాట్‌ఫారమ్‌లో బహుళ virtual కంటైనర్‌లను కలిగి ఉండవచ్చు.
ఈ రకమైన Virtualization‌తో మాకు కొంత అనుభవం ఉంది.
ఇది ఒకే హార్డ్‌వేర్‌పై బహుళ OS మరియు యాప్‌లను అమలు చేయడం గురించి.
కాబట్టి, నేను నా మెషీన్‌లో ఒకేసారి రెండు వేర్వేరు OSలను అమలు చేయగలను.
అది OSని వర్చువలైజ్ చేస్తోంది - windows మరియు లైనక్స్‌లను కలిపి అమలు చేస్తోంది.
ఇది డ్యూయల్ బూటింగ్ నుండి భిన్నంగా ఉంటుంది.
Virtualization‌తో, వేర్వేరు OS ఒకే సమయంలో అమలు చేయగలదు.
OS ఒకదానికొకటి completely వేరు.
నిజమైన Virtualization‌తో, ప్రతి ఒక్కటి completely వేరుచేయబడుతుంది.
మరొక ముఖ్య భాగం virtual machine మానిటర్ లేదా హైపర్‌వైజర్.
ఒక హైపర్‌వైజర్ అతిథి OSని నేరుగా CPUలో అమలు చేయడానికి అనుమతిస్తుంది.
నాకు అతిథి OS ఉంది మరియు ఇది in‌స్టాల్ చేయబడింది లేదా సబ్‌స్క్రైబర్ లేదా client ద్వారా రన్ చేయబడింది.
హైపర్‌వైజర్ ఈ అతిథి OSని నేరుగా హార్డ్‌వేర్‌లో అమలు చేస్తుంది లేదా in‌స్టాల్ చేస్తుంది.
అదే సూచనల సెట్‌ను ఉపయోగించినట్లయితే అతిథి మరియు host OS పని చేస్తాయి.
అవి వేర్వేరు సెట్‌లను కలిగి ఉంటే, మేము సూచనల అనువాదాన్ని ఉపయోగిస్తాము.
పోపెక్ మరియు goల్డ్‌బెర్గ్ వివరించిన విధంగా దీనికి సవాళ్లు మరియు problemలు ఉన్నాయి.
virtual మెషీన్ architecture సమానత్వం, వనరుల నియంత్రణ మరియు సామర్థ్యం కోసం ఉద్దేశించబడింది.
VMలు వాస్తవ హార్డ్‌వేర్‌లో నడుస్తున్నట్లుగానే పని చేయాలి.
మీరు మెమరీ మరియు డిస్క్ స్payస్ వంటి వనరులపై పూర్తి నియంత్రణను పొందుతారు.
చాలా VM సూచనలు హైపర్‌వైజర్ అవసరం లేకుండా నేరుగా CPUలో అమలవుతాయి.
దానిని పర్యవేక్షించడానికి లేదా నియంత్రించడానికి మిమ్మల్ని అనుమతించే లొకేషన్‌లోని virtual మెషీన్.
ప్రస్తుతం, ఈ అంశాలను తనిఖీ చేయాలి.
అదే పనిలో, పోపెక్ మరియు goల్డ్‌బెర్గ్ CPU ఎలా నిర్దేశిస్తారు అని వివరించారు
అయాన్లు దీనిని జరిగేలా చేస్తాయి.
ఈ features అవసరమని ఓ అధికారి రుజువు చేశారు.
IaaS స్థాయిలో Virtualization పని చేయడానికి, ఈ సూచన మూడు విభిన్న అంశాలుగా విభజించబడింది.
వాటిలో ప్రివిలేజ్డ్ in‌స్ట్రక్షన్ ఒకటి.
consumer మోడ్‌లో అమలు చేసినప్పుడు, అది ట్రాప్‌కు కారణం కావచ్చు.
IO చేయడం లేదా చేయడం వంటి అంతర్లీన వనరును మార్చే సున్నితమైన సూచన here ఉంది.
అతిథి OS, బార్‌లో నడుస్తుంది, వాస్తవికతను మారుస్తుంది; మొదటిది IO లేదా payజీ.
మార్చడం లేదా ప్రస్తుత పట్టికలు, అధికార స్థాయిలో సమాచార సూచనలను తనిఖీ చేయడం.
మీరు మీ ప్రాథమిక నిర్మాణంలో ఈ అంశాలను గుర్తించారు.
మేము స్థాయి 0, స్థాయి 1 మొదలైన వివిధ స్థాయిలలో వివిధ కార్యకలాపాలను నిర్వహిస్తాము.
మరింత దిగువ స్థాయికి వెళ్లడానికి, బేర్ మెటల్‌కి దగ్గరగా వెళ్దాం.
ప్రతిదీ Virtualization నిర్వహణపై ఆధారపడి ఉంటుంది.
తదుపరి స్థాయికి వెళితే, మరింత జాప్యం వస్తుంది మరియు మరింత అనువాదం అవసరం.
కాబట్టి, మేము ఏ స్థాయి కార్యకలాపాలను కలిగి ఉన్నాము? ఏమి చేయాలో ఆలోచిద్దాం; ముఖ్యంగా IaaS సంబంధిత అంశాలను చేస్తున్నప్పుడు.
సెన్సిటివ్ in‌స్ట్రక్షన్‌లోని మొదటి క్లాస్ కంట్role సెన్సిటివ్ మరియు తదుపరి క్లాస్ బిహేవియర్ సెన్సిటివ్.
పోపెక్ మరియు goల్డ్‌బెర్గ్ చెప్payది ఏమిటంటే, ఈ 3 లక్షణాలతో కూడిన virtual మెషీన్ సున్నితమైన సూచనలను అమలు చేస్తుంది.
ప్రివిలేజ్డ్ in‌స్ట్రక్షన్‌లు వీటన్నింటిలో ఒక భాగం, వారి పనిలో చూడవచ్చు.
ఈ రకమైన అంశాలు నిజమైన మరియు వాస్తవమైన virtual mission‌లను చూపుతాయి.
ఈ virtual మెషీన్ మానిటర్‌లలో ఈ VMలు మరియు హార్డ్‌వేర్ రన్ అవుతోంది.
మరియు అవి వేర్వేరు VMలను అనుకరించటానికి అనుమతిస్తాయి.
కాబట్టి, అది మీ అతిథి OS అయి ఉండవచ్చు, ఎక్కడో ఒక VMని అమలు చేస్తోంది.
సూచనలు ఈ హార్డ్‌వేర్‌ను అర్థం చేసుకోగలగాలి.
కాబట్టి, అది మా బాటమ్ లైన్.
VMM అంతా సంగ్రహణకు సంబంధించినది, అది కలిగి ఉన్నా లేదా అతివ్యాప్తి చెందుతుంది.
ఇది అమలుపై ఆధారపడి ఉంటుంది.
Virtualization అనేది ఒక సాధారణ విధానం, సమీపంలోని విధానాలను చూస్తుంది.
మీరు Virtualization యొక్క పరిణామాన్ని చూస్తే, మనకు మొదటి తరం లేదా పూర్తి Virtualization ఉంది, ఇదిByనరీ రీరైటింగ్.
ఇది సాఫ్ట్‌వేర్ ఆధారిత విషయం, దీనికి VMware మరియు Microsoft మద్దతు ఇస్తుంది.
అంతర్లీన హార్డ్‌వేర్‌కు తిరిగి వ్రాయడానికి virtual మెషీన్‌లు డైనమిక్ ట్రాన్స్‌లేటర్‌ను సృష్టించవు.
రెండవ తరంలో: Virtualization లేదా పారా Virtualization, కోoperative Virtualization.
ఇది అతిథి OS లేదా సవరించిన అతిథి యొక్క సహకార Virtualization, VMware మరియు xen మద్దతు ఇస్తుంది.
కాబట్టి, ప్రాథమికంగా, మీరు here చూస్తే, అది VMలోకి లోతుగా త్రవ్విస్తుంది; అంటే ఎడిట్ చేసిన టాపిక్స్.
మూడవ తరం లేదా సిలికాన్-ఆధారిత విషయం, హార్డ్‌వేర్ అసిస్టెడ్ Virtualization ప్లాట్‌ఫారమ్ గురించి తెలుసు.
ప్లాట్‌ఫారమ్‌లో, VMware మరియు xen అందుబాటులో ఉన్నాయి, ఇప్పుడు మీ హార్డ్‌వేర్ ప్లాట్‌ఫారమ్ తెలుసు.
కాబట్టి, ఇది హార్డ్‌వేర్-సహాయక Virtualization.
ఈ సందర్భాలలో, ఈ హార్డ్‌వేర్ ప్లాట్‌ఫారమ్‌లకు ఈ Virtualization గురించి తెలియదు.
మీ హైపర్‌వైజర్‌తో ఏమైంది? పూర్తి Virtualization యొక్క వివిధ అంశాలు.
మొదటి తరం x86/x64 server పూర్తి Virtualization‌ను అందిస్తుంది.
source కోడ్ అనువాదం యొక్క డైనమిక్Byనరీ, మేము చూసినట్లుగా.
CPUతో సహా అన్ని హార్డ్‌వేర్ అనుకరణ చేయబడింది.
2 ప్రముఖ open source ఎమ్యులేటర్‌లు ఉన్నాయి, వాటిలో ఒకటి QEMU మరియు రెండవది Bochs.
పూర్తి Virtualization మొత్తం VM portability యొక్క ప్రయోజనాన్ని కలిగి ఉంది; మీరు ఒక VMని మరొకదానికి తరలించవచ్చు.
కాబట్టి, మొత్తం portability, ఎందుకంటే VMM మాత్రమే, మేము అర్థం చేసుకున్నాము.
ఈ హార్డ్‌వేర్ ఎమ్యులేషన్‌లు పనితీరు Tierతో వస్తాయి.
అందులో లోపం ఉంది.
మేము x86 architecture‌ను అనుకరించాలనుకున్నప్పుడు, హార్డ్‌వేర్ పనితీరుకు ఖర్చు ఉంటుంది.
OS కెర్నల్‌లు ప్రత్యేకించబడ్డాయి; వాటిని రింగ్0లో అమలు చేయాలని మేము కోరుకుంటున్నాము.
ఇప్పుడు మీరు వాటిని ఉన్నత స్థాయిలో అమలు చేస్తే, పరిగణించవలసిన జాప్యం మరియు ఇతర అంశాలు ఉన్నాయి.
కాబట్టి, మేము పనితీరు Tierను చెల్లించాలి.
పారా Virtualization విషయంలో, అతిథి OS సవరించబడింది మరియు రింగ్ 1 లేదా రింగ్ 3లో కెర్నల్ స్థాయిలో పనిచేస్తుంది.
ఇది అధిక-స్థాయి అతిథిగా ఉంటుంది, ప్రత్యేకాధికార సూచనలను ఎలా ప్రాసెస్ చేయాలో తెలుసు.
VMM సూచనలకు అనువదించబడిన ప్రత్యేకాధికారం ఇకపై అవసరం లేదు.
గెస్ట్ మేనేజ్‌మెంట్ System‌లు VMMతో కమ్యూనికేట్ చేయడానికి ప్రత్యేకమైన APIని ఉపయోగిస్తాయి.
అందువలన, ఇది పారా; మీ VMM నిర్దిష్ట రకాల VMలను చొచ్చుకుపోతుంది.
కాబట్టి, ఇప్పుడు ఇది పూర్తి అనువాదం కాదు, కానీ పారా Virtualization పనితీరు పెరుగుతోంది మరియు జనాదరణ పొందుతోంది.
పారా Virtualization విషయంలో, OS కెర్నల్‌ను మళ్లీ కంపైల్ చేయాల్సిన అవసరం ఉంది.
పారా-వర్చువలైజ్డ్ డ్రైవర్‌లను ఉపయోగించడానికి, మీరు వాటిని in‌స్టాల్ చేయాలి మరియు ఇది అతిథి OS స్థాయిలో నిర్వహించబడుతుంది.
మూడవది, హార్డ్‌వేర్-సహాయక Virtualization‌తో, అతిథి OS రింగ్ 0లో నడుస్తుంది.
VMMలు అతిథిలో ప్రత్యేక కార్యకలాపాలను అడ్డగించడానికి Intel VT లేదా AMD V Processor పొడిగింపులను ఉపయోగిస్తాయి.
హార్డ్‌వేర్-సహాయక Virtualization VMMలు ఎదుర్కొంటున్న చాలా problemలను పరిష్కరిస్తుంది, ఇది పెద్ద విషయం.
ఇది హార్డ్‌వేర్ సహాయకుడి లాంటిది; మీరు దీన్ని నేరుగా కంపైల్ చేయగలిగితే, మీరు సెట్ చేసారు.
కానీ ఇలా చేయడం వలన, మీరు VM portabilityని కోల్పోతారు, ఇది కొంచెం తలనొప్పిగా ఉంటుంది, ఎందుకంటే మీరు మైగ్rate చేసినప్పుడు హార్డ్‌వేర్ మీ మెషీన్‌ను అర్థం చేసుకోవాలి.
మార్పు చేయని OS నడుస్తున్నప్పుడు, మీరు OSలను మార్చవలసిన అవసరం లేదు; కానీ లోపాలు, వేగం మరియు వశ్యతతో problemలు ఉన్నాయి.
మైగ్రేషన్ విషయానికి వస్తే, మీరు వశ్యతను కోల్పోతారు మరియు వేగం వలసపై ఆధారపడి ఉంటుంది.
నెట్‌work Virtualization యొక్క కొన్ని అంశాల గురించి చాట్ చేద్దాం.
మేము హార్డ్‌వేర్ స్థాయిని చూశాము, ఇప్పుడు నెట్‌work స్థాయిని చూద్దాం; వాస్తవ నెట్‌work‌లో virtual నెట్‌work‌ను అనుకరించడం వంటిది.
సాధారణ నెట్‌work సాంకేతిక విధానాలు IP-ఆధారిత లేదా ATM-ఆధారితవి.
Virtualization యొక్క ఏదైనా పొర i
n architecture నెట్‌work వనరులను కలిగి ఉంది, నెట్‌work‌లలో వ్యాపిస్తుంది మరియుNode స్థాయి లేదా పూర్తి Virtualization ఉంది.
మనకు ఈ నెట్‌work ఉందని అనుకుందాం మరియు మేము దాని ద్వారా మరొక నెట్‌work‌ని అనుకరిస్తాము.
మా బేస్ నెట్‌work పైన రెండు రకాల virtual నెట్‌work‌లు ఉన్నాయి.
virtual నెట్‌work‌ను అనుకరించడం వల్ల మనం వర్చువలైజ్ చేస్తాము; ఇది సాంప్రదాయ internet నిర్మాణంలో చిక్కుకోలేదు మరియు మరింత స్థలాన్ని అందిస్తుంది.
ఒకే పరిమాణానికి సరిపోయే architecture సాధించడం చాలా కష్టం, కానీ మేము ప్రతి ఒక్కరికీ సరిపోయే నెట్‌work కాన్ఫిగరేషన్‌లను కలిగి ఉన్నాము.
ప్రతిదానికీ విభిన్న దృశ్యాలను సృష్టించే బదులు, మేము అన్నింటికీ సరిపోయేలా ఒక రకాన్ని మాత్రమే తయారు చేయము.
మేము భవిష్యత్ నెట్‌work architecture‌లు మరియు ప్రోటోcall‌ల కోసం టెస్ట్ బెడ్‌ను లక్ష్యంగా చేసుకున్నాము.
కాబట్టి, మేము ఈ విధమైన వర్చువలైజ్డ్ నెట్‌work‌ని పొందాము మరియు virtual private నెట్‌work‌లు, ప్రోగ్రామబుల్ నెట్‌work‌లు మరియు ఓవర్‌లే నెట్‌work‌లు వంటి అంశాలు ఇప్పటికే ఉన్నాయి.
వ్యాపార modelలు, architecture మరియు డిజైన్ సూత్రాలు వంటి వివిధ అంశాలను కవర్ చేస్తూ ఇవి వాటిపై అనుకరించబడతాయి.
in‌ఫ్రాస్ట్రక్చర్ provider‌లు, Service provider‌లు, ఎండ్ యూజర్‌లు మరియు బ్రోకర్‌లు వంటి విభిన్న ఆటగాళ్లు ఉన్నారు, అందరూ సంక్లిష్ట సంబంధాలతో ఉన్నారు.
వ్యాపార model కేవలం నెట్‌work Virtualization కోసం మాత్రమే కాదు, ఇతర Virtualization అంశాల కోసం కూడా.
నేను in‌ఫ్రాస్ట్రక్చర్ provider అయితే, నేను వర్చువలైజ్డ్ నెట్‌work‌ని సృష్టించే Service provider‌ని కలిగి ఉంటాను.
దీని నుండి, కొన్ని నెట్‌work‌లు సక్రియం చేయబడ్డాయి మొదలైనవి.
ఇతర రకాల నెట్‌work‌లు కూడా అనుకరించబడతాయి, కాబట్టి ప్రాథమిక అంతర్లీన నెట్‌work‌లో, మేము వివిధ రకాలను అనుకరించవచ్చు.
ఈ నెట్‌work‌లు చాలా ప్రజాదరణ పొందాయి.
ఇది పరీక్ష కోసం నిర్దిష్ట భౌgoళిక ప్రదేశంలో server‌లను కలిగి ఉండటం కంటే ఎక్కువ.
server‌లను సెటప్ చేయడానికి బదులుగా, మాకు నిర్దిష్ట నెట్‌work in‌ఫ్రాస్ట్రక్చర్ అవసరం.
దీని అర్థం server-స్థాయి Virtualization సరిపోదు; virtual IP in‌ఫ్రాస్ట్రక్చర్‌ని సృష్టించడానికి మాకు నెట్‌work-స్థాయి Virtualization కూడా అవసరం.
మేము మా తదుపరి ఉపన్యాసాలలో మా చర్చలను కొనసాగిస్తాము.
ధన్యవాదాలు!
ఈ cloud computing కోర్సుకు స్వాగతం.
మేము cloud యొక్క వివిధ అంశాలపై మా చర్చను కొనసాగిస్తున్నాము.
ఈ రోజు, మేము అన్నింటినీ కలిపి ఉంచే అంతర్లీన సాంకేతికత మరియు ప్రోటోcall‌లను అర్థం చేసుకోవడానికి ప్రయత్నిస్తున్నాము.
cloud‌లో, మేము XaaS వంటి విభిన్న serviceలను పొందాము - ఏదైనా serviceగా.
కాబట్టి, మేము చేర్చడానికి వివిధ మార్గాలు మరియు ప్రోటోcall‌ల గురించి మాట్లాడబోతున్నాము.
మీరు cloud యొక్క consumer లేదా customer అయితే, మీరు cloud provider serviceను ఉపయోగిస్తున్నారు.
ఈ cloud అనేది cloud provider ఎక్కడ మరియు ఎలా అంశాలను host చేస్తుంది మరియు ఇది Independentంగా ఉంటుంది.
consumerలు client‌ని ఉపయోగించి దీన్ని access చేస్తారు.
ఇది కేవలం Service ఓరియెంటెడ్ architecture కంటే ఎక్కువ; ఇది సాధారణంగా Web serviceలతో అమలు చేయబడుతుంది.
ఆశించిన అవుట్‌పుట్‌ను పొందడానికి వివిధ serviceల మధ్య పరస్పర చర్య చేయడానికి Web serviceలు వదులుగా జతచేయబడతాయి.
ఈ service-ఆధారిత architecture యొక్క ప్రాథమిక అంశాలలో ఒకటి XML.
మేము ఒక lecture లేదా రెండు కోసం XML బేసిక్స్ గురించి మాట్లాడబోతున్నాం.
మీలో చాలా మందికి XMLని ఉపయోగించుకోవచ్చు లేదా తెలిసి ఉండవచ్చు, కానీ అలా చేయని వారి కోసం మేము చాలా ప్రాథమిక అంశాలను కవర్ చేస్తాము.
మేము XML features మరియు అది ఎలా పని చేస్తుందో చర్చిస్తాము.
XML పెరుగుతున్న సాఫ్ట్‌వేర్ సాధన ప్రమాణం.
మేము XML యొక్క విభిన్న లక్షణాలను మరియు అదిDataను ఎలా share చేస్తుందో చూద్దాం.
XMLలో వివిధ రకాల పార్సర్‌లు మరియు సాంకేతికతలు ఉన్నాయి.
XML అనేది HTML లాగా కాకుండా, internet‌లో డాక్యుమెంట్‌లను వీక్షించడానికి విస్తరించదగిన మార్కప్ భాష.
XML అనేదిDataను ప్రదర్శించడం లేదా ప్రాతినిధ్యం వహించడం.
ఇది HTML కంటే సమాచారాన్ని మార్చడానికి ఎక్కువ.
XML టెక్స్ట్-ఆధారిత సింటాక్స్‌ని ఉపయోగిస్తుంది, ఇది చదవగలిగేది మరియు ముద్రించదగిన యూనికోడ్ అక్షరాలను ఉపయోగిస్తుంది.
XMLలో, మీరు ముందే నిర్వచించిన ట్యాగ్‌ల సమితిని కలిగి ఉన్న HTML వలె కాకుండా మీ స్వంత మూలకాలు లేదా ట్యాగ్‌లను నిర్వచించండి.
XML యొక్క సింటాక్స్ నియమాలు స్థిరంగా మరియు సార్వత్రికంగా ఉంటాయి.
అన్ని XML processing సాఫ్ట్‌వేర్ ఈ సింటాక్స్ నియమాలను అనుసరిస్తుంది.
మీకు XMLData మరియు processing సాఫ్ట్‌వేర్ లేదా XML పార్సర్ ఉంటే, అది అన్ని రకాల XMLలను నిర్వహించగలదు.
XML సార్వత్రికమైనది మరియు సులభంగా చదవవచ్చు మరియు ప్రాసెస్ చేయవచ్చు.
ఒక సాధారణ XML ఉదాహరణను చూద్దాం.
XMLలో వెర్షన్, నేమ్‌స్payస్ మరియు వివిధ అంశాల నిర్వచనాలు ఉన్నాయి.
XML ట్యాగ్‌లు consumer నిర్వచించబడ్డాయి.
HTML కాకుండా, మీరు XMLలో మీ స్వంత ట్యాగ్‌లను నిర్వచించవచ్చు.
మీరు మీ స్వంత ట్యాగ్‌లను నిర్వచించినప్పుడు, అవి ఏమిటో మరియు అవి ఎలా ఉపయోగించబడుతున్నాయో మీరు వివరించాలి.
ఉదాహరణకు, నేను 'టేబుల్' అనే ట్యాగ్‌ని నిర్వచించినట్లయితే, అది ఫర్నిచర్ లేదా వర్డ్ processing గురించి నేను స్పష్టం చేయాలి.
మీ ట్యాగ్ అంటే ఏమిటో నిర్వచించడం ముఖ్యం.
XML నేమ్‌స్payస్‌లు మన స్వంత అంశాలు మరియు ఇతర విషయాలను నిర్వచించడంలో మాకు సహాయపడతాయి.
XML పత్రం క్రమానుగతంగా మరియు నిర్మాణాత్మకంగా ఉంటుంది.
మేము పార్ట్ ఆర్డర్ గురించి మాట్లాడుతున్నట్లయితే, ఇది XML నేమ్‌స్payస్‌లోని tapNode లాగా ఉంటుంది మరియు ఇది క్రమానుగతంగా ఉన్నందున ఇది చెట్టులా కనిపిస్తుంది.
ఈ నిర్మాణాత్మక సమాచారాన్ని సూచించడానికి మేము XML ట్రీని సృష్టిస్తాము.
బేసిక్స్‌కి తిరిగి వెళితే, XML అనేది HTML లాంటిది, కానీ సింటాక్స్ గురించి మరింత complexగా మరియు కఠినంగా ఉంటుంది.
XML అనేది కఠినమైన సింటాక్స్ నియమాలు మరియు స్వీయ-వివరించేData.
మీరు XMLలో మీ స్వంత ట్యాగ్‌లు లేదా పదజాలాన్ని తయారు చేసుకోవచ్చు, ఇది మీDataను విస్తరించడానికి మిమ్మల్ని అనుమతిస్తుంది.
ఇది వివిధ System‌లు కమ్యూనికేట్ చేయడంలో సహాయపడటానికి HTML వంటి పంపిణీ చేయబడిన పరిసరాల కోసం రూపొందించబడింది.
XMLతో, మీరు మీ స్వంత ట్యాగ్‌లు మరియు మూలకాలను సృష్టించవచ్చు మరియు System‌లలోDataను విశ్వసనీయంగా ఉపయోగించవచ్చు.
HTML కాకుండా విభిన్నData రకాలను కలపడానికి XML గొప్పది.
ఉదాహరణకు, XMLలో, మీరు కొత్తData సెట్‌ని సృష్టించడానికి రెండు రిపోజిటరీల నుండిDataను కలపవచ్చు.
మీరు పాఠశాలలోని అకడమిక్ మరియు మేనేజ్‌మెంట్Data వంటి విభిన్న మూలాధారాల నుండిDataను కలపవలసి వచ్చినప్పుడు ఇది చాలా ఉపయోగకరంగా ఉంటుంది.
XML విభిన్నData సెట్‌లను మిళితం చేయడం, వాటిని పరస్పర చర్య చేయడం మరియు కొత్తDataను రూపొందించడంలో మీకు సహాయపడుతుంది.
XMLDataను ప్రాసెస్ చేయడం విషయానికి వస్తే, ఇది దాని ట్రీ నిర్మాణాన్ని అర్థం చేసుకోవడం.
HTML కాకుండా, మీరు XMLలో మీ స్వంత అంశాలను నిర్వచించండి.
ఏ అంశాలు ఉన్నాయి, consumer నిర్వచించినవి మరియు అవి ఏమి చేస్తాయో మీరు తెలుసుకోవాలి.
XMLDataను ప్రాసెస్ చేయడానికి, మీరు దానిని internet వనరుల నుండి పొందవచ్చు మరియు ఫైల్ బదిలీ తేదీలు, లావాదేవీ IDలు మరియు వివిధ రకాల బ్యాంకింగ్ లావాదేవీలు వంటి వాటిని కలిగి ఉండవచ్చు.
XMLDataను సేకరించిన తర్వాత, మీరు దీన్ని తరచుగా ప్రత్యేక సాధనాలను ఉపయోగించి ప్రాసెస్ చేస్తారు.
ఇది XML పార్సర్ ద్వారా చేయబడుతుంది, ఇది XMLDataను ప్రాసెస్ చేసే సాధనం.
XMLData సరిగ్గా నిర్మాణాత్మకంగా మరియు బాగా రూపొందించబడిందో లేదో XML పార్సర్ తనిఖీ చేస్తుంది.
XMLData సింటాక్స్ లోపాలను కలిగి ఉంటే, పార్సర్ దానిని ప్రాసెస్ చేయడాన్ని ఆపివేస్తుంది మరియు మినహాయింపును అందిస్తుంది.
కాబట్టి, XMLData యొక్క సింటాక్స్‌ని ధృవీకరించడం మరియు అది బాగా రూపొందించబడిందని నిర్ధారించుకోవడం పార్సర్ యొక్క పని.
బాగా రూపొందించబడిన XMLData ప్రాసెస్ చేయడానికి కనీస అవసరాలను తీరుస్తుంది.
data చెల్లుబాటు కాకపోతే, పార్సర్ ఆపి XML-ఆధారిత application‌ను హెచ్చరిస్తుంది.
data సరిగ్గా రూపొందించబడకపోతే, అది వాక్యనిర్మాణపరంగా సరైనది కాదని అర్థం.
కాబట్టి, మేము గుర్తుంచుకుంటే, మేము వేర్వేరు భాగాలతో వ్యవహరిస్తున్నాము
మేము XML గురించి మాట్లాడుతున్నప్పుడు, DTD - డాక్యుమెంట్ టైప్ డిక్లరేషన్ అని పిలవబడే విషయం ఉంది.
dataబేస్‌లలో వలె, మీరుDataను నిర్వహించడానికి పట్టికలను నిర్వచించినట్లుగా, XMLలో, మీరు DTDలను ఉపయోగించి నిర్మాణాన్ని నిర్వచిస్తారు.
ఇది ఏData ఎక్కడికి వెళుతుందో తెలుసుకోవడానికి స్కీమాలను సెటప్ చేయడం గురించి మరియు ఇది consumer నిర్వచించినది మరియు క్రమానుగతమైనది.
XMLలోని ఎలిమెంట్స్ ఎలా నిర్మాణాత్మకంగా ఉన్నాయో, అవి ఏ స్థాయిలు మరియు రకాలుగా ఉన్నాయో మీరు నిర్వచించాలి.
DTD అంటే మీరు ముందుగా డాక్యుమెంట్ రకాన్ని డిక్లేర్ చేస్తారు.
మీరు మీ పత్ర రకాన్ని పొందిన తర్వాత, మిగిలినData తదనుగుణంగా సరిపోతుంది.
data డిక్లేర్డ్ డూను అనుసరిస్తుందో లేదో తనిఖీ చేయడం పార్సర్ యొక్క పని
క్యూమెంట్ రకం మరియు వాక్యనిర్మాణపరంగా సరైనది.
స్కీమా లేదా డాక్యుమెంట్ రకాన్ని నిర్వచించిన తర్వాత, XML చెల్లుబాటు కావాలి.
XMLData సరైనదేనా కాదా అని నిర్ధారించడానికి పార్సర్ DTDని చూస్తుంది.
XML పార్సర్‌లు DTDలు మరియు అంతర్గత ఎంటిటీలతో కూడా వ్యవహరిస్తాయి, ప్రతిదీ బాగా రూపొందించబడిందో తనిఖీ చేస్తుంది.
XML సరైనదని నిర్ధారించుకోవడానికి DTD కంటెంట్‌కు స్పష్టమైన సింటాక్స్ నియమాలు అవసరం.
పార్సర్ ఎంటిటీ రిఫరెన్స్‌లను వాస్తవ ఎంటిటీతో భర్తీ చేస్తుంది, వాటి ద్వారా పునరావృతమవుతుంది.
తుది ఫలితం application‌ల కోసం సిద్ధంగా ఉన్న XMLData.
XML processing‌లో URLల ద్వారా సూచించబడే external ఎంటిటీలు కూడా ఉండవచ్చు.
పార్సర్ ఈ external ఎంటిటీలను గుర్తిస్తుంది మరియు పరిష్కరిస్తుంది.
పార్సర్ external ఎంటిటీని కనుగొనలేకపోతే, అది ఫైర్‌వాల్ problemల వల్ల కావచ్చు.
రెండు రకాల XML పార్సర్‌లు ఉన్నాయి: ఒకటి అన్ని ఎంటిటీలను తిరిగి పొందుతుంది మరియు మరొకటి వాటిని విస్మరిస్తుంది.
పార్సర్ విధానం మరియు నియమాలు దాని రకాన్ని బట్టి ఉంటాయి.
పార్సర్‌లను ధృవీకరించడం ద్వారా మొత్తం DTD కంటెంట్‌ని ప్రాసెస్ చేస్తుంది, ఏదైనా తప్పు జరిగితే ఆపివేస్తుంది.
ధృవీకరించని పార్సర్‌లు అన్ని నిర్వచించిన ఎలిమెంట్‌లను తిరిగి పొందడానికి ప్రయత్నిస్తాయి, అయితే DTD కంటెంట్ తప్పిపోయినట్లయితే దానిని దాటవేయండి.
పార్సర్ చెల్లుబాటు అవుతుందా లేదా చెల్లుబాటు కానిది అనేది application యొక్క అవసరాలపై ఆధారపడి ఉంటుంది.
పార్సర్ రకం ఖచ్చితంగా application ప్రవర్తనను ప్రభావితం చేస్తుంది.
XML application యొక్క పార్సర్ ఇంటర్‌ఫేస్ అన్వయించిన XMLDataను పొందుతుంది.
పార్సర్‌తో DTD యొక్క సంబంధం దాని ప్రవర్తన మరియు ధ్రువీకరణ తనిఖీలను నిర్ణయిస్తుంది.
ప్రత్యేక problemలలో XML స్పెసిఫికేషన్‌లలో అక్షరాలు మరియు అక్షరాల సెట్‌లతో వ్యవహరించడం కూడా ఉంటుంది.
మీరు వైట్ స్payస్ ట్యాగ్‌ని ఉపయోగించి తెలుపు అక్షరాలను నిర్వచించవచ్చు, కానీ EBCIDIC యొక్క NEL వంటి కొన్ని అక్షరాలు ట్యాగ్‌లుగా ఉపయోగించబడవు.
అక్షర సమితిలో ఎన్‌కోడింగ్ నిర్వచించబడకపోతే, అది కూడా problemే.
అక్షరాలను చేర్చడం మరియు క్యారెక్టర్ సెట్‌లను నిర్వహించడం విషయానికి వస్తే, XML దాని కోసం కొన్ని సాధనాలను కలిగి ఉంది.
భాషా మాండలికాలలో, మేము ప్రాథమికంగా XML డాక్యుమెంట్‌ని ఎలా నిర్వచించాలో మరియు అది ఇతర అంశాలతో ఎలా సంకర్షణ చెందుతుందో తెలుసుకుంటున్నాము.
serviceా-ఆధారిత నిర్మాణంలో, మేము మూడు ప్రధాన భాగాలను కలిగి ఉన్నాము: consumer, provider మరియు కొన్ని రకాల Service రిజిస్ట్రీ లేదా రిపోజిటరీ.
data Communication విశ్వవ్యాప్తంగా ఎలా అమలు చేయబడుతుందో మనం చూడాలి.
SOAP సందేశాల వంటి అంశాలు ప్రాథమికంగా XML డాక్యుమెంట్‌లు ఈ సందర్భంలో ఖచ్చితంగా పని చేస్తాయి.
XML డాక్యుమెంట్‌లు రెండు విధాలుగా వీక్షించబడతాయి: ఒకటి కఠినమైన limitedులతో మరియు మరింత అనుమతించదగినది.
ఇప్పుడు మేము 2001 నుండి ఈ XML స్కీమా విషయాన్ని పొందాము, ఇది XML డాక్యుమెంట్ నిర్మాణాలను నిర్వచించడానికి కొత్త స్పెక్.
XML స్కీమా విభిన్నంగా వ్రాయబడిన DTD వలె కాకుండా XMLలో వ్రాయబడుతుంది.
కాబట్టి, స్కీమాలలో XMLDataను హ్యాండిల్ చేయడం అనేది XML యొక్క ఈ రెండు వర్గాలను అర్థం చేసుకోవడం: బాగా రూపొందించబడిన మరియు చెల్లుబాటు అయ్యే XML.
సరిగ్గా రూపొందించబడిన XML కేవలం వాక్యనిర్మాణపరంగా సరైనది, అయితే చెల్లుబాటు అయ్యే XML స్కీమాకు అనుగుణంగా ఉంటుంది.
అన్ని చెల్లుబాటు అయ్యే XML డాక్యుమెంట్‌లు బాగా రూపొందించబడ్డాయి, అయితే అన్ని బాగా రూపొందించబడిన XML చెల్లుబాటు కాదు.
స్కీమాలు మరియు DTDలు మూలకాలు, గుణాలు, గూడు కట్టుకునే నియమాలు మరియు రకాలను నియంత్రిస్తాయి.
కానీ గుర్తుంచుకోండి, XML స్కీమా లేదా DTDDataను కలిగి ఉండదు; ఇది కేవలం నిర్మాణాన్ని నిర్వచిస్తుంది.
A మరియు B వంటి రెండు institutionలు సమాచారాన్ని పంచుకోవాలనుకున్నప్పుడు, వారు ముందుగా ప్రోటోcall నిర్మాణంపై అంగీకరించాలి.
ఉదాహరణకు, IIT ఖరగ్‌పూర్ మరియు ఒక బ్యాంకు విద్యార్థులDataను మార్పిడి చేయడానికి ముందు దానిని ఎలా రూపొందించాలో అంగీకరించాలి.
సవాలుData మార్పిడి కాదు, కానీ నిర్మాణంపై అంగీకరించడం మరియు goప్యత మరియు నిర్వహణ problemలతో వ్యవహరించడం.
స్కీమాలు DTDల కంటే powerfulవి ఎందుకంటే అవి కేవలం నిర్మాణాన్ని ఉంచడం కంటే ఎక్కువ చేస్తాయి; అవి టైప్ ధ్రువీకరణ మరియు XMLDataబేస్ model‌లకు సంబంధించి ఉపయోగించబడతాయి.
ఈ రోజుల్లో, వివిధ partyల మధ్య పరస్పర చర్య కోసం స్కీమాలు ప్రధానంగా ఉపయోగించబడుతున్నాయి.
DTD డాక్యుమెంట్ రకం బదిలీ అంశాలు మరియు ఇతర రకాలను కలిగి ఉంటుంది, కానీ స్కీమాలో, ఇది సరిగ్గా XML.
foo.org నుండి external DTD గురించి ప్రస్తావించదగినది కూడా ఉంది.
మీరు వేర్వేరు అక్షరాలు లేదా అక్షరాలను చేర్చాలనుకున్నప్పుడు, XML ఈ అక్షరాల సెట్‌లను నిర్వహించడానికి నిర్దిష్ట మార్గాలను కలిగి ఉంటుంది.
XMLలో భాషా మాండలికాలను నిర్వచించడంలో, మేము XML డాక్యుమెంట్ ఎలా నిర్వచించబడిందో మరియు అది ఇతర అంశాలతో ఎలా సంకర్షణ చెందుతుందో తెలుసుకోవడానికి ప్రయత్నిస్తున్నాము.
serviceా-ఆధారిత నిర్మాణంలో, మూడు ప్రధాన భాగాలు ఉన్నాయి: consumer, provider మరియు ఒక విధమైన Service రిజిస్ట్రీ లేదా రిపోజిటరీ.
ప్రతి ఒక్కరూ ఉపయోగించుకునే విధంగాData Communication ఎలా జరుగుతుందనే దానిపై దృష్టి కేంద్రీకరించబడింది.
SOAP సందేశాలు, ఉదాహరణకు, WSDL మరియు UDDI వంటి System‌లలో ఈ రకమైన Communication కోసం ఖచ్చితమైన XML డాక్యుమెంట్‌లు.
XML డాక్యుమెంట్‌లు DTD (డాక్యుమెంట్ టైప్ డెఫినిషన్) లేదా XML స్కీమాను అనుసరిస్తాయా అనే దానిపై ఆధారపడి కఠినంగా లేదా ఎక్కువ అనుమతిని కలిగి ఉండవచ్చు.
XML స్కీమా, 2001లో ప్రవేశపెట్టబడింది, ఇది XML డాక్యుమెంట్ నిర్మాణాలను నిర్వచించే కొత్త వెర్షన్ లాంటిది. ఇది DTDల వలె కాకుండా XMLలోనే వ్రాయబడింది.
రెండు రకాల XML డాక్యుమెంట్‌లు ఉన్నాయి: బాగా రూపొందించబడినవి (కేవలం వాక్యనిర్మాణపరంగా సరైనవి) మరియు చెల్లుబాటు అయ్యేవి (స్కీమాకు అనుగుణంగా).
చెల్లుబాటు అయ్యే XML డాక్యుమెంట్‌లు ఎల్లప్పుడూ బాగా రూపొందించబడతాయి, కానీ అన్ని బాగా రూపొందించబడిన పత్రాలు చెల్లుబాటు కావు.
స్కీమాలు మరియు DTDలు ఎలిమెంట్స్, అట్రిబ్యూట్‌లు మరియు అవి ఎలా ఆర్గనైజ్ చేయబడుతున్నాయి అనే దాని కోసం నియమాలను సెట్ చేయడంలో సహాయపడతాయి.
A మరియు B institutionలు వంటి రెండు institutionలుDataను పంచుకున్నప్పుడు, వారు మొదటData ఎలా నిర్మితమవుతుందో అంగీకరించాలి.
ఉదాహరణకు, IIT ఖరగ్‌పూర్ మరియు ఒక బ్యాంకు విద్యార్థులData లావాదేవీల కోసం ఎలా రూపొందించబడిందనే దానిపై అంగీకరించాలి.
ఇ ఛాలెంజ్ అనేదిDataను మార్పిడి చేయడం మాత్రమే కాదు, goప్యత మరియు నిర్వహణ problemలను కూడా పరిగణనలోకి తీసుకుంటూనే, రెండు partyలకు పని చేసే నిర్మాణాన్ని అంగీకరించడం.
స్కీమాలు DTDల కంటే powerfulవి ఎందుకంటే అవిDataను రూపొందించడం కంటే ఎక్కువ చేస్తాయి; అవి ధ్రువీకరణ మరియుDataబేస్ మోడలింగ్ కోసం ఉపయోగించబడతాయి.
ఈ రోజుల్లో, వివిధ partyల మధ్య పరస్పర చర్యల కోసం స్కీమాలు విస్తృతంగా ఉపయోగించబడుతున్నాయి,Data నిర్మాణాలను నిర్వహించడంలో కీలక పాత్ర పోషిస్తున్నాయి.
DTD వివిధ డాక్యుమెంట్ రకాలు మరియు ఎలిమెంట్‌లను కలిగి ఉండవచ్చు, కానీ స్కీమాలో, అదంతా సరిగ్గా XML డాక్యుమెంట్‌గా నిర్వహించబడుతుంది.
external DTDలు, foo.org నుండి ఒకదానిని ఈ పత్రాలలో సూచించవచ్చు.
మీరు విభిన్న అక్షరాలను చేర్చాలనుకుంటే, దానిని నిర్వహించడానికి XML మార్గాలు ఉన్నాయి.
XMLలో భాషా మాండలికం ఎలా పని చేస్తుందో నిర్వచించేటప్పుడు, మేము XML డాక్యుమెంట్‌ని ఎలా నిర్వచించాలో మరియు అది ఇతర అంశాలతో ఎలా సంకర్షణ చెందుతుందో కనుగొంటాము.
serviceా-ఆధారిత నిర్మాణంలో, మేము మూడు ప్రధాన భాగాలను కలిగి ఉన్నాము: consumerలు, providerలు మరియు కొన్ని రకాల Service రిజిస్ట్రీ లేదా రిపోజిటరీ.
ప్రతి ఒక్కరికీData Communication పని చేయడం ఎలా అనేది పెద్ద ప్రశ్న.
స్కోప్ సందేశాలు SOAP, WSDL మరియు UDDI వంటి System‌లలో గొప్పగా పనిచేసే XML డాక్యుమెంట్‌లు మాత్రమే.
XML డాక్యుమెంట్ రకాన్ని ప్రకటించడానికి ఒక మార్గం ఉంది మరియు మీరు దీన్ని రెండు విధాలుగా వీక్షించవచ్చు: కఠినమైన నిబంధనలతో లేదా మరింత వదులుగా.
DTD అని పిలవబడేది ఉంది, ఆపై 2001 నుండి కొత్త XML స్కీమా ఉంది.
XML స్కీమా అనేది XML డాక్యుమెంట్‌లు ఎలా నిర్మించబడతాయో నిర్వచించడానికి ఒక కొత్త మార్గం.
XML స్కీమాలు XMLలో వ్రాయబడ్డాయి, కానీ DTDలు విభిన్నంగా వ్రాయబడ్డాయి.
XMLDataను నిర్వహించడం విషయానికి వస్తే, XMLలో రెండు రకాలు ఉన్నాయి: చక్కగా రూపొందించబడినవి మరియు చెల్లుబాటు అయ్యేవి.
సరిగ్గా రూపొందించబడిన XML సరైన వాక్యనిర్మాణానికి సంబంధించినది, అయితే చెల్లుబాటు అయ్యే XML నిర్దిష్ట DTD లేదా స్కీమాకు సరిపోతుంది.
అన్ని చెల్లుబాటు అయ్యే XML డాక్యుమెంట్‌లు బాగా రూపొందించబడ్డాయి, అయితే అన్ని బాగా రూపొందించబడిన పత్రాలు తప్పనిసరిగా చెల్లుబాటు కావు.
స్కీమాలు మరియు DTDలు ఎలిమెంట్‌లు మరియు అట్రిబ్యూట్‌లు ఎలా నిర్వహించబడతాయి మరియు అవి ఎలా కలిసి పని చేస్తాయి అనేదానిని నియంత్రించడంలో సహాయపడతాయి.
స్కీమాలు మరియు DTDలు వాస్తవానికిDataను కలిగి ఉండవు; అది ఎలా నిర్మితమైందో వారు నిర్వచిస్తారు.
A మరియు B వంటి రెండు companyలుDataను పంచుకోవాలనుకున్నప్పుడు, వారు మొదటData యొక్క నిర్మాణంపై అంగీకరించాలి.
ఉదాహరణకు, IIT ఖరగ్‌పూర్ మరియు ఒక బ్యాంకు విద్యార్థులDataను మార్పిడి చేసుకునే ముందు వాటిని ఎలా రూపొందించాలో అంగీకరించాలి.
ఇదిData మార్పిడి గురించి మాత్రమే కాదు; ఇది రెండు వైపులా పనిచేసే నిర్మాణాన్ని అంగీకరించడం.
స్కీమాలు DTDల కంటే బలంగా ఉంటాయి ఎందుకంటే అవి కేవలం స్ట్రక్చర్Data కంటే ఎక్కువ చేస్తాయి; అవి రకాలను ధృవీకరించడానికి మరియుDataబేస్ మోడలింగ్ కోసం కూడా ఉపయోగించబడతాయి.
ఈ రోజుల్లో, వివిధ సమూహాల మధ్య పరస్పర చర్యలను నిర్వహించడానికి స్కీమాలు విస్తృతంగా ఉపయోగించబడుతున్నాయి.
DTD ఉదాహరణను డాక్యుమెంట్ చేయడం అనేది ఇదంతా ఎలా పని చేస్తుందో అర్థం చేసుకోవడంలో భాగం.
కానీ స్కీమాలో, పత్రం XML ఆకృతిని మరింత ఖచ్చితంగా అనుసరిస్తుంది.
foo.org వంటి external DTD అని పిలవబడేది కూడా ఉంది, అవసరమైనప్పుడు మీరు దీన్ని సూచించవచ్చు.
ఇది అవసరమైనప్పుడు, మేము బయటి మూలాలను పరిశీలిస్తాము.
దీనర్థం మేము ఇతర DTDలను తనిఖీ చేస్తున్నామని అర్థం వచ్చేDataను అర్థం చేసుకోవడం.
నేను వేరొకరి నుండిDataను పొందినప్పుడు, అది ఏ విధమైనData అని నేను చూడాలనుకుంటున్నాను, అది ప్రత్యేక క్రమంలో లేదా సోపానక్రమంలో నిర్వహించబడితే.
మేము డీల్ చేస్తున్నData రకాన్ని తనిఖీ చేయడానికి నేను external DTDని ఉపయోగించవచ్చు.
పార్సర్‌ని ఉపయోగించి సరైనDataను ఫిల్టర్ చేసి సేకరించడమే పాయింట్.
నేను పొందుతున్న మూలం నుండి నిర్దిష్టData భాగాన్ని ఎంచుకోవడం నా లక్ష్యం.
నేనుData భాగాన్ని ఫిల్టర్ చేయాలనుకుంటున్నాను, కొన్ని application‌ల కోసం unit‌లను సెల్సియస్ నుండి ఫారెన్‌హీట్‌కి లేదా meterల నుండి అడుగులకు మార్చవచ్చు.
మేము XML మరియు దాని ఇతర ఫీచర్‌ల గురించి మాట్లాడుతూనే ఉంటాము, అవి ఇంటర్‌ఆపరేబిలిటీకి ఎలా సహాయపడతాయి.
ముఖ్యంగా, cloud‌లో సాఫ్ట్‌వేర్‌ను Service model‌గా గుర్తించడానికి ఇది ఎలా ఉపయోగపడుతుందో తెలుసుకుందాం.
ధన్యవాదాలు!
మేము మా XML చాట్‌ని కొనసాగిస్తాము. మేము చివరిసారిగా XML బేసిక్స్ గురించి మాట్లాడాము మరియు వివిధ System‌లు కలిసి పని చేయడంలో ఇది ఎలా సహాయపడుతుంది? cloud computing‌కు, ప్రత్యేకించి సాఫ్ట్‌వేర్ serviceగా ఇది కీలకం.
మేము ఇప్పటికే DTDలు మరియు XML స్కీమా XSD గురించి చాట్ చేసాము.
ఈ రోజు, మేము XML బేసిక్స్‌లో మరింత డైవ్ చేస్తున్నాము. XML స్కీమా అనేది XML డాక్యుమెంట్‌లను రూపొందించడం.
IIT ఖరగ్‌పూర్ XMLలో విద్యార్థులDataను ఉంచడం గురించి ఆలోచించండి - ఇది చాలా పెద్దది. వారు వీటిలో కొంత భాగాన్ని external ఏజెన్సీలతో పంచుకోవాలనుకోవచ్చు.
వారు స్కీమాను విభజించి, దానిలోని భాగాలను ఈ ఏజెన్సీలతో పంచుకోవచ్చు.
ఇది మీDataను ఇతర institutionలతో భాగస్వామ్యం చేయడం గురించి, అయితే ముందుగా మీరు ఏ స్కీమాను ఉపయోగిస్తున్నారో గుర్తుంచుకోవాలి.
XML స్కీమాలు వేర్వేరు ప్రదేశాల మధ్యDataను మార్చుకోవడానికి చాలా ముఖ్యమైనవి.
XMLని ధృవీకరించడానికి కొత్త స్కీమా 2001లో పాప్ app చేయబడింది.
ఏదైనా XML పార్సర్ ముందుగాData సరిగ్గా వ్రాయబడిందా, ఆపై అది స్కీమాకు సరిపోతుందో లేదో తనిఖీ చేస్తుంది.
కాబట్టి, చెల్లుబాటు అయ్యే XML డాక్యుమెంట్ అని పిలవబడే దాన్ని మేము పొందాము.
XML కోసం ప్రమాణాలు మరియు ఉత్తమ అభ్యాసాలను సెట్ చేసే W3C అనే విషయం ఉంది. స్కీమాలు స్వచ్ఛమైన XMLలో వ్రాయబడ్డాయి మరియు DTDల కంటే బలంగా ఉంటాయి.
స్కీమాలు పూర్ణాంకాలు, తేదీలు మరియు మరిన్ని రకాలను నిర్వహిస్తాయి, అయితే DTDలు ఎంటిటీలను ప్రకటించలేవు - అది స్కీమాలో మాత్రమే.
కాబట్టి, DTDలు స్కీమాలతో ఎలా సరిపోతాయి? మేము దానిని తదుపరి చూస్తున్నాము.
చివరిసారి మేము XML మరియు DTDల ప్రాథమిక అంశాలను కవర్ చేసాము మరియు ఇప్పుడు మేము అదే విషయాన్ని స్కీమాగా పిలుస్తున్నాము.
XML డాక్యుమెంట్‌లతో మనం ఇంకా ఏమి చేయగలమో మరియు స్కీమాలను నిర్వహించగలమో చూద్దాం.
XML యొక్క మరొక పెద్ద భాగం నేమ్‌స్payస్‌లు, ఇది మీ స్వంతDataను నిర్వచించడానికి మిమ్మల్ని అనుమతిస్తుంది.
మేము విషయాలను ఎలా నిర్వచించాలో మరియు నేమ్‌స్payస్‌ల అవసరం గురించి మాట్లాడాము.
ఇలా, మీరు పట్టికను నిర్వచిస్తే, అది ఎలాంటి పట్టిక? ఫర్నిచర్ లేదా వర్డ్ Processor నుండి ఏదైనా?
నేమ్‌స్payస్‌లో మీరు అంశాలను నిర్వచించే చోట, ప్రతి మూలకం దేనితో వ్యవహరిస్తుందో మీకు తెలియజేస్తుంది.
విభిన్న XML నేమ్ స్payస్‌లను గుర్తించడం వల్ల వివిధ భాషా మాండలికాలను గుర్తించడంలో మాకు సహాయపడుతుంది.
ఇలా, ఒక భాషలోని కీ security కీ కావచ్చు, మరొక భాషలో ఇదిDataబేస్ కీ.
మీరు XMLNS లక్షణాన్ని ఉపయోగించి వివిధ నేమ్‌స్payస్‌లలో వీటిని నిర్వచించారు.
నేమ్‌స్payస్ URL స్ట్రింగ్‌గా ఇవ్వబడింది, కానీ అది నిజానికి దేనినీ సూచించదు.
కాబట్టి, నేమ్‌స్payస్‌లు వివిధ భాషా మాండలికాలను మిళితం చేస్తాయి.
మీకుDataబేస్ కీ మరియు రహస్య కీ వంటి రెండు కీలు ఉంటే, మీరు వాటిని నేమ్‌స్payస్‌లతో XMLలో ఉపయోగించవచ్చు.
మేము ఏ రకమైన కీ గురించి మాట్లాడుతున్నామో payర్కొనడంలో ఇది సహాయపడుతుంది.
డిfault నేమ్‌స్payస్ W3C ద్వారా సెట్ చేయబడింది మరియు ముందుగా నిర్వచించబడిన గణిత నేమ్‌స్payస్ కూడా ఉంది.
కానీ ఈ గణిత నేమ్‌స్payస్ కేవలం ఒక ఉదాహరణ మాత్రమే మరియు నిర్దిష్టంగా ఏమీ అర్థం కాదు.
ముందుకు సాగిద్దాము. మేము XML బేసిక్స్ గురించి మాట్లాడామని మరియు System‌లు కలిసి పనిచేయడానికి ఇది ఎలా సహాయపడుతుందని గుర్తుంచుకోండి? cloud computing‌కు, ప్రత్యేకించి సాఫ్ట్‌వేర్ serviceగా ఇది చాలా ముఖ్యం.
మేము ఇప్పటికీ DTDలు మరియు XML స్కీమా XSD గురించి చర్చిస్తున్నాము.
XML స్కీమా మరియు ఇది XML డాక్యుమెంట్‌ల నిర్మాణాన్ని ఎలా నిర్వచిస్తుంది అనే దానిపై దృష్టి సారించి, మేము ఈరోజు XML బేసిక్స్‌లో లోతుగా డైవ్ చేస్తున్నాము.
IIT ఖరగ్‌పూర్‌లోని ఒక దృష్టాంతాన్ని పరిగణించండి, అక్కడ వారు XMLలో టన్నుల కొద్దీ విద్యార్థులDataను పొందారు. ఇది నిర్వహించడానికి చాలా ఉంది మరియు కొన్నిtimes వారు దానిలో కొంత భాగాన్ని external ఏజెన్సీలతో పంచుకోవాలి.
స్కీమాలోని భాగాలను పంపిణీ చేయడం ఒక పరిష్కారం.
మీ institution యొక్కDataను ఇతర institutionలతో పంచుకోవడం అంటే మీరు ఏ స్కీమాను ఉపయోగించాలో తెలుసుకోవాలి.
వివిధ రిపోజిటరీల మధ్యData మార్పిడికి XML స్కీమా చాలా ముఖ్యమైనది.
XML ధ్రువీకరణ కోసం కొత్త స్కీమా 2001లో వచ్చింది.
XML పార్సర్‌లుData సరిగ్గా వ్రాయబడిందా మరియు స్కీమాతో సరిపోలుతుందో లేదో తనిఖీ చేస్తుంది.
కాబట్టి, చెల్లుబాటు అయ్యే XML డాక్యుమెంట్ అని పిలవబడే దాన్ని మేము పొందాము.
XML స్కీమాలు DTDల కంటే powerfulవి మరియు పూర్ణాంకాలు, తేదీలు మరియు మరిన్నింటి వంటి విభిన్నData రకాలను నిర్వహిస్తాయి.
dataబేస్ స్కీమాను తెలుసుకోవడం వలన మీరు దానిని సృష్టించి, ఆపై XMLDataను ఈDataబేస్కు పంపవచ్చు.
ఎంటిటీలను స్కీమాలలో ప్రకటించలేము, DTDలలో మాత్రమే.
మేము DTDలు స్కీమాలతో ఎలా సరిపోతాయో పోల్చి చూస్తున్నాము.
మేము XML డాక్యుమెంట్‌లతో ఇంకా ఏమి చేయవచ్చు మరియు స్కీమాలను ఎలా నిర్వహించాలో అన్వేషిస్తున్నాము.
XML నేమ్‌స్payస్‌లు మీ స్వంతDataను నిర్వచించటానికి మిమ్మల్ని అనుమతిస్తాయి, ఇది చాలా ముఖ్యమైనది.
మేము విషయాలను నిర్వచించడం మరియు నేమ్‌స్payస్‌లను ఉపయోగించడం యొక్క ప్రాముఖ్యత గురించి మాట్లాడాము.
ఇలా, పట్టికను నిర్వచించడం మరియు అది ఎలాంటిదో payర్కొనడం.
మీరు అంశాలను ఎక్కడ నిర్వచించారనే దానిపై ఆధారపడి, ఇది నేమ్‌స్payస్‌కు చెందినది, ఇది ప్రతి మూలకం దేనికి సంబంధించినదో మీకు తెలియజేస్తుంది.
విభిన్న XML నేమ్‌స్payస్‌లను గుర్తించడం వివిధ భాషా మాండలికాలను గుర్తించడంలో సహాయపడుతుంది.
ఒక భాషలోని కీ మరొక భాషలో వేరొకదానిని సూచిస్తుంది.
మీరు XMLNS లక్షణాన్ని ఉపయోగించి వివిధ నేమ్‌స్payస్‌లలో వీటిని నిర్వచించారు.
నేమ్‌స్payస్ అనేది URL స్ట్రింగ్, కానీ ఇది వాస్తవానికి ఏదైనా నిర్దిష్టంగా సూచించదు.
నేమ్‌స్payస్‌లు వివిధ భాషా మాండలికాలను మిళితం చేస్తాయి.
మీకుDataబేస్ కీ మరియు రహస్య కీ వంటి రెండు కీలు అవసరమైతే, మీరు వాటిని నేమ్‌స్payస్‌లను ఉపయోగించి XMLలో నిర్వచించవచ్చు.
మేము ఏ రకమైన కీ గురించి మాట్లాడుతున్నామో payర్కొనడంలో ఇది సహాయపడుతుంది.
డిfault నేమ్‌స్payస్ W3C ద్వారా సెట్ చేయబడింది మరియు ఉదాహరణగా గణిత నేమ్‌స్payస్ కూడా ఉంది.
కానీ ఈ గణిత నేమ్‌స్payస్ నిర్దిష్టంగా ఏమీ లేదు.
మీరు గణితంతో ప్రత్యేకంగా ఏదైనా చేస్తే, నేను ఈ గణిత నేమ్‌స్payస్‌ని సూచిస్తూ డబుల్ కోలన్ గణితాన్ని మరియు శీర్షికను ఉపయోగిస్తాను.
ఈ ఖాళీ ఉపసర్గ mathml వేరే భాషా నేమ్‌స్payస్‌ను సూచిస్తుంది.
దీని అర్థం నేను నా డాక్యుమెంట్‌లో నిర్దిష్ట నేమ్‌స్payస్ యొక్క ఎలిమెంట్‌లను ఉపయోగించవచ్చని అర్థం.
నేమ్‌స్పాక్
es ఒక ముఖ్యమైన పాత్ర పోషిస్తాయి మరియు జాగ్రత్తగా నిర్వచించాల్సిన అవసరం ఉంది.
మేము ఈ ప్రత్యేక నేమ్‌స్payస్‌లను ఎలా ఉపయోగించాలో చూస్తున్నాము.
మేము ముందు XML సాఫ్ట్‌వేర్ గురించి కూడా చర్చించాము.
XML పత్రాలు టెక్స్ట్ మోడ్‌లో ఉన్నాయి మరియు processing అవసరం.
ముందుగా, ఇది బాగా రూపొందించబడిందా లేదా వాక్యనిర్మాణంలో సరిగ్గా ఉందో లేదో తనిఖీ చేయండి, ఆపై వివిధ application‌ల కోసం దీన్ని ప్రాసెస్ చేయండి.
XML సాఫ్ట్‌వేర్ here కీలక పాత్ర పోషిస్తుంది.
XML పార్సర్ XMLDataను రీడ్ చేస్తుంది, DTD మరియు స్కీమా limitedులకు వ్యతిరేకంగా దాన్ని తనిఖీ చేస్తుంది మరియుDataను application‌కు అందుబాటులో ఉంచుతుంది.
మూడు సాధారణ XML APIలు లేదా పార్సర్‌లు ఉన్నాయి.
XML SAX పార్సర్ అనేది ఒక సాధారణ XML ఈవెంట్-ఆధారిత API, ఇది జనాదరణ పొందినది మరియు అన్ని ప్లాట్‌ఫారమ్‌లలో అందుబాటులో ఉంటుంది.
DOM పార్సర్ అనేది ఆబ్జెక్ట్ ట్రీ-బేస్డ్ పార్సర్.
JDOM పార్సర్ లేదా జావా DOM పార్సర్ మరొక ఎంపిక.
ఈ XML పార్సర్ మరియు ఇంటర్‌ఫేస్ సాఫ్ట్‌వేర్ వివిధ ఆపరేటింగ్ System‌లలో అందుబాటులో ఉన్నాయి.
SAX-ఆధారిత పార్సర్‌లు వేగంగా ఉంటాయి మరియు తక్కువ సామర్థ్యాన్ని కలిగి ఉంటాయి, కానీ తక్కువ కార్యాచరణను కలిగి ఉంటాయి.
DOM నెమ్మదిగా మరియు ఎక్కువ మెమరీ-ఇంటెన్సివ్, పూర్తి డాక్యుమెంట్ మెమరీ సంస్కరణను సృష్టిస్తుంది.
ధృవీకరించని పార్సర్ కంటే ధృవీకరించే పార్సర్ నెమ్మదిగా ఉంటుంది.
మేము SAX పార్సర్‌ల వంటి విభిన్న పార్సర్‌లను చూస్తున్నాము, ఇవి ఈవెంట్-ఆధారితమైనవి మరియు ట్యాగ్‌లు, అట్రిబ్యూట్‌లు, టెక్స్ట్Node‌లు లేదా పరిష్కరించని externalాలను చూసినప్పుడు ఈవెంట్‌లను నివేదించాయి.
ఈ ఈవెంట్‌లను నిర్వహించడానికి ప్రోగ్రామర్లు ఈవెంట్ హ్యాండ్లర్‌లను జతచేస్తారు.
SAX ఉపయోగించడానికి సులభమైనది మరియు వేగవంతమైనది.
దీనికి తక్కువ మెమరీ అవసరం కానీ ఎక్కువ processing చేయదు.
పత్రాలను డైనమిక్‌గా సవరించడానికి ఇది ఉపయోగపడదు.
DOM పార్సర్ మొత్తం పత్రం యొక్క మెమరీ సంస్కరణను సృష్టిస్తుంది, ఇది ప్రశ్నించడానికి మరియు సవరించడానికి ఉపయోగపడుతుంది.
JDOM లేదా Java DOM అనేది ఆబ్జెక్ట్-ఓరియెంటెడ్ మరియు DOMని పోలి ఉంటుంది, కానీ జావా నుండి.
ఇది డైనమిక్ ఎడిటింగ్ మరియు ట్రీ స్ట్రక్చర్‌లను ప్రశ్నించడానికి ఉపయోగపడుతుంది.
JDOMలో ఆబ్జెక్ట్-ఓరియెంటెడ్ ప్రోగ్రామింగ్ DOM కంటే మెరుగ్గా ఉంటుంది.
XMLలో కొత్త విషయాలపై పని చేయడం అంటే మీరు JAVA గురించి తెలుసుకోవాలి, అది మీకు తెలియకపోతే అది ప్రతికూలంగా ఉంటుంది.
DOM4J ఉంది, ఇది జావాలో XMLని నావిగేట్ చేయడానికి, చదవడానికి మరియు సవరించడానికి గొప్పది.
ఇది SAX, DOM, JDOM మరియు XSLT వంటి ఇంటర్‌ఫేస్‌లతో పని చేస్తుంది, మిశ్రమ పార్సింగ్‌ను అందిస్తుంది.
DOM4J జావా ప్యాకేజీల సమాహారంగా ఉండటంతో మొత్తంగా ఉపయోగపడుతుంది.
Apache వంటి SAX మరియు DOM పార్సర్‌లు open source మరియు ఉపయోగించడానికి ఉచితం.
కానీ మీరు జావా లేదా open source‌లో లేకుంటే, అది ప్రతికూలత కావచ్చు.
C కోసం Xerces మరియు XML వంటి ఇతర XML పార్సర్‌లు ఉన్నాయి.
cloud వంటి సంక్లిష్ట System‌లలో, చక్కగా రూపొందించబడిన XML పార్సర్‌లు అవసరం.
మేము వేగం, మెమరీ మరియు స్ట్రీమ్ processing‌పై దృష్టి సారించి, పార్సర్‌ల కోసం బెంచ్‌మార్క్‌లను పొందాము.
XSLT, లేదా ఎక్స్‌టెన్సిబుల్ స్టైల్‌షీట్ లాంగ్వేజ్, XML processing‌లో కీలకం.
ఇది XML ఎలా ప్రదర్శించబడుతుందో నిర్ణయిస్తుంది, కొన్నిtimes XML ప్లస్ XSLTని HTML లాగా చేస్తుంది.
XSLT ప్రధానంగాDataను మార్చడం, XML యొక్క నిర్మాణం మరియు కంటెంట్‌ని మార్చడం.
ఫిల్టరింగ్, XMLDataను కొత్త డాక్యుమెంట్‌గా ప్రాసెస్ చేయడం వంటి కార్యకలాపాలకు ఇది చాలా బాగుంది.
ప్రతికూలత ఏమిటంటే, ఇది పెద్ద పత్రాలతో నెమ్మదిగా ఉంటుంది మరియు డీబగ్గింగ్ కఠినంగా ఉంటుంది.
కాబట్టి, XMLData XSLT ద్వారా రూపాంతరం చెందుతుంది, కొత్త XML పత్రాలను సృష్టిస్తుంది.
XML సందేశం System Communication‌ల కోసం XML ఆకృతిని ఉపయోగిస్తుంది.
HTTP వంటి సాధారణ రవాణా పద్ధతులను ఉపయోగించి XMLDataను వివరించడం మరియు తరలించడం సులభం.
dataను బదిలీ చేయడానికి XMLకి ట్రాన్స్‌పోర్ట్ ప్రోటోcall అవసరం, కానీ ఇది ఇతర ట్రాన్స్‌పోర్ట్ లేయర్ ప్రోటోcall‌ల నుండి భిన్నంగా ఉంటుంది.
మీరు XML సందేశం కోసం HTTP, HTTPS, SMTP మొదలైన వాటిని ఉపయోగించవచ్చు.
సాధారణ modelలతో పాటు XML సందేశానికి ప్రయోజనాలు మరియు appరయోజనాలు ఉన్నాయి.
HTTP అనేది XML సందేశాల కోసం ప్రామాణిక ప్రోటోcall, దానిలో XML పత్రాలను పొందుపరచడం.
XML-RPC వంటి ప్రమాణాలు సాధారణ ఎన్‌కోడింగ్ మరియు calling పద్ధతులను అందిస్తాయి.
SOAP, లేదా సాధారణ ఆబ్జెక్ట్ access ప్రోటోcall, Web serviceలు మరియు serviceా-ఆధారిత నిర్మాణంలో ఉపయోగించబడుతుంది.
SOAP మునుపటి స్కీమాలను payర్కొంటూ నియమాలు మరియు ప్రాక్సీ సందేశాలను నిర్వహించడానికి సంcomplex రేపర్‌ను అందిస్తుంది.
SOAP మెసేజ్ ఫార్మాట్‌లు మేము XML సందేశాలను ఎలా నిర్వహిస్తాము.
XML అనేదిData మార్పిడి కోసం ఒక యూనివర్సల్ ఫార్మాట్, వివిధ application‌లు మరియు సరఫరాదారులతో బాగా పని చేస్తుంది.
దీనర్థం మీరు HTTP ద్వారా ఒకే application ద్వారా వివిధ సరఫరాదారులతో పరస్పర చర్య చేయవచ్చు.
మరొక యాప్ మాతో ఇంటరాక్ట్ అయినప్పుడు, అది HTTPలో పిగ్గీబ్యాక్ చేయబడిన SOAP సందేశాన్ని ఉపయోగించవచ్చు.
ఈ సందేశం కంటెంట్‌ను HTTP యొక్క payload‌గా కలిగి ఉంటుంది, నిర్దిష్ట application‌కుDataను బట్వాడా చేస్తుంది.
XML కుటుంబాన్ని చూస్తే, మాకు XML, XSLT, XSL, XPath, XPointer మరియు మరిన్ని ఉన్నాయి.
ఇప్పుడు వీటన్నింటి గురించి చర్చించడానికి మాకు సమయం లేదు.
XML నేర్చుకోవాలనే ఆసక్తి ఉన్నవారి కోసం, మీరు W3C స్కూల్ లేదా ప్రామాణిక పుస్తకాలు వంటి వనరులను తనిఖీ చేయవచ్చు మరియు కొన్ని చిన్న ప్రాజెక్ట్‌లను ప్రయత్నించవచ్చు.
XMLని ఉపయోగించే Web serviceలతో సహా వివిధ శైలులతో విభిన్న APIలు ఉన్నాయి.
XML యొక్క బహుముఖ ప్రజ్ఞ అది వివిధ సాంకేతికతలతో ఎలా ఉపయోగించబడుతుందో చూపబడింది.
పంపిణీ చేయబడిన వ్యవస్థలలో నిర్మాణాన్ని నిర్వచించడంలో XML మరియు దాని భాగాలు కీలక పాత్ర పోషిస్తాయి.
పంపిణీ చేయబడిన System‌తో పరస్పర చర్య చేస్తున్నప్పుడు, XML ఆధారంగా SOAP సందేశాలు ఉపయోగపడతాయి.
WSDL మరియు UDDI వంటి సాంకేతికతలు ప్రధానంగా XML-ఆధారితమైనవి.
మేము గణిత కంటెంట్ కోసం MathML మరియు గ్రాఫిక్స్ కోసం SVG వంటి నేమ్‌స్payస్‌లను కలిగి ఉన్నాము.
data పరివర్తనలో XML సహజంగా బహుముఖంగా ఉంటుంది.
dataను సూచించడానికి, స్టైలింగ్ కోసం మీకు XSLT అవసరం కావచ్చు.
dataను ప్రదర్శించడానికి స్టైల్ షీట్‌లను కూడా ఉపయోగించవచ్చు; మీరుDataను వీక్షించడానికి HTML ఫైల్‌ను కూడా సృష్టించవచ్చు.
మేము ఇప్పుడే XML మరియు దాని ప్రధాన భాగాలకు ప్రాథమిక పరిచయాన్ని అందించాము.
cloud computing వంటి System‌లలో ఇంటర్‌ఆపరేబిలిటీని సృష్టించేందుకు ఈ భాగాలు సహాయపడతాయి
XML అనేది cloud లేదా డిస్ట్రిబ్యూట్ System‌లలో ఇంటర్‌ఆపరేబిలిటీ కోసం గుర్తించబడిన భాష.
ఈరోజు చర్చ కేవలం XML యొక్క ప్రాథమిక అంశాలకు పరిచయం మాత్రమే.
చేరినందుకు ధన్యవాదాలు!
XML గురించి మాట్లాడటం మరియు ప్రత్యేకించి cloud computing మరియు SaaS వంటి అంశాలలో వివిధ System‌లు కలిసి పని చేయడంలో ఇది ఎలా సహాయపడుతుంది అనే దాని గురించి మనం ఎక్కడ ఆపివేశాము.
మేము ఇప్పటికీ DTDలు మరియు XML స్కీమా XSD గురించి కొనసాగుతున్నాము.
ఈ రోజు, మేము XML బేసిక్స్‌లో లోతుగా డైవ్ చేస్తున్నాము. మీకు తెలుసా, XML స్కీమా అనేది XML యొక్క నిర్మాణాన్ని సెటప్ చేయడం గురించి.
ఇలా, IIT ఖరగ్‌పూర్ XMLలో విద్యార్థులDataను నిల్వ చేయడం గురించి ఆలోచించండి. ఇది చాలా భారీగా ఉంది!
వారు కొన్నిtimes ఈData యొక్క బిట్‌లను external ఏజెన్సీలతో పంచుకోవలసి ఉంటుంది మరియు వారు స్కీమాను విచ్ఛిన్నం చేయడం ద్వారా దీన్ని చేస్తారు.
ఇతర ప్రదేశాలతోDataను భాగస్వామ్యం చేయడం అంటే ఏ స్కీమాను ఉపయోగించాలో తెలుసుకోవడం.
XML స్కీమా అనేది వివిధ ప్రదేశాల మధ్యDataను మార్చుకోవడానికి చాలా ముఖ్యమైనది.
XML చెల్లుబాటులో ఉందో లేదో తనిఖీ చేయడంలో సహాయపడటానికి 2001లో కొత్త స్కీమా వచ్చింది.
XML పార్సర్‌లు ముందుగాData సరిగ్గా వ్రాయబడిందని నిర్ధారించుకోండి, ఆపై అది స్కీమాకు సరిపోతుందో లేదో తనిఖీ చేస్తుంది.
కాబట్టి, మీరు చెల్లుబాటు అయ్యే XML పత్రం అని పిలుస్తాము.
XML కోసం నియమాలను సెట్ చేసే W3C వంటి అంశాలు ఉన్నాయి. స్కీమాలు స్వచ్ఛమైన XMLలో వ్రాయబడ్డాయి మరియు DTDల కంటే బలంగా ఉంటాయి.
స్కీమాలు విభిన్నData రకాలను నిర్వహిస్తాయి మరియుDataబేస్‌లలో టైప్ ధ్రువీకరణ కోసం ఉపయోగించబడతాయి.
మేముDataబేస్ స్కీమాను సరిగ్గా పొందినట్లయితే, మేము దానిని సృష్టించి, XMLDataను పంపవచ్చు.
కానీ, మీరు స్కీమాలలో ఎంటిటీలను ప్రకటించలేరు, DTDలలో మాత్రమే.
DTDలు స్కీమాలతో ఎలా సరిపోతాయో చూద్దాం.
మేము XML పత్రాలతో ఇంకా ఏమి చేయగలమో కూడా తనిఖీ చేయబోతున్నాము.
XML నేమ్‌స్payస్‌లు మీ స్వంతDataను నిర్వచించటానికి మిమ్మల్ని అనుమతిస్తాయి, ఇది చాలా కీలకమైనది.
ఇలా, మీరు పట్టికను నిర్వచిస్తున్నట్లయితే, అది ఏ రకంగా ఉందో మీరు payర్కొనాలి.
మీరు దీన్ని ఎక్కడ నిర్వచించారనే దానిపై ఆధారపడి, ఇది నేమ్‌స్payస్‌కు చెందినది, ఇది ప్రతి మూలకం దేనికి సంబంధించినదో మీకు తెలియజేస్తుంది.
విభిన్న XML నేమ్‌స్payస్‌లను గుర్తించడం వివిధ భాషా శైలులను గుర్తించడంలో సహాయపడుతుంది.
ఇలా, ఒక భాషలోని కీ మరొక భాషలో completely భిన్నమైనది.
మీరు XMLNS లక్షణాన్ని ఉపయోగించి వివిధ నేమ్‌స్payస్‌లలో వీటిని నిర్వచించారు.
నేమ్‌స్payస్ అనేది URL స్ట్రింగ్, కానీ ఇది వాస్తవానికి ఏదైనా నిర్దిష్టంగా సూచించదు.
నేమ్‌స్payస్‌లు విభిన్న భాషా శైలుల మిశ్రమంలా ఉంటాయి.
మీకుDataబేస్ కీ మరియు రహస్య కీ వంటి రెండు కీలు అవసరమైతే, మీరు వాటిని నేమ్‌స్payస్‌లను ఉపయోగించి XMLలో నిర్వచించవచ్చు.
మేము ఏ రకమైన కీ గురించి మాట్లాడుతున్నామో payర్కొనడంలో ఇది సహాయపడుతుంది.
డిfault నేమ్‌స్payస్ W3C ద్వారా సెట్ చేయబడింది, అయితే ఉదాహరణగా గణిత నేమ్‌స్payస్ కూడా ఉంది.
నేను దీనిని యెంపస్ అని పిలుస్తున్నాను.
ఇప్పుడు, నేను ప్రత్యేక గణితంతో ఏదైనా చేస్తే, నేను mathml మరియు శీర్షిక వంటి ఖాళీ డబుల్ కోలన్‌ని ఉపయోగిస్తాను.
ఇది గణిత నేమ్‌స్payస్‌ను సూచిస్తుంది.
కాబట్టి, 'mathml' అనే ఖాళీ ఉపసర్గ వేరే భాష యొక్క నేమ్‌స్payస్ లాంటిది.
అంటే నేను నా డాక్యుమెంట్‌లో ఆ నేమ్‌స్payస్ నుండి ఎలిమెంట్‌లను ఉపయోగించగలను.
నేమ్‌స్payస్‌లు ఎంత ముఖ్యమైనవో ఇది చూపిస్తుంది మరియు మీరు వాటిని సరిగ్గా నిర్వచించవలసి ఉంటుంది.
సరళంగా చెప్పాలంటే, మేము ఆ ప్రత్యేక నేమ్‌స్payస్‌ను ఎలా ఉపయోగించాలో చూస్తున్నాము.
మేము ముందు XML సాఫ్ట్‌వేర్ గురించి మాట్లాడాము.
XML డాక్యుమెంట్ టెక్స్ట్ మోడ్‌లో ఉంది మరియు నేను దానిని ప్రాసెస్ చేయాల్సి ఉంది.
ముందుగా, ఇది బాగా రూపొందించబడిందా లేదా సరిగ్గా ఉందో లేదో తనిఖీ చేయండి, ఆపై వివిధ ఉపయోగాలకు ఇది చెల్లుబాటు అవుతుందో లేదో చూడండి.
XML సాఫ్ట్‌వేర్ here పెద్ద పాత్ర పోషిస్తుంది.
XML పార్సర్Dataను రీడ్ చేస్తుంది, DTD మరియు స్కీమాకు వ్యతిరేకంగా దాన్ని తనిఖీ చేస్తుంది మరియు దానిని ఉపయోగించగలిగేలా చేస్తుంది.
మూడు సాధారణ XML APIలు లేదా పార్సర్‌లు ఉన్నాయి.
XML SAX పార్సర్ అనేది ఒక సాధారణ ఈవెంట్-ఆధారిత API, ఇది నిజంగా జనాదరణ పొందినది మరియు ప్రతిచోటా ఉంది.
appపుడు DOM పార్సర్ ఉంది, ఇది చెట్టు ఆధారిత వస్తువు లాంటిది.
చివరకు, JDOM లేదా Java DOM పార్సర్.
ఈ XML పార్సర్‌లు వేర్వేరు System‌లలో పని చేస్తాయి.
SAX-ఆధారిత పార్సర్‌లు వేగంగా మరియు తేలికగా ఉంటాయి కానీ తక్కువ పని చేస్తాయి.
డాక్యుమెంట్ యొక్క మొత్తం మెమరీ వెర్షన్‌ను సృష్టించినందున DOM నెమ్మదిగా ఉంటుంది మరియు మరింత మెమరీని తగ్గిస్తుంది.
ధృవీకరణ పార్సర్ అనేది ధృవీకరణ కాని దాని కంటే నెమ్మదిగా ఉంటుంది ఎందుకంటే ఇది ముందుగా స్కీమా అనుకూలతను తనిఖీ చేస్తుంది.
SAX పార్సర్‌లు ఈవెంట్-ఆధారితమైనవి మరియు ట్యాగ్‌లు మరియు టెక్స్ట్Node‌ల వంటి అంశాలను నివేదిస్తాయి.
ఈ ఈవెంట్‌లను నిర్వహించడానికి ప్రోగ్రామర్లు ఈవెంట్ హ్యాండ్లర్‌లను జతచేస్తారు.
పెర్క్‌లు ఏమిటంటే ఇది ఉపయోగించడానికి సులభమైనది మరియు వేగవంతమైనది.
టెక్స్ట్ లేదాDataను పొందడానికి పెద్దగా రచ్చ చేయాల్సిన అవసరం లేదు. ఇది త్వరితంగా ఉంటుంది మరియు మెమరీని హాగ్ చేయదు.
ప్రతికూలత ఏమిటంటే ఇది ఎక్కువ processing చేయదు.
ఫ్లైలో పత్రాలను సవరించడానికి గొప్పది కాదు.
కానీ సాధారణ, మెమరీ-లైట్ XML processing కోసం ఇది మంచిది.
DOM పార్సర్ అనేది వస్తువుల గురించి ఎక్కువగా ఉంటుంది.
ఇది XML డాక్యుమెంట్‌తో సరిపోలే ట్రీని మెమరీలో చేస్తుంది.
DOMతో, మీరు ఈ ట్రీని access చేయవచ్చు మరియు సవరించవచ్చు, ఇది డైనమిక్ మార్పులకు గొప్పది.
మీరు ట్రీ స్ట్రక్చర్ ఆధారంగాDataను ప్రశ్నించాల్సిన అవసరం ఉన్నట్లయితే ఇది ఉపయోగకరంగా ఉంటుంది.
C++ మరియు Java వంటి భాషలతో పని చేస్తుంది.
ప్రతికూలత ఏమిటంటే దీనికి ఎక్కువ మెమరీ అవసరం.
DOM ప్రోగ్రామింగ్ కొంచెం సంcomplexది మరియు ప్రో హ్యాండ్లింగ్ అవసరం.
DOM పార్సర్‌ల కోసం, ఇంటర్‌ఫేస్ చెట్టు నిర్మాణంలోకి వెళుతుంది.
జావా ఆధారంగా JDOM, DOMని పోలి ఉంటుంది.
ఇది పత్రం నుండి మెమరీ ట్రీని సృష్టిస్తుంది.
JDOM ఈ చెట్టును access చేయడానికి మరియు మార్చడానికి మిమ్మల్ని అనుమతిస్తుంది.
డైనమిక్ సవరణలు మరియు చెట్టు ఆధారిత ప్రశ్నలకు ఇది సులభతరం.
ఇది DOM కంటే ఆబ్జెక్ట్-ఓరియెంటెడ్ ప్రోగ్రామింగ్‌కు వేగవంతమైనది మరియు ఉత్తమమైనది.
కాబట్టి, ఇది గొప్ప ప్రోగ్రామింగ్ ఇంటర్‌ఫేస్‌ను కలిగి ఉంది.
ప్రతికూలత? ఇది కొత్తది మరియు అంతగా తెలియదు.
ఈ ప్రోగ్రామ్‌ల గురించి మాట్లాడుతూ, కొత్త XML అంశాలపై పని చేయడానికి మీరు JAVAతో మంచిగా ఉండాలి.
XMLని నావిగేట్ చేయడానికి మరియు సవరించడానికి DOM4J ఉంది, ఇది జావా ఫ్రేమ్‌work.
ఇది SAX, DOM, JDOM ఇంటర్‌ఫేస్‌లు మరియు XSLT వంటి వాటికి access‌ను అందిస్తుంది.
DOM4J SAX మరియు DOM పార్సింగ్‌లను మిళితం చేయగలదు మరియు మొత్తంగా, ఇది చాలా ఉపయోగకరంగా ఉంటుంది.
ఇది JAVA ప్యాకేజీల సమూహం, మరియు SAX మరియు DOM పార్సర్ Apache open source మరియు ఉచితం.
డౌ
nside మీరు జావాను ఉపయోగించాల్సిన అవసరం ఉంది మరియు మీరు open source విషయాలలో లేకుంటే అది గొప్పది కాదు.
Xerces మరియు XML టూల్‌కిట్ లేదా C కోసం XML వంటి ఇతర పార్సర్‌లు ఉన్నాయి.
cloud computing వంటి సంక్లిష్ట వ్యవస్థలలో, చక్కగా రూపొందించబడిన XML పార్సర్‌లు తప్పనిసరి.
మీరు పార్సర్‌ల కోసం బెంచ్‌మార్క్‌లను తనిఖీ చేయవచ్చు, అవి ఎంత వేగంగా ఉన్నాయి, అవి ఎంత మెమరీని ఉపయోగిస్తాయి మరియు వాటి స్ట్రీమ్ processing వంటివి.
XSLT అనేది XMLలో చాలా ముఖ్యమైన ఎక్స్‌టెన్సిబుల్ స్టైల్‌షీట్ భాష.
ఇది XML ఎలా ప్రదర్శించబడుతుంది మరియు ప్రాతినిధ్యం వహిస్తుంది.
కొన్నిtimes XSLTతో XML దాదాపు HTML లాగా ఉంటుంది.
XSLT అనేది ప్రధానంగా XMLDataను మార్చడం, దానిని భిన్నంగా కనిపించేలా చేయడం లేదా పని చేయడం కోసం ఉద్దేశించబడింది.
ఇది XMLDataను తీసుకుంటుంది, దానిని ప్రాసెస్ చేస్తుంది మరియు వేరే నిర్మాణంతో కొత్త XML డాక్యుమెంట్‌ను చేస్తుంది.
XSLT చెట్లను మార్చడానికి లేదా మీ యాప్‌లో వాటి భాగాలను ఉపయోగించడానికి గొప్పది.
ప్రతికూలత ఏమిటంటే ఇది పెద్ద డాక్యుమెంట్‌లతో నెమ్మదిగా ఉంటుంది మరియు డీబగ్ చేయడం కష్టం.
XMLData ప్రాసెస్ చేయబడుతుంది మరియు కొత్త XMLDataగా రూపాంతరం చెందుతుంది.
XML సందేశం System‌ల మధ్య సందేశాలను పంపడానికి XML ఆకృతిని ఉపయోగిస్తుంది.
HTTP వంటి సాధారణ పద్ధతులను ఉపయోగించి XMLDataను వివరించడం మరియు తరలించడం సులభం.
data బదిలీ కోసం XMLకి క్యారియర్ ప్రోటోcall అవసరం, కాబట్టి మేము HTTP లేదా HTTPS వంటి పద్ధతులను ఉపయోగిస్తాము.
XML మెసేజింగ్‌లో కొన్ని లోపాలు మరియు సాధారణ modelలు ఉన్నాయి.
XML సందేశాలు తరచుగా HTTPని ఉపయోగిస్తాయి, దానిలో XML పత్రాలను పొందుపరుస్తాయి.
XML-RPC వంటి ప్రమాణాలు సాధారణ సందేశ ఎన్‌కోడింగ్‌కు సంబంధించినవి.
SOAP, లేదా సింపుల్ ఆబ్జెక్ట్ access ప్రోటోcall, ప్రధానంగా Web serviceలకు సంబంధించినది.
నియమాలు మరియు సందేశాలను నిర్వహించడానికి SOAP మరింత సంcomplex మార్గాన్ని అందిస్తుంది.
మేము cloud computing‌ను మరియు Web serviceల వంటి వాటికి అవసరమైన వాటిని అన్వేషిస్తున్నాము.
Web serviceలు మరియు cloud computing యొక్క పెద్ద చిత్రాన్ని అర్థం చేసుకోవడానికి ప్రయత్నిద్దాం.
మీరు W3C Web Service architecture అవసరాల స్పెసిఫికేషన్‌ను on‌లైన్‌లో చూడవచ్చు.
ఇది ఇంటర్‌ఫేస్‌లు మరియుByండింగ్‌లతో XML కళాఖండాలుగా URI ద్వారా గుర్తించబడిన సాఫ్ట్‌వేర్ application‌ను వివరిస్తుంది.
ఈ నిర్వచనం చాలా బహుముఖమైనది.
microsoft ప్రకారం, Web service అనేది ప్రామాణిక internet ప్రోటోcall‌ల ద్వారా access చేయగల ప్రోగ్రామబుల్ application లాజిక్.
IBM దీన్ని XML సందేశాన్ని వివరించే ఇంటర్‌ఫేస్‌తో కూడిన కార్యకలాపాల సమాహారంగా నిర్వచిస్తుంది మరియు నెట్‌work ద్వారా access చేయబడుతుంది.
ఈ నిర్వచనాల నుండి, మేము Web serviceలను XML-ఆధారిత దృగ్విషయంగా చూస్తాము.
XML అనేదిData ట్రాన్స్‌ఫర్మేషన్ లాంగ్వేజ్, ఇది application‌లు ఒకదానితో ఒకటి కమ్యూనికేట్ చేసుకోవడానికి సహాయపడుతుంది.
Web serviceలు XML-ఆధారిత సందేశ మార్పిడి ప్రోటోcall‌లపై పనిచేస్తాయి మరియు ప్రామాణీకరణ URIల ద్వారా access చేయబడతాయి.
అవి బ్యాకెండ్ ప్రాసెస్‌ల గురించి చింతించకుండా application‌లను ఏకీకృతం చేయడం గురించి.
లెగసీ applicationలను ఆధునిక సందర్భాలలోకి తీసుకురావడంలో Web serviceలు సహాయపడతాయి.
కఠినంగా కపుల్డ్ ప్రోటోcall‌లతో పోలిస్తే అవి మరింత వదులుగా కపుల్డ్ client ఇంటరాక్షన్‌లను అనుమతిస్తాయి.
స్ట్రక్చర్డ్ ప్రోగ్రామింగ్, మేము ఇంతకు ముందు చర్చించినట్లు, ఈ సందర్భంలో ముఖ్యమైనది.
నిర్దిష్ట ప్రయోజనాల కోసం వ్యాపారాల మధ్య ఎలక్ట్రానిక్Data మార్పిడిని Web serviceలు సులభతరం చేస్తాయి.
internet వివిధ internet ప్రోటోcall‌ల ద్వారా ఈ serviceలను ప్రారంభిస్తుంది.
Web serviceలు developmentని సులభతరం చేస్తాయి మరియు పంపిణీ చేయబడిన computing‌పై దృష్టిని తగ్గిస్తాయి.
పంపిణీ చేయబడిన computing‌లో ఇంటర్‌ఆపరేబిలిటీ అనేది వివిధ ప్లాట్‌ఫారమ్‌లలోData మరియు సాఫ్ట్‌వేర్‌లను భాగస్వామ్యం చేయడం.
ఈ విధానం వివిధ ప్లాట్‌ఫారమ్‌లు మరియు విక్రేతల మధ్య Communication మరియు భాగస్వామ్యం కోసం అనుమతిస్తుంది.
సాంప్రదాయక ajamanya పంపిణీ చేయబడిన computing సాంకేతికతలు ఈ విషయంలో limited పరిధిని కలిగి ఉన్నాయి.
ఎలక్ట్రానిక్Data ఇంటర్‌చేంజ్ (EDI) అనేది అంతర్జాతీయంగా గుర్తింపు పొందిన ప్రమాణాలను ఉపయోగించి వ్యాపారData మార్పిడిని ప్రారంభించే మరో ప్రధాన development.
EDI అనేది companyల computerల మధ్య ఫార్మాట్ చేయబడినData మరియు డాక్యుమెంట్‌ల మార్పిడిని కలిగి ఉంటుంది.
సమర్థవంతమైన Communication కోసం EDIలో ఉపయోగించే ఫార్మాట్‌లను రెండు partyలు తప్పనిసరిగా అర్థం చేసుకోవాలి.
EDI తక్కువ నిర్వహణ ఖర్చులు, తగ్గినData ఎంట్రీ ఎర్రర్‌లు, పెరిగిన ఉత్పాదకత మరియు వేగవంతమైన ట్రేడింగ్ ప్రక్రియల వంటి ప్రయోజనాలను అందిస్తుంది.
చివరగా, మేము ముందుగా ఉన్న సాఫ్ట్‌వేర్ నుండి కొత్త application‌లను రూపొందించడానికి ఆబ్జెక్ట్-ఓరియెంటెడ్ ప్రోగ్రామింగ్‌ని ఉపయోగించి మాడ్యులర్ పద్ధతిలో serviceలను చర్చిస్తున్నాము.
డెవలపర్‌లు కొత్త application‌లను మాడ్యులర్ మరియు విభిన్న పద్ధతిలో development చేయడానికి లెగసీ సాఫ్ట్‌వేర్‌ను ఉపయోగించవచ్చు.
విషయాలను మార్చడం పెద్ద ఉత్పాదకతను పెంచడానికి దారితీస్తుంది.
మేము వివిధ ప్రోగ్రామింగ్ భాగాల లైబ్రరీని కలిగి ఉన్నట్లయితే, మేము మా స్వంత యాప్‌ను రూపొందించవచ్చు.
here ఒక ఉదాహరణ: on‌లైన్ రిజర్వేషన్లు. నేను రైలు లేదా విమానాన్ని book చేస్తాను.
విమానాలు మరియు హోటళ్ల కోసం ట్రావెల్ పోర్టల్‌ని access చేయడానికి నేను నిర్దిష్ట చిరునామా లేదా URIని ఉపయోగిస్తాను.
పోర్టల్ నాకు వివిధ airplane institutionల నుండి విభిన్న ఎంపికలను చూపుతుంది మరియు నేను క్రెడిట్ కార్డ్‌లు లేదా నెట్ బ్యాంకింగ్ వంటి charge పద్ధతులను కొనసాగిస్తాను.
అనేక serviceలను సరిగ్గా కలపడం ఒక నృత్య నృత్యం వంటిది.
నేను నా బడ్జెట్ మరియు సౌలభ్యం ఆధారంగా ఉత్తమ విమానాన్ని ఎంచుకుంటాను.
నేను వివిధ ఎయిర్‌లైన్స్ ఆఫర్‌లను చూడటానికి ట్రావెల్ పోర్టల్ లేదా బ్రోకర్‌కి వెళ్తాను.
నేను నా క్రెడిట్ కార్డ్‌తో లేదా నాకు సరిపోయే దానితో చెల్లిస్తాను, ఆపై నా టిక్కెట్‌ను పొందండి.
నాకు ఈ ఎయిర్‌లైన్స్ గురించి నేరుగా తెలియదు; వారు నా కార్డ్ Service provider‌కి connect చేయబడలేదు.
service ఒక అభ్యర్థనను స్వీకరిస్తుంది, దానిని గుర్తిస్తుంది మరియు నిర్దిష్ట ఆకృతిలో ప్రతిస్పందిస్తుంది.
ఇది XML-రకం సందేశం వంటిది, విషయాలను మారుస్తుంది.
ఇది మెగా application‌లను రూపొందించడానికి వివిధ సాఫ్ట్‌వేర్ భాగాలను కలపడం అనుమతిస్తుంది.
నేను వివిధ Service providerల నుండి తక్కువ ప్రమేయంతో మిక్స్ మరియు మ్యాచింగ్ చేస్తున్నాను.
పంపిణీ చేయబడిన computing‌లో open, ajamanyaేతర ప్రమాణాలు పరస్పర చర్యను మెరుగుపరుస్తాయి.
XML, op
en ప్రామాణికమైన మరియు సులభంగా ఉపయోగించగల, సాఫ్ట్‌వేర్ భాగాల మధ్య Communication‌ను అనుమతిస్తుంది.
ఇది EDI వంటిData మార్పిడి సామర్థ్యాలను అందిస్తుంది కానీ సరళమైనది మరియు చౌకైనది.
ఒప్పందం అవసరం లేకుండాData ఫార్మాట్ ముందే నిర్వచించబడింది.
institutionలు Web serviceలను స్వీకరించినప్పుడు, వారు రెండు సాంకేతికతలను ఉపయోగించవచ్చు లేదా EDIని తొలగించవచ్చు.
వరల్డ్ వైడ్ Web దృశ్య మరియు నాన్-విజువల్ భాగాలను వేరు చేస్తుంది.
నేపథ్య ప్రక్రియలు దాచబడినప్పుడు నేను దృశ్య భాగాన్ని చూస్తాను.
XML అనేదిData ట్రాన్స్‌ఫర్మేషన్ గురించి ఎక్కువ, HTML వంటి విజువలైజేషన్ కాదు.
XML ఇంటర్‌ఆపెరాబిలిటీతో వ్యవహరిస్తుంది మరియు ఎక్స్ఛేంజీలు ఎలా పని చేస్తాయి.
XML ప్లస్Data స్టైలింగ్ XML సమాచారాన్ని చూపడంలో సహాయపడుతుంది.
XML అనేదిData ప్రాతినిధ్యం లేదా పరివర్తనకు సంబంధించినది, కేవలంDataను ప్రదర్శించడం మాత్రమే కాదు.
జావా స్వింగ్, పైథాన్, windows మొదలైన బ్రౌజర్‌లు లేదా డెస్క్‌tap client‌ల ద్వారా పరస్పర చర్య జరగవచ్చు.
Web serviceలకు మూడు ప్రధాన problemలు ఉన్నాయి: ఇంటర్‌ఆపరేబిలిటీ, ఫైర్‌వాల్ ట్రావర్సల్ మరియు కాంప్లెక్సిటీ.
ఇంటర్‌ఆపరేబిలిటీ అనేది సాఫ్ట్‌వేర్ మధ్య ప్రామాణిక సందేశం.
ఫైర్‌వాల్ ట్రావెర్సల్ కోసం, Web serviceలు తరచుగా HTTPని ఉపయోగిస్తాయి, వీటిని చాలా ఫైర్‌వాల్‌లు అనుమతిస్తాయి.
Web serviceలు డెవలపర్-స్నేహపూర్వకంగా ఉంటాయి మరియు XML వంటి open, టెక్స్ట్-ఆధారిత ప్రమాణాలను ఉపయోగిస్తాయి.
మీరు వివిధ భాషలలో భాగాలను వ్రాయవచ్చు మరియు వాటిని ప్లాట్‌ఫారమ్‌లలో కమ్యూనికేట్ చేయవచ్చు.
విషయాలను అమలు చేయడం వల్ల పెద్ద మార్పుల నుండి ఖర్చులు మరియు institutionాగత అంతరాయాలు రెండూ క్రమంగా తగ్గుతాయి.
Web Service ఇంటర్‌ఫేస్‌లు మరియు సాధనాలు ఇప్పటికే అందుబాటులో ఉన్నట్లయితే, ఇది పనులను సులభతరం చేస్తుంది.
మేము HTTP, SMTP లేదా ఏదైనా TCP/IP application లేయర్ ప్రోటోcall వంటి open standard‌లను మళ్లీ చూస్తున్నాము.
SOAP XML సందేశాలను ప్రాసెస్ చేస్తుంది మరియు ఇది ఒక ప్రసిద్ధ XML-ఆధారిత సందేశ వ్యవస్థ.
సందేశాలను వివరించడానికి మరియుDataను నిర్వహించడానికి SOAP XMLని ఉపయోగిస్తుంది.
WSDL ఈ serviceలకు తుది వివరణను అందిస్తుంది.
serviceలు ఎక్కడ మరియు ఎలా ప్రారంభించబడతాయో చూడటానికి మేము తర్వాత Web Service డిస్క్రిప్షన్ లాంగ్వేజ్ (WSDL)లోకి ప్రవేశిస్తాము.
UDDIని ఉపయోగించి serviceలు ప్రచురించబడతాయి మరియు కనుగొనబడతాయి.
మేము XMLలో మూడు ప్రధాన భాగాలను పొందాము: SOAP, WSDL, UDDI.
ఇవి XML-ఆధారిత కంటెంట్‌ని ఉపయోగించే W3C భాగాలు.
purchase చేయడం, క్రెడిట్ తనిఖీలు చేయడం మరియు ప్రతిస్పందనలను పొందడం వంటి ఉదాహరణ ప్రక్రియ.
క్రెడిట్, inవెంటరీ మరియు P.O వంటి విభిన్న serviceలు serviceలు కలిసి పనిచేయడానికి రూపొందించబడ్డాయి.
వివిధ రకాల application‌లను కలపడం పెద్ద, కొరియోగ్రాఫ్ చేసిన application‌ను సృష్టిస్తుంది.
ఇది మరొక architecture‌కి దారి తీస్తుంది - SOA, Service ఓరియెంటెడ్ architecture.
SOA కోసం IBM యొక్క model మూడు institutionలు మరియు వాటి పరస్పర చర్యలను కలిగి ఉంటుంది.
మూడు భాగాలు ఉన్నాయి: Service provider, Service రిక్వెస్టర్/కన్స్యూమర్ మరియు Service బ్రోకర్.
consumer మరియు provider పరస్పర చర్య చేస్తారు మరియు serviceలు ఎక్కడ అందుబాటులో ఉన్నాయో కనుగొనడంలో బ్రోకర్ సహాయపడుతుంది.
Service provider serviceలను అందించాలనుకుంటున్నారు మరియు అభ్యర్థించిన వారు వాటిని కనుగొనవలసి ఉంటుంది.
serviceలు telephone ఎక్స్ఛేంజ్ డైరెక్టరీ మాదిరిగానే డైరెక్టరీలో నమోదు చేయబడ్డాయి.
డైరెక్టరీ service నిర్దిష్ట serviceలను కనుగొనడానికి రిజిస్ట్రీగా పనిచేస్తుంది.
serviceా వివరణలు మరియు అభ్యర్థనలు WSDL మరియు UDDI ఉపయోగించి చేయబడతాయి.
ఒక Service provider కొత్త లేదా app‌డేట్ చేయబడిన serviceలను ప్రచురిస్తుంది కాబట్టి సంభావ్య consumerలు వాటిని కనుగొనగలరు.
Web Service architecture మూడు ప్రధాన కార్యకలాపాలను కలిగి ఉంది: ప్రచురించడం, కనుగొనడం మరియుByండ్ చేయడం.
provider serviceలను ప్రచురిస్తుంది, consumer వాటిని కనుగొంటారు మరియు connection చేయడానికి రిజిస్ట్రీ సహాయపడుతుంది.
దశలవారీగా పనులను అమలు చేయడం కీలకం. ఇది ఖర్చులను ఆదా చేయడమే కాకుండా institutionలకు బదిలీని కూడా సులభతరం చేస్తుంది.
Web Service ఇంటర్‌ఫేస్‌ల కోసం సాధనాలు సిద్ధంగా ఉంటే, అది చాలా పెద్ద ప్లస్.
మేము HTTP లేదా SMTP లేదా ఏదైనా TCP/IP ప్రోటోcall వంటి open standards‌కి తిరిగి వచ్చాము.
XML సందేశాలను ప్రాసెస్ చేయడానికి SOAP ఉపయోగించబడుతుంది మరియు ఇది XML మెసేజింగ్‌లో పెద్ద విషయం.
ఇది సందేశాలను వివరించడానికి మరియుDataను నిర్వహించడానికి XMLని ఉపయోగిస్తుంది మరియు WSDL తుది స్పెక్స్‌ను అందిస్తుంది.
మేము Web serviceా వివరణ భాష (WSDL) యొక్క పూర్తి-సమగ్రతను తర్వాత పొందుతాము.
Web Service డిస్కవరీ మరియు ఇంటిగ్రేషన్‌లో సహాయపడే UDDIని ఉపయోగించి serviceలు ప్రచురించబడతాయి మరియు కనుగొనబడతాయి.
SOAP, WSDL, UDDI here మూడు ప్రధాన భాగాలు, అన్నీ W3C గొడుగు కింద ఉన్నాయి.
ఇవన్నీ ఎలా సరిపోతాయో చూద్దాం.
ఏదైనా కొనడం గురించి ఆలోచించండి: మీరు ఆర్డర్ చేయండి, క్రెడిట్‌ని తనిఖీ చేయండి, ప్రతిస్పందనను పొందండి మరియు చివరకు in‌వాయిస్ చేయండి.
క్రెడిట్, inవెంటరీ మరియు P.O వంటి విభిన్న serviceలు ఉన్నాయి. serviceలు, ప్రతి ఒక్కటి నిర్దిష్ట పనుల కోసం రూపొందించబడింది.
పెద్ద, కొరియోగ్రాఫ్ చేసిన application‌ను రూపొందించడానికి ఈ serviceలను కలపవచ్చు.
ఇది మమ్మల్ని Service ఓరియెంటెడ్ architecture (SOA) వైపు నడిపిస్తుంది.
IBM యొక్క model ఈ సెటప్‌లో మూడు institutionలు ఎలా పరస్పర చర్య చేస్తాయి.
మేము SOAలో serviceా ప్రదాతలు, అభ్యర్థనలు/consumerలు మరియు బ్రోకర్‌లను కలిగి ఉన్నాము.
serviceలు ఎక్కడ అందుబాటులో ఉన్నాయో కనుగొనడంలో బ్రోకర్ సహాయం చేస్తాడు.
ఈ model విస్తృతంగా చర్చించబడింది మరియు మీరు దీన్ని చాలా సాహిత్యంలో చూస్తారు.
Service రిజిస్ట్రీ అనేది డైరెక్టరీ లాంటిది, ఏ serviceలు అందుబాటులో ఉన్నాయో కనుగొనడంలో సహాయపడుతుంది.
ఫోన్ డైరెక్టరీ లాగా ఆలోచించండి, కానీ నిర్దిష్ట విషయాల కోసం ఎలా శోధించాలో ఇది మీకు చెప్పదు.
రిజిస్ట్రీ service డైరెక్టరీలా పని చేస్తుంది, సరైన serviceను కనుగొనడంలో మీకు సహాయపడుతుంది.
Service providerలు రిజిస్ట్రీలో తమ serviceలను నమోదు చేసి ప్రచురిస్తారు.
సంభావ్య customer‌లు ఈ serviceలు ఎక్కడ ఉన్నాయో కనుగొనడంలో ఇది సహాయపడుతుంది.
SOA అనేది వివిధ భాగాలు మరియు ఫంక్షన్ల త్రిభుజం.
Web serviceా modelలలో, provider serviceను కలిగి ఉంటారు మరియు అందిస్తారు.
service అభ్యర్థి లేదా consumer ఈ serviceలను ఉపయోగిస్తున్నారు.
Service రిజిస్ట్రీ
serviceలను కనుగొనడంలో మరియు వివరించడంలో సహాయపడుతుంది.
SOAలోని ప్రధాన కార్యకలాపాలు serviceలను ప్రచురించడం, వాటిని కనుగొనడం, ఆపై వాటిని connect చేయడం లేదాByండింగ్ చేయడం.
Web serviceలు విస్తరించదగినవి, తటస్థమైనవి మరియు Independentమైనవి, పంపిణీ చేయబడిన application‌లకు బాగా సరిపోతాయి.
వారు సందేశ మార్పిడి లేదా SOAP స్పెసిఫికేషన్‌ల వంటి విభిన్న వినియోగ modelలను కలిగి ఉన్నారు.
మేము వీటికి సంబంధించిన security అంశాలను తర్వాత పరిశీలిస్తాము.
WSDL, లేదా Web serviceా వివరణ భాష, XML-ఆధారితమైనది మరియు W3Cలో భాగం. ఇది పోర్ట్ రకాలు మరియు serviceలు ఎక్కడ ఉన్నాయో సహా serviceా నిర్మాణాలను వివరిస్తుంది.
WSDL సందేశాలు SOAP సందేశాలు మరియు WSDLలను ఒకదానితో ఒకటి బంధిస్తాయి.
UDDI, లేదా యూనివర్సల్ డిస్క్రిప్షన్, డిస్కవరీ మరియు ఇంటిగ్రేషన్, XML-ఆధారిత రిజిస్ట్రీలను రూపొందించడం ద్వారా రిజిస్ట్రీ service వలె పనిచేస్తుంది.
ఇది మెటాdataను ఉంచుతుంది, consumerలకు లేదా అభ్యర్థనలకు నిర్దిష్ట provider‌లకు లింక్ చేయడంలో సహాయపడుతుంది.
ఇది సమర్ధవంతమైన Service డిస్కవరీ మరియు providerలు మరియు రిక్వెస్టర్ల మధ్యByండింగ్‌ని అనుమతిస్తుంది.
UDDI యొక్క ప్రత్యేకData ఫార్మాట్ సులభమైన వ్యాపార ఆవిష్కరణ వంటి ప్రయోజనాలను అందిస్తుంది.
SOAP మరియు Web serviceలలో security గురించిన వివరాలు తర్వాత కవర్ చేయబడతాయి.
Web serviceలు విధానం, నమ్మకం, goప్యత, సురక్షిత సంభాషణ, సమాఖ్య మరియు అధికారం వంటి భాగాలను కలిగి ఉంటాయి.
ఈ lectureలో, cloud computing‌కు Web serviceలు మరియు SOA ఎలా ప్రాథమికమైనవి అనే దానిపై మేము దృష్టి పెడుతున్నాము.
IaaS, PaaS, SaaS లేదా XaaS వంటి cloud serviceలు Web serviceలను ప్రచురించడం, కనుగొనడం మరియుByండింగ్ చేయడం వంటి ప్రాథమిక బిల్డింగ్ బ్లాక్‌లపై ఆధారపడతాయి.
Service providerలు మరియు consumerలు ఎవరు మరియు serviceలు ఎక్కడ ప్రారంభించబడతాయో మనం అర్థం చేసుకోవాలి.
ప్రాక్టికల్ cloud computing‌లో Web serviceలు మరియు SOA కీలక పాత్ర పోషించాయి.
మేము భవిష్యత్ చర్చలలో cloud computing యొక్క ఇతర అంశాలను అన్వేషించడం కొనసాగిస్తాము.
SOAP సందేశాలు processing మరియు డెలివరీ కోసం నిర్దిష్ట application‌లకు కంటెంట్ మరియుDataను తీసుకెళ్లడానికి HTTPని ఉపయోగిస్తాయి.
XML కుటుంబంలో, మాకు XML, XSLT, XSL, XPath, XPointer మరియు మరిన్ని ఉన్నాయి, కానీ ఇప్పుడు వీటన్నింటిని కవర్ చేయడానికి తగినంత సమయం లేదు.
XML నేర్చుకోవాలనే ఆసక్తి ఉన్నవారికి, చిన్న ప్రాజెక్ట్‌లతో పాటు W3C స్కూల్ లేదా ప్రామాణిక పుస్తకాలు వంటి వనరులు సిఫార్సు చేయబడతాయి.
Web serviceల్లోని APIలు విభిన్న శైలులు మరియు ప్రోటోcall‌లను కలిగి ఉంటాయి.
XML యొక్క బహుముఖ ప్రజ్ఞ మరియు పంపిణీ వ్యవస్థల నిర్మాణంలో దాని పాత్ర కీలకం.
పంపిణీ చేయబడిన System‌లలో, SOAP సందేశాలు XML ఆధారంగా WSDL సందేశం మరియు UDDIతో పాటు Communication‌ను సులభతరం చేస్తాయి.
మేము XML రాజ్యంలో MathML వంటి నేమ్‌స్payస్‌లను కూడా కలిగి ఉన్నాము.
XMLతో పాటు, గ్రాఫిక్ కంటెంట్‌ని సృష్టించడానికి మాకు SVG ఉంది.
XMLData పరివర్తన చాలా బహుముఖమైనది మరియు వివిధ అవసరాలకు అనుగుణంగా ఉంటుంది.
dataను సూచించడానికి, నేను కొన్ని స్టైలింగ్ కోసం XSLTని ఉపయోగిస్తాను, ఇది అవసరం.
dataను సూచించడానికి స్టైల్ షీట్‌లు ఉపయోగపడతాయి; నేను దానిని వీక్షించడానికి HTML ఫైల్‌ను కూడా సృష్టించగలను.
మేము కేవలం XML మరియు దాని ప్రధాన భాగాల యొక్క ప్రాథమికాలను కవర్ చేసాము.
System‌లలో పరస్పర చర్యను సృష్టించేందుకు ఈ భాగాలు కలిసి పనిచేస్తాయి.
cloud computing లేదా డిస్ట్రిబ్యూట్ System‌లలో, XML అనేది ఇంటర్‌ఆపరేబిలిటీ కోసం go-టు లాంగ్వేజ్.
కాబట్టి, అది ఈ రోజు కోసం XML గురించి మా ప్రాథమిక చాట్‌ను ముగించింది. ధన్యవాదాలు!

